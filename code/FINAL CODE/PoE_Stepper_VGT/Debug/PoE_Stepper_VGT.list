
PoE_Stepper_VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0801138c  0801138c  0002138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fbc  08013fbc  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013fbc  08013fbc  00023fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fc4  08013fc4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fc4  08013fc4  00023fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fc8  08013fc8  00023fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013fcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00005b08  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b80  20005b80  00030078  2**0
                  ALLOC
 12 .lwip_sec     0000cf20  20006180  20006180  00030078  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033d97  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005efa  00000000  00000000  00063e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  00069d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019b0  00000000  00000000  0006b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d5e8  00000000  00000000  0006d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029d12  00000000  00000000  0009a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5da8  00000000  00000000  000c443a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001aa1e2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007678  00000000  00000000  001aa238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011374 	.word	0x08011374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08011374 	.word	0x08011374

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_UART_RxHalfCpltCallback>:
extern struct netif gnetif;
uint8_t Rx_data[10];  //  creating a buffer of 10 bytes


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);  // toggle PA0
 8000570:	2110      	movs	r1, #16
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <HAL_UART_RxHalfCpltCallback+0x18>)
 8000574:	f002 ff5f 	bl	8003436 <HAL_GPIO_TogglePin>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, Rx_data, 4);
 800058c:	2204      	movs	r2, #4
 800058e:	4904      	ldr	r1, [pc, #16]	; (80005a0 <HAL_UART_RxCpltCallback+0x1c>)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <HAL_UART_RxCpltCallback+0x20>)
 8000592:	f004 fe48 	bl	8005226 <HAL_UART_Receive_DMA>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000258 	.word	0x20000258
 80005a4:	2000031c 	.word	0x2000031c

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 ff41 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f871 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fa05 	bl	80009c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ba:	f000 f8d7 	bl	800076c <MX_SPI1_Init>
  MX_SPI3_Init();
 80005be:	f000 f90b 	bl	80007d8 <MX_SPI3_Init>
  MX_TIM4_Init();
 80005c2:	f000 f93f 	bl	8000844 <MX_TIM4_Init>
  MX_DMA_Init();
 80005c6:	f000 f9dd 	bl	8000984 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f9b1 	bl	8000930 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 80005ce:	f005 fe93 	bl	80062f8 <MX_LWIP_Init>
     //set duty cycle of tim4 ch1

    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //start tim1 ch4 pwm

  //  HAL_TIM_Base_Start(&htim4);
  TIM4->CCR1 = 1;
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <main+0xe0>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //start tim4 ch1 pwm
 80005d8:	2100      	movs	r1, #0
 80005da:	482c      	ldr	r0, [pc, #176]	; (800068c <main+0xe4>)
 80005dc:	f003 ff66 	bl	80044ac <HAL_TIM_PWM_Start>

  uint8_t spi_buf[4];


  SPI_429_Init(spi_buf);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 faf8 	bl	8000bd8 <SPI_429_Init>
  SPI_2660_Init();
 80005e8:	f000 fa9c 	bl	8000b24 <SPI_2660_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // read_ifx(spi_buf);

  HAL_UART_Receive_DMA(&huart1, Rx_data, 4);  // Receive 4 Bytes of data
 80005ec:	2204      	movs	r2, #4
 80005ee:	4928      	ldr	r1, [pc, #160]	; (8000690 <main+0xe8>)
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <main+0xec>)
 80005f2:	f004 fe18 	bl	8005226 <HAL_UART_Receive_DMA>



//	 read_common_reg(spi_buf);

	 switch (Rx_data[0]) {
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <main+0xe8>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	2b0e      	cmp	r3, #14
 80005fe:	d836      	bhi.n	800066e <main+0xc6>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <main+0x60>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	08000645 	.word	0x08000645
 800060c:	08000651 	.word	0x08000651
 8000610:	0800066f 	.word	0x0800066f
 8000614:	0800065b 	.word	0x0800065b
 8000618:	0800066f 	.word	0x0800066f
 800061c:	0800066f 	.word	0x0800066f
 8000620:	0800066f 	.word	0x0800066f
 8000624:	0800066f 	.word	0x0800066f
 8000628:	0800066f 	.word	0x0800066f
 800062c:	0800066f 	.word	0x0800066f
 8000630:	0800066f 	.word	0x0800066f
 8000634:	0800066f 	.word	0x0800066f
 8000638:	0800066f 	.word	0x0800066f
 800063c:	0800066f 	.word	0x0800066f
 8000640:	08000667 	.word	0x08000667
		 case 0x01: // set pos

//			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
			 set_motor_x(Rx_data, spi_buf);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <main+0xe8>)
 800064a:	f000 fb8e 	bl	8000d6a <set_motor_x>
			 break;
 800064e:	e00e      	b.n	800066e <main+0xc6>

		 case 0x02: // get pos
			 get_position(spi_buf);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fbb2 	bl	8000dbc <get_position>
			 //set_const_vel_test(spi_buf);

			 break;
 8000658:	e009      	b.n	800066e <main+0xc6>

		 case 0x04: // set vel
			 set_motor_vel(Rx_data, spi_buf);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0xe8>)
 8000660:	f000 fb41 	bl	8000ce6 <set_motor_vel>
			 break;
 8000664:	e003      	b.n	800066e <main+0xc6>

		 case 0x08: // get vel
			 break;

		 case 0x0F: // set current scale
			 set_current_scaling(Rx_data);
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0xe8>)
 8000668:	f000 fb65 	bl	8000d36 <set_current_scaling>
			 break;
 800066c:	bf00      	nop

	 }

	 uint8_t test[4];
	 test[0] = Rx_data[0];
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <main+0xe8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	703b      	strb	r3, [r7, #0]
	 test[1] = Rx_data[1];
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <main+0xe8>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	707b      	strb	r3, [r7, #1]
	 test[2] = Rx_data[2];
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <main+0xe8>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	70bb      	strb	r3, [r7, #2]
	 test[3] = Rx_data[3];
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <main+0xe8>)
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	70fb      	strb	r3, [r7, #3]
  {
 8000686:	e7b6      	b.n	80005f6 <main+0x4e>
 8000688:	40000800 	.word	0x40000800
 800068c:	20000210 	.word	0x20000210
 8000690:	20000258 	.word	0x20000258
 8000694:	2000031c 	.word	0x2000031c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00f fe42 	bl	8010330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fea5 	bl	800346c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fbb4 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f003 f906 	bl	800395c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fb9d 	bl	8000e94 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI1_Init+0x64>)
 800078c:	2202      	movs	r2, #2
 800078e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000792:	2201      	movs	r2, #1
 8000794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007a0:	2228      	movs	r2, #40	; 0x28
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007be:	f003 fac9 	bl	8003d54 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 fb64 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000360 	.word	0x20000360
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI3_Init+0x64>)
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_SPI3_Init+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_SPI3_Init+0x64>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI3_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_SPI3_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI3_Init+0x64>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI3_Init+0x64>)
 80007fe:	2201      	movs	r2, #1
 8000800:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI3_Init+0x64>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI3_Init+0x64>)
 800080c:	2220      	movs	r2, #32
 800080e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI3_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI3_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI3_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI3_Init+0x64>)
 8000824:	220a      	movs	r2, #10
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_SPI3_Init+0x64>)
 800082a:	f003 fa93 	bl	8003d54 <HAL_SPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 fb2e 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000264 	.word	0x20000264
 8000840:	40003c00 	.word	0x40003c00

08000844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_TIM4_Init+0xe4>)
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <MX_TIM4_Init+0xe8>)
 8000878:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_TIM4_Init+0xe4>)
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_TIM4_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_TIM4_Init+0xe4>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_TIM4_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_TIM4_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	; (8000928 <MX_TIM4_Init+0xe4>)
 800089a:	f003 fd5f 	bl	800435c <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008a4:	f000 faf6 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	; (8000928 <MX_TIM4_Init+0xe4>)
 80008b6:	f003 ff83 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80008c0:	f000 fae8 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	; (8000928 <MX_TIM4_Init+0xe4>)
 80008c6:	f003 fd98 	bl	80043fa <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fae0 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_TIM4_Init+0xe4>)
 80008e4:	f004 fb44 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80008ee:	f000 fad1 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM4_Init+0xe4>)
 800090a:	f003 fe97 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000914:	f000 fabe 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM4_Init+0xe4>)
 800091a:	f000 fb89 	bl	8001030 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	; 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000210 	.word	0x20000210
 800092c:	40000800 	.word	0x40000800

08000930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART1_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000968:	f004 fb7e 	bl	8005068 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 fa8f 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000031c 	.word	0x2000031c
 8000980:	40011000 	.word	0x40011000

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_DMA_Init+0x3c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <MX_DMA_Init+0x3c>)
 8000994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	203a      	movs	r0, #58	; 0x3a
 80009ac:	f000 feb3 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009b0:	203a      	movs	r0, #58	; 0x3a
 80009b2:	f000 fecc 	bl	800174e <HAL_NVIC_EnableIRQ>

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a30      	ldr	r2, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a29      	ldr	r2, [pc, #164]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_GPIO_Init+0xfc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	211c      	movs	r1, #28
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a6c:	f002 fcca 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f248 0110 	movw	r1, #32784	; 0x8010
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a78:	f002 fcc4 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000a7c:	231c      	movs	r3, #28
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a94:	f002 fb1a 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8000a98:	f248 0310 	movw	r3, #32784	; 0x8010
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000ab2:	f002 fb0b 	bl	80030cc <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40020000 	.word	0x40020000

08000acc <SPI_2660_Transmit>:

/* USER CODE BEGIN 4 */


HAL_StatusTypeDef SPI_2660_Transmit(uint8_t * dataBuffer){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef err;
    uint8_t spi_buf[3];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ada:	4810      	ldr	r0, [pc, #64]	; (8000b1c <SPI_2660_Transmit+0x50>)
 8000adc:	f002 fc92 	bl	8003404 <HAL_GPIO_WritePin>
    err = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)dataBuffer, (uint8_t *)spi_buf,  3, 100);
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	2364      	movs	r3, #100	; 0x64
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2303      	movs	r3, #3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <SPI_2660_Transmit+0x54>)
 8000aee:	f003 f9ba 	bl	8003e66 <HAL_SPI_TransmitReceive>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
    while(HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000af6:	bf00      	nop
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <SPI_2660_Transmit+0x54>)
 8000afa:	f003 fb56 	bl	80041aa <HAL_SPI_GetState>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d1f9      	bne.n	8000af8 <SPI_2660_Transmit+0x2c>
//    while(HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <SPI_2660_Transmit+0x50>)
 8000b0c:	f002 fc7a 	bl	8003404 <HAL_GPIO_WritePin>

    return err;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	20000264 	.word	0x20000264

08000b24 <SPI_2660_Init>:

uint8_t SPI_2660_Init(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
    uint8_t wData[3];
    wData[0] = 0x09;            // SPI = $94557  Constant toff mode
 8000b2a:	2309      	movs	r3, #9
 8000b2c:	713b      	strb	r3, [r7, #4]
    wData[1] = 0x01;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	717b      	strb	r3, [r7, #5]
    wData[2] = 0xB4;
 8000b32:	23b4      	movs	r3, #180	; 0xb4
 8000b34:	71bb      	strb	r3, [r7, #6]
    SPI_2660_Transmit(wData);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffc7 	bl	8000acc <SPI_2660_Transmit>


    wData[0] = 0x0D;            // SPI = $D001F  Current setting: $d001F (max. current) (D000A = 1/3 current)
 8000b3e:	230d      	movs	r3, #13
 8000b40:	713b      	strb	r3, [r7, #4]
    wData[1] = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	717b      	strb	r3, [r7, #5]
    wData[2] = 0x0A;//0x0A;
 8000b46:	230a      	movs	r3, #10
 8000b48:	71bb      	strb	r3, [r7, #6]
    SPI_2660_Transmit(wData);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffbd 	bl	8000acc <SPI_2660_Transmit>

    wData[0] = 0x0E;            // SPI = $E0090  low driver strength, StallGuard2 read, SDOFF=1
 8000b52:	230e      	movs	r3, #14
 8000b54:	713b      	strb	r3, [r7, #4]
    wData[1] = 0x00;            //  1110 0000 0000 1001 0000
 8000b56:	2300      	movs	r3, #0
 8000b58:	717b      	strb	r3, [r7, #5]
    wData[2] = 0x10;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	71bb      	strb	r3, [r7, #6]
    SPI_2660_Transmit(wData);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ffb3 	bl	8000acc <SPI_2660_Transmit>

    wData[0] = 0x00;            // SPI = $00000  256 microstep setting
 8000b66:	2300      	movs	r3, #0
 8000b68:	713b      	strb	r3, [r7, #4]
    wData[1] = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	717b      	strb	r3, [r7, #5]
    wData[2] = 0x00; // 64 micro step setting // 0x00; 08-full
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71bb      	strb	r3, [r7, #6]
    SPI_2660_Transmit(wData);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffa9 	bl	8000acc <SPI_2660_Transmit>

    return 0;
 8000b7a:	2300      	movs	r3, #0

}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SPI_429_Transmit>:


HAL_StatusTypeDef SPI_429_Transmit(uint8_t * dataBuffer, uint8_t *spi_buf){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef err;
    // uint8_t spi_buf[4];


    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2104      	movs	r1, #4
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <SPI_429_Transmit+0x4c>)
 8000b94:	f002 fc36 	bl	8003404 <HAL_GPIO_WritePin>
    err = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)dataBuffer, (uint8_t *)spi_buf,  4, 10000);
 8000b98:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <SPI_429_Transmit+0x50>)
 8000ba6:	f003 f95e 	bl	8003e66 <HAL_SPI_TransmitReceive>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000bae:	bf00      	nop
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <SPI_429_Transmit+0x50>)
 8000bb2:	f003 fafa 	bl	80041aa <HAL_SPI_GetState>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d1f9      	bne.n	8000bb0 <SPI_429_Transmit+0x2c>
//  HAL_SPI_Receive(&hspi3, (uint8_t *)spi_buf, 5, 100);
//    while(HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <SPI_429_Transmit+0x4c>)
 8000bc2:	f002 fc1f 	bl	8003404 <HAL_GPIO_WritePin>

    return err;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	20000360 	.word	0x20000360

08000bd8 <SPI_429_Init>:

uint8_t SPI_429_Init(uint8_t *spi_buf){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    uint8_t wData[4];
    wData[0] = 0x04;            // SPI = $04 00 00 07
 8000be0:	2304      	movs	r3, #4
 8000be2:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000be4:	2300      	movs	r3, #0
 8000be6:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x07;
 8000bec:	2307      	movs	r3, #7
 8000bee:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData,spi_buf);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffc4 	bl	8000b84 <SPI_429_Transmit>
    //0000 0100 0000 0000 0[000 0000 0111]
    //IDX: 0010
    //vmin: 7

    wData[0] = 0x06;            // SPI = $06 00 07 FF
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c00:	2300      	movs	r3, #0
 8000c02:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x07;
 8000c04:	2307      	movs	r3, #7
 8000c06:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData,spi_buf);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffb6 	bl	8000b84 <SPI_429_Transmit>
    //0000 0110 0000 0000 0[111 1111 1111]
    //IDX: 0011
    //vmax:2047

    wData[0] = 0x18;// end now 07 //0x14;            // SPI = $14 00 33 00
 8000c18:	2318      	movs	r3, #24
 8000c1a:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x33;
 8000c20:	2333      	movs	r3, #51	; 0x33
 8000c22:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;//0x07; //usrs res 111 64 microstep
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData, spi_buf);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffa8 	bl	8000b84 <SPI_429_Transmit>
//    //REF_CONF = 3
//    //R_M = 2
//    //00-ramp mode(set pos), 01 soft mode, 10 velocity mode

    //ENABLE REFERENCE SWITCHES
    wData[0] = 0x14;            // SPI = $14 00 03 00
 8000c34:	2314      	movs	r3, #20
 8000c36:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;            // ref_conf = (refrnl, softstop, disavle stop r. disable stop 1) = 0b011
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;          //0x02;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData, spi_buf);
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff9a 	bl	8000b84 <SPI_429_Transmit>

    wData[0] = 0x0C;            // SPI = $0C 00 00 0A
 8000c50:	230c      	movs	r3, #12
 8000c52:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x0A;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData, spi_buf);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff8c 	bl	8000b84 <SPI_429_Transmit>
    //0000 1100 0000 0000 0000 0[000 0000 1010]
    //IDX:0110
    //A_MAX: 10


    wData[0] = 0x12;            // SPI = $12 00 1E 08
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x1E;
 8000c74:	231e      	movs	r3, #30
 8000c76:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x08;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData, spi_buf);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff7e 	bl	8000b84 <SPI_429_Transmit>
    //IDX:1001
    //1: 1
    //PMUL:158-128 = 30
    //PDIV:8

    wData[0] = 0x0A;            // SPI = $0A 00 03 00
 8000c88:	230a      	movs	r3, #10
 8000c8a:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x03;
 8000c90:	2303      	movs	r3, #3
 8000c92:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
    SPI_429_Transmit(wData, spi_buf);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff70 	bl	8000b84 <SPI_429_Transmit>
//    wData[2] = 0x00;
//    wData[3] = 0x20;
//    //ENABLE step/dir mode

    //INVERSE REF SWITCH
    wData[0] = 0x68;
 8000ca4:	2368      	movs	r3, #104	; 0x68
 8000ca6:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x21;
 8000cb0:	2321      	movs	r3, #33	; 0x21
 8000cb2:	73fb      	strb	r3, [r7, #15]
    //ENABLE step/dir mode

    SPI_429_Transmit(wData, spi_buf);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff62 	bl	8000b84 <SPI_429_Transmit>


//    set refmux, mot2r

    wData[0] = 0x7E;
 8000cc0:	237e      	movs	r3, #126	; 0x7e
 8000cc2:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x20;
 8000cc4:	2320      	movs	r3, #32
 8000cc6:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x0F;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(wData, spi_buf);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff54 	bl	8000b84 <SPI_429_Transmit>


    return 0;
 8000cdc:	2300      	movs	r3, #0
    //64 micros/ full step       200 steps/ rev
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <set_motor_vel>:
//   read_position(spi_buf, 1);


}

uint32_t set_motor_vel(uint8_t * vel, uint8_t * spi_buf){
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]

    // set velocity mode
    uint8_t wData[4];

    wData[0] = 0x14;            // SPI = $14 00 03 00
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;            // ref_conf = (refrnl, softstop, disavle stop r. disable stop 1) = 0b011
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x02;          //0x02 velocity mode;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(wData, spi_buf);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	6839      	ldr	r1, [r7, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff3c 	bl	8000b84 <SPI_429_Transmit>

    // set vel target

    wData[0] = 0x08;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	737b      	strb	r3, [r7, #13]
    wData[2] = vel[2];
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	73bb      	strb	r3, [r7, #14]
    wData[3] = vel[3];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	78db      	ldrb	r3, [r3, #3]
 8000d1e:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(wData, spi_buf);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff2c 	bl	8000b84 <SPI_429_Transmit>

    return 0;
 8000d2c:	2300      	movs	r3, #0

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <set_current_scaling>:


uint32_t set_current_scaling(uint8_t * c_scale){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]

	uint8_t wData[3];

    wData[0] = 0x0D;            // SPI = $D001F  Current setting: $d001F (max. current) (D000A = 1/3 current)
 8000d3e:	230d      	movs	r3, #13
 8000d40:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x01 & (c_scale[2]);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3302      	adds	r3, #2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	737b      	strb	r3, [r7, #13]
    wData[2] = c_scale[3];//0x0A;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	73bb      	strb	r3, [r7, #14]
    SPI_2660_Transmit(wData);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff feb6 	bl	8000acc <SPI_2660_Transmit>

    return 0;
 8000d60:	2300      	movs	r3, #0

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <set_motor_x>:



uint32_t set_motor_x(uint8_t * pos, uint8_t * spi_buf){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]

    // set ramp mode
    uint8_t wData[4];

    wData[0] = 0x14;            // SPI = $14 00 03 00
 8000d74:	2314      	movs	r3, #20
 8000d76:	733b      	strb	r3, [r7, #12]
    wData[1] = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	737b      	strb	r3, [r7, #13]
    wData[2] = 0x00;            // ref_conf = (refrnl, softstop, disavle stop r. disable stop 1) = 0b011
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73bb      	strb	r3, [r7, #14]
    wData[3] = 0x00;          //0x00 ramp mode;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(wData, spi_buf);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	6839      	ldr	r1, [r7, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fefa 	bl	8000b84 <SPI_429_Transmit>

    // set x target
    wData[0] = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	733b      	strb	r3, [r7, #12]
    wData[1] = pos[1];
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	737b      	strb	r3, [r7, #13]
    wData[2] = pos[2];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	73bb      	strb	r3, [r7, #14]
    wData[3] = pos[3];
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(wData, spi_buf);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fee9 	bl	8000b84 <SPI_429_Transmit>

    return 0;
 8000db2:	2300      	movs	r3, #0

}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <get_position>:
    wData[1] = 0x00;
    wData[2] = 0x03;            // ref_conf = (refrnl, softstop, disavle stop r. disable stop 1) = 0b011
    wData[3] = 0x02;          //0x02;
    SPI_429_Transmit(wData, spi_buf);
}
void get_position(uint8_t * spi_buf){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	spi_buf[0] = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	spi_buf[1] = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	spi_buf[2] = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	spi_buf[3] = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3303      	adds	r3, #3
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
    //24 bits position

//    uint8_t urmum[4];

    uint8_t rData[4];
    rData[0] = 0x03;
 8000de2:	2303      	movs	r3, #3
 8000de4:	733b      	strb	r3, [r7, #12]
    rData[1] = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	737b      	strb	r3, [r7, #13]
    rData[2] = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73bb      	strb	r3, [r7, #14]
    rData[3] = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]

    SPI_429_Transmit(rData, spi_buf);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fec3 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff febd 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff feb7 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff feb1 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff feab 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fea5 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe9f 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe99 	bl	8000b84 <SPI_429_Transmit>
    SPI_429_Transmit(rData, spi_buf);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe93 	bl	8000b84 <SPI_429_Transmit>

    uint8_t uart_data[4];

    uart_data[0] = spi_buf[0];
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	723b      	strb	r3, [r7, #8]
    uart_data[1] = spi_buf[1];
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	727b      	strb	r3, [r7, #9]
    uart_data[2] = spi_buf[2];
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	72bb      	strb	r3, [r7, #10]
    uart_data[3] = spi_buf[3];
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	72fb      	strb	r3, [r7, #11]


    HAL_UART_Transmit(&huart1, uart_data, 4, 1000);
 8000e76:	f107 0108 	add.w	r1, r7, #8
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <get_position+0xd4>)
 8000e82:	f004 f93e 	bl	8005102 <HAL_UART_Transmit>


//    return spi_buf;
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000031c 	.word	0x2000031c

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <HAL_SPI_MspInit+0xe8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12c      	bne.n	8000f6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a30      	ldr	r2, [pc, #192]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f4a:	2338      	movs	r3, #56	; 0x38
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <HAL_SPI_MspInit+0xf0>)
 8000f66:	f002 f8b1 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f6a:	e031      	b.n	8000fd0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_SPI_MspInit+0xf4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12c      	bne.n	8000fd0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_SPI_MspInit+0xec>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <HAL_SPI_MspInit+0xf8>)
 8000fcc:	f002 f87e 	bl	80030cc <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40003c00 	.word	0x40003c00
 8000fe8:	40020800 	.word	0x40020800

08000fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10d      	bne.n	800101a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x40>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_TIM_Base_MspInit+0x40>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <HAL_TIM_Base_MspInit+0x40>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40000800 	.word	0x40000800
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <HAL_TIM_MspPostInit+0x68>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11d      	bne.n	800108e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = CLK_429_Pin;
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800107e:	2302      	movs	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CLK_429_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_TIM_MspPostInit+0x70>)
 800108a:	f002 f81f 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40000800 	.word	0x40000800
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <HAL_UART_MspInit+0xf4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d163      	bne.n	800118e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_UART_MspInit+0xf8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001110:	2307      	movs	r3, #7
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4821      	ldr	r0, [pc, #132]	; (80011a0 <HAL_UART_MspInit+0xfc>)
 800111c:	f001 ffd6 	bl	80030cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <HAL_UART_MspInit+0x104>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800112c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_UART_MspInit+0x100>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_UART_MspInit+0x100>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0x100>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001164:	f000 fb0e 	bl	8001784 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800116e:	f7ff fe91 	bl	8000e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_UART_MspInit+0x100>)
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_UART_MspInit+0x100>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2025      	movs	r0, #37	; 0x25
 8001184:	f000 fac7 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001188:	2025      	movs	r0, #37	; 0x25
 800118a:	f000 fae0 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40011000 	.word	0x40011000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	200002bc 	.word	0x200002bc
 80011a8:	40026440 	.word	0x40026440

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f96e 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART1_IRQHandler+0x10>)
 8001206:	f004 f83f 	bl	8005288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000031c 	.word	0x2000031c

08001214 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA2_Stream2_IRQHandler+0x10>)
 800121a:	f000 fc4b 	bl	8001ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002bc 	.word	0x200002bc

08001228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_kill>:

int _kill(int pid, int sig)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <_kill+0x20>)
 8001244:	2216      	movs	r2, #22
 8001246:	601a      	str	r2, [r3, #0]
	return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20005b70 	.word	0x20005b70

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe5 	bl	8001238 <_kill>
	while (1) {}		/* Make sure we hang here */
 800126e:	e7fe      	b.n	800126e <_exit+0x12>

08001270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e00a      	b.n	8001298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001282:	f3af 8000 	nop.w
 8001286:	4601      	mov	r1, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf0      	blt.n	8001282 <_read+0x12>
	}

return len;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e009      	b.n	80012d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf1      	blt.n	80012bc <_write+0x12>
	}
	return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	605a      	str	r2, [r3, #4]
	return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d205      	bcs.n	8001388 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <_sbrk+0x6c>)
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20020000 	.word	0x20020000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	20000094 	.word	0x20000094
 80013b4:	20005b80 	.word	0x20005b80
 80013b8:	20005b70 	.word	0x20005b70

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140a:	f7ff ffd7 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f00e ff4f 	bl	80102b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff f8c9 	bl	80005a8 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001424:	08013fcc 	.word	0x08013fcc
  ldr r2, =_sbss
 8001428:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800142c:	20005b80 	.word	0x20005b80

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f94f 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	200f      	movs	r0, #15
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fd1a 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f967 	bl	800176a <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f92f 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200003b8 	.word	0x200003b8

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200003b8 	.word	0x200003b8

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff feb6 	bl	8001500 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e099      	b.n	80018d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c0:	e00f      	b.n	80017e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c2:	f7ff fe9d 	bl	8001500 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d908      	bls.n	80017e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e078      	b.n	80018d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e8      	bne.n	80017c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_DMA_Init+0x158>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800180e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	2b04      	cmp	r3, #4
 800183a:	d107      	bne.n	800184c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	4313      	orrs	r3, r2
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f023 0307 	bic.w	r3, r3, #7
 8001862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2b04      	cmp	r3, #4
 8001874:	d117      	bne.n	80018a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00e      	beq.n	80018a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fb01 	bl	8001e90 <DMA_CheckFifoParam>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018a2:	2301      	movs	r3, #1
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fab8 	bl	8001e24 <DMA_CalcBaseAndBitshift>
 80018b4:	4603      	mov	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	223f      	movs	r2, #63	; 0x3f
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	f010803f 	.word	0xf010803f

080018e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_DMA_Start_IT+0x26>
 8001902:	2302      	movs	r3, #2
 8001904:	e040      	b.n	8001988 <HAL_DMA_Start_IT+0xa8>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d12f      	bne.n	800197a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2202      	movs	r2, #2
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fa4a 	bl	8001dc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	223f      	movs	r2, #63	; 0x3f
 800193a:	409a      	lsls	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0216 	orr.w	r2, r2, #22
 800194e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0208 	orr.w	r2, r2, #8
 8001966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e005      	b.n	8001986 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800199e:	f7ff fdaf 	bl	8001500 <HAL_GetTick>
 80019a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d008      	beq.n	80019c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e052      	b.n	8001a68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0216 	bic.w	r2, r2, #22
 80019d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <HAL_DMA_Abort+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0208 	bic.w	r2, r2, #8
 8001a00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a12:	e013      	b.n	8001a3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a14:	f7ff fd74 	bl	8001500 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d90c      	bls.n	8001a3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e015      	b.n	8001a68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e4      	bne.n	8001a14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	223f      	movs	r2, #63	; 0x3f
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00c      	b.n	8001aa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac0:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <HAL_DMA_IRQHandler+0x258>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_DMA_IRQHandler+0x25c>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2208      	movs	r2, #8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2201      	movs	r2, #1
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0204 	orr.w	r2, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2210      	movs	r2, #16
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d043      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03c      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2210      	movs	r2, #16
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d024      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
 8001be2:	e01f      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2220      	movs	r2, #32
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 808e 	beq.w	8001d52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8086 	beq.w	8001d52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d136      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0216 	bic.w	r2, r2, #22
 8001c6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x1da>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0208 	bic.w	r2, r2, #8
 8001c9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	223f      	movs	r2, #63	; 0x3f
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d07d      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
        }
        return;
 8001cca:	e078      	b.n	8001dbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d030      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e02b      	b.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e022      	b.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0210 	bic.w	r2, r2, #16
 8001d30:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d032      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d022      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d307      	bcc.n	8001d9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x2ca>
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d9a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e000      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dbe:	bf00      	nop
    }
  }
}
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop

08001dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d108      	bne.n	8001e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e06:	e007      	b.n	8001e18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3b10      	subs	r3, #16
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <DMA_CalcBaseAndBitshift+0x64>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <DMA_CalcBaseAndBitshift+0x68>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d909      	bls.n	8001e66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	1d1a      	adds	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	659a      	str	r2, [r3, #88]	; 0x58
 8001e64:	e007      	b.n	8001e76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	aaaaaaab 	.word	0xaaaaaaab
 8001e8c:	08013d84 	.word	0x08013d84

08001e90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d11f      	bne.n	8001eea <DMA_CheckFifoParam+0x5a>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d856      	bhi.n	8001f5e <DMA_CheckFifoParam+0xce>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <DMA_CheckFifoParam+0x28>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001edb 	.word	0x08001edb
 8001ec0:	08001ec9 	.word	0x08001ec9
 8001ec4:	08001f5f 	.word	0x08001f5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d046      	beq.n	8001f62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ed8:	e043      	b.n	8001f62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee2:	d140      	bne.n	8001f66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee8:	e03d      	b.n	8001f66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	d121      	bne.n	8001f38 <DMA_CheckFifoParam+0xa8>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d837      	bhi.n	8001f6a <DMA_CheckFifoParam+0xda>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <DMA_CheckFifoParam+0x70>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f17 	.word	0x08001f17
 8001f08:	08001f11 	.word	0x08001f11
 8001f0c:	08001f29 	.word	0x08001f29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
      break;
 8001f14:	e030      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d025      	beq.n	8001f6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f26:	e022      	b.n	8001f6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f30:	d11f      	bne.n	8001f72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f36:	e01c      	b.n	8001f72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d903      	bls.n	8001f46 <DMA_CheckFifoParam+0xb6>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d003      	beq.n	8001f4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f44:	e018      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4a:	e015      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00e      	beq.n	8001f76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e00b      	b.n	8001f76 <DMA_CheckFifoParam+0xe6>
      break;
 8001f5e:	bf00      	nop
 8001f60:	e00a      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;
 8001f62:	bf00      	nop
 8001f64:	e008      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;
 8001f66:	bf00      	nop
 8001f68:	e006      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e004      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e002      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
    }
  } 
  
  return status; 
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001f98:	4baa      	ldr	r3, [pc, #680]	; (8002244 <HAL_ETH_Init+0x2bc>)
 8001f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e183      	b.n	80022b6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f004 faca 	bl	800655c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	4b9e      	ldr	r3, [pc, #632]	; (8002248 <HAL_ETH_Init+0x2c0>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	4a9d      	ldr	r2, [pc, #628]	; (8002248 <HAL_ETH_Init+0x2c0>)
 8001fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd8:	4b9b      	ldr	r3, [pc, #620]	; (8002248 <HAL_ETH_Init+0x2c0>)
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fe4:	4b99      	ldr	r3, [pc, #612]	; (800224c <HAL_ETH_Init+0x2c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a98      	ldr	r2, [pc, #608]	; (800224c <HAL_ETH_Init+0x2c4>)
 8001fea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ff0:	4b96      	ldr	r3, [pc, #600]	; (800224c <HAL_ETH_Init+0x2c4>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4994      	ldr	r1, [pc, #592]	; (800224c <HAL_ETH_Init+0x2c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002016:	f7ff fa73 	bl	8001500 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800201c:	e011      	b.n	8002042 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800201e:	f7ff fa6f 	bl	8001500 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800202c:	d909      	bls.n	8002042 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e139      	b.n	80022b6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e4      	bne.n	800201e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f023 031c 	bic.w	r3, r3, #28
 8002062:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002064:	f001 fe42 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8002068:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4a78      	ldr	r2, [pc, #480]	; (8002250 <HAL_ETH_Init+0x2c8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d908      	bls.n	8002084 <HAL_ETH_Init+0xfc>
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_ETH_Init+0x2cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d804      	bhi.n	8002084 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e027      	b.n	80020d4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4a73      	ldr	r2, [pc, #460]	; (8002254 <HAL_ETH_Init+0x2cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d908      	bls.n	800209e <HAL_ETH_Init+0x116>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4a6d      	ldr	r2, [pc, #436]	; (8002244 <HAL_ETH_Init+0x2bc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d204      	bcs.n	800209e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f043 030c 	orr.w	r3, r3, #12
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	e01a      	b.n	80020d4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4a68      	ldr	r2, [pc, #416]	; (8002244 <HAL_ETH_Init+0x2bc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d303      	bcc.n	80020ae <HAL_ETH_Init+0x126>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4a6b      	ldr	r2, [pc, #428]	; (8002258 <HAL_ETH_Init+0x2d0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d911      	bls.n	80020d2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4a69      	ldr	r2, [pc, #420]	; (8002258 <HAL_ETH_Init+0x2d0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d908      	bls.n	80020c8 <HAL_ETH_Init+0x140>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_ETH_Init+0x2d4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d804      	bhi.n	80020c8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e000      	b.n	80020d4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80020dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fb14 	bl	8002710 <HAL_ETH_WritePHYRegister>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80020f2:	6939      	ldr	r1, [r7, #16]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fcc9 	bl	8002a8c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0d7      	b.n	80022b6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002106:	20ff      	movs	r0, #255	; 0xff
 8002108:	f7ff fa06 	bl	8001518 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a5 	beq.w	8002260 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002116:	f7ff f9f3 	bl	8001500 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	461a      	mov	r2, r3
 8002122:	2101      	movs	r1, #1
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fa8b 	bl	8002640 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800212a:	f7ff f9e9 	bl	8001500 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d90f      	bls.n	800215c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fca2 	bl	8002a8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0ac      	b.n	80022b6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0da      	beq.n	800211c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216a:	2100      	movs	r1, #0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 facf 	bl	8002710 <HAL_ETH_WritePHYRegister>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fc84 	bl	8002a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800218c:	2301      	movs	r3, #1
 800218e:	e092      	b.n	80022b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff f9b6 	bl	8001500 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	461a      	mov	r2, r3
 800219c:	2101      	movs	r1, #1
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa4e 	bl	8002640 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80021a4:	f7ff f9ac 	bl	8001500 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d90f      	bls.n	80021d6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80021ba:	6939      	ldr	r1, [r7, #16]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fc65 	bl	8002a8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e06f      	b.n	80022b6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0da      	beq.n	8002196 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	461a      	mov	r2, r3
 80021e6:	2110      	movs	r1, #16
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fa29 	bl	8002640 <HAL_ETH_ReadPHYRegister>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fc46 	bl	8002a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002208:	2301      	movs	r3, #1
 800220a:	e054      	b.n	80022b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	e002      	b.n	8002226 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	e035      	b.n	80022a4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	e030      	b.n	80022a4 <HAL_ETH_Init+0x31c>
 8002242:	bf00      	nop
 8002244:	03938700 	.word	0x03938700
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	01312cff 	.word	0x01312cff
 8002254:	02160ebf 	.word	0x02160ebf
 8002258:	05f5e0ff 	.word	0x05f5e0ff
 800225c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002270:	4313      	orrs	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	2100      	movs	r1, #0
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa49 	bl	8002710 <HAL_ETH_WritePHYRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002288:	6939      	ldr	r1, [r7, #16]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fbfe 	bl	8002a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00c      	b.n	80022b6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800229c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80022a0:	f7ff f93a 	bl	8001518 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fbf0 	bl	8002a8c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ETH_DMATxDescListInit+0x20>
 80022dc:	2302      	movs	r3, #2
 80022de:	e052      	b.n	8002386 <HAL_ETH_DMATxDescListInit+0xc6>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e030      	b.n	800235e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	015b      	lsls	r3, r3, #5
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4413      	add	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800230c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d208      	bcs.n	8002352 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	015b      	lsls	r3, r3, #5
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	461a      	mov	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e002      	b.n	8002358 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3ca      	bcc.n	80022fc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	3310      	adds	r3, #16
 8002372:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ETH_DMARxDescListInit+0x20>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e056      	b.n	8002460 <HAL_ETH_DMARxDescListInit+0xce>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e034      	b.n	8002438 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3b01      	subs	r3, #1
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d208      	bcs.n	800242c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4413      	add	r3, r2
 8002424:	461a      	mov	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	e002      	b.n	8002432 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3c6      	bcc.n	80023ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244a:	330c      	adds	r3, #12
 800244c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ETH_TransmitFrame+0x24>
 800248c:	2302      	movs	r3, #2
 800248e:	e0cd      	b.n	800262c <HAL_ETH_TransmitFrame+0x1c0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0b8      	b.n	800262c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da09      	bge.n	80024d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2212      	movs	r2, #18
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0a9      	b.n	800262c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024de:	4293      	cmp	r3, r2
 80024e0:	d915      	bls.n	800250e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_ETH_TransmitFrame+0x1cc>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a9b      	lsrs	r3, r3, #10
 80024ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_ETH_TransmitFrame+0x1cc>)
 80024f2:	fba3 1302 	umull	r1, r3, r3, r2
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e001      	b.n	8002512 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800250e:	2301      	movs	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11c      	bne.n	8002552 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002526:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002532:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002542:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002550:	e04b      	b.n	80025ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e044      	b.n	80025e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002566:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002586:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3b01      	subs	r3, #1
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d116      	bne.n	80025c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4a25      	ldr	r2, [pc, #148]	; (800263c <HAL_ETH_TransmitFrame+0x1d0>)
 80025a6:	fb02 f203 	mul.w	r2, r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80025b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80025be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	3301      	adds	r3, #1
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3b6      	bcc.n	8002558 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f2:	3314      	adds	r3, #20
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002606:	3314      	adds	r3, #20
 8002608:	2204      	movs	r2, #4
 800260a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	3304      	adds	r3, #4
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	ac02b00b 	.word	0xac02b00b
 800263c:	fffffa0c 	.word	0xfffffa0c

08002640 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	460b      	mov	r3, r1
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b82      	cmp	r3, #130	; 0x82
 8002660:	d101      	bne.n	8002666 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	e050      	b.n	8002708 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2282      	movs	r2, #130	; 0x82
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 031c 	and.w	r3, r3, #28
 800267c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8a1b      	ldrh	r3, [r3, #16]
 8002682:	02db      	lsls	r3, r3, #11
 8002684:	b29b      	uxth	r3, r3
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f023 0302 	bic.w	r3, r3, #2
 80026a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026b2:	f7fe ff25 	bl	8001500 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026b8:	e015      	b.n	80026e6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026ba:	f7fe ff21 	bl	8001500 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d309      	bcc.n	80026de <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e014      	b.n	8002708 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e4      	bne.n	80026ba <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	460b      	mov	r3, r1
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b42      	cmp	r3, #66	; 0x42
 8002730:	d101      	bne.n	8002736 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e04e      	b.n	80027d4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2242      	movs	r2, #66	; 0x42
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8a1b      	ldrh	r3, [r3, #16]
 8002752:	02db      	lsls	r3, r3, #11
 8002754:	b29b      	uxth	r3, r3
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800275c:	897b      	ldrh	r3, [r7, #10]
 800275e:	019b      	lsls	r3, r3, #6
 8002760:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800278c:	f7fe feb8 	bl	8001500 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002792:	e015      	b.n	80027c0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002794:	f7fe feb4 	bl	8001500 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d309      	bcc.n	80027b8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e00d      	b.n	80027d4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e4      	bne.n	8002794 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ETH_Start+0x16>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e01f      	b.n	8002832 <HAL_ETH_Start+0x56>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fb44 	bl	8002e90 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fb7b 	bl	8002f04 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fc12 	bl	8003038 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fbaf 	bl	8002f78 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fbdc 	bl	8002fd8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_ETH_Stop+0x16>
 800284c:	2302      	movs	r3, #2
 800284e:	e01f      	b.n	8002890 <HAL_ETH_Stop+0x56>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fba1 	bl	8002fa8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fbce 	bl	8003008 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fb66 	bl	8002f3e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fbe0 	bl	8003038 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fb26 	bl	8002eca <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ETH_ConfigMAC+0x1c>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0e4      	b.n	8002a7e <HAL_ETH_ConfigMAC+0x1e6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80b1 	beq.w	8002a2e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <HAL_ETH_ConfigMAC+0x1f0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80028e4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80028ea:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80028f0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80028f6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80028fc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002902:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002908:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800290e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002914:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800291a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002920:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002926:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800293e:	2001      	movs	r0, #1
 8002940:	f7fe fdea 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002954:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800295a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002960:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002966:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800296c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002972:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800297e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002980:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800298a:	2001      	movs	r0, #1
 800298c:	f7fe fdc4 	bl	8001518 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029a0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029aa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029c8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80029ce:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80029d4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80029da:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80029e0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7fe fd8d 	bl	8001518 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7fe fd7a 	bl	8001518 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	61da      	str	r2, [r3, #28]
 8002a2c:	e01e      	b.n	8002a6c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a3c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f7fe fd5a 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	ff20810f 	.word	0xff20810f

08002a8c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0b0      	sub	sp, #192	; 0xc0
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aa8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002aba:	2300      	movs	r3, #0
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad8:	e001      	b.n	8002ade <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002af8:	2340      	movs	r3, #64	; 0x40
 8002afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b64:	4bac      	ldr	r3, [pc, #688]	; (8002e18 <ETH_MACDMAConfig+0x38c>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b70:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b74:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b78:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b7e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002b82:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002b86:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b8c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002b90:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002b94:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002b98:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b9c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ba0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ba2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f7fe fca9 	bl	8001518 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bd4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002bd8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002bde:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002be4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002bea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002bf0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002bf4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002bfc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bfe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7fe fc84 	bl	8001518 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c18:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c22:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c2c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c40:	4013      	ands	r3, r2
 8002c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c4a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c50:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c56:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c5c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c62:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c68:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c7c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f7fe fc45 	bl	8001518 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c96:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002c9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7fe fc30 	bl	8001518 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cca:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002cd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	3318      	adds	r3, #24
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d22:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <ETH_MACDMAConfig+0x390>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d2a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d2e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d30:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d32:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d34:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d36:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d38:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d3a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d3c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d3e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d40:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d42:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d46:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d4a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5e:	3318      	adds	r3, #24
 8002d60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d6e:	3318      	adds	r3, #24
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7fe fbce 	bl	8001518 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d84:	3318      	adds	r3, #24
 8002d86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d8a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d90:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002d94:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d98:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002d9c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002da2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002da6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f7fe fba7 	bl	8001518 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dd6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10f      	bne.n	8002e00 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	331c      	adds	r3, #28
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfc:	331c      	adds	r3, #28
 8002dfe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	461a      	mov	r2, r3
 8002e06:	2100      	movs	r1, #0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f809 	bl	8002e20 <ETH_MACAddressConfig>
}
 8002e0e:	bf00      	nop
 8002e10:	37c0      	adds	r7, #192	; 0xc0
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	ff20810f 	.word	0xff20810f
 8002e1c:	f8de3f23 	.word	0xf8de3f23

08002e20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3305      	adds	r3, #5
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	3204      	adds	r2, #4
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <ETH_MACAddressConfig+0x68>)
 8002e42:	4413      	add	r3, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3303      	adds	r3, #3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	061a      	lsls	r2, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3302      	adds	r3, #2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	4313      	orrs	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <ETH_MACAddressConfig+0x6c>)
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6013      	str	r3, [r2, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40028040 	.word	0x40028040
 8002e8c:	40028044 	.word	0x40028044

08002e90 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f000 f8e9 	bl	800308c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f000 f8cc 	bl	800308c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0204 	orr.w	r2, r2, #4
 8002f1e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f000 f8af 	bl	800308c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0204 	bic.w	r2, r2, #4
 8002f58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 f892 	bl	800308c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f88:	3318      	adds	r3, #24
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	3318      	adds	r3, #24
 8002f9a:	601a      	str	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	3318      	adds	r3, #24
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc8:	3318      	adds	r3, #24
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe8:	3318      	adds	r3, #24
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0202 	orr.w	r2, r2, #2
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003018:	3318      	adds	r3, #24
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0202 	bic.w	r2, r2, #2
 8003024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003028:	3318      	adds	r3, #24
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304c:	3318      	adds	r3, #24
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	3318      	adds	r3, #24
 800305e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003068:	3318      	adds	r3, #24
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800306e:	2001      	movs	r0, #1
 8003070:	f000 f80c 	bl	800308c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307e:	3318      	adds	r3, #24
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <ETH_Delay+0x38>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <ETH_Delay+0x3c>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80030a8:	bf00      	nop
  } 
  while (Delay --);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	60fa      	str	r2, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <ETH_Delay+0x1c>
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000000 	.word	0x20000000
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e16b      	b.n	80033c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 815a 	bne.w	80033ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80b4 	beq.w	80033ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <HAL_GPIO_Init+0x30c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <HAL_GPIO_Init+0x30c>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_GPIO_Init+0x30c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a5b      	ldr	r2, [pc, #364]	; (80033dc <HAL_GPIO_Init+0x310>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_GPIO_Init+0x314>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a51      	ldr	r2, [pc, #324]	; (80033e4 <HAL_GPIO_Init+0x318>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_GPIO_Init+0x31c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	; (80033ec <HAL_GPIO_Init+0x320>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x21a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	; (80033f0 <HAL_GPIO_Init+0x324>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x216>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	; (80033f4 <HAL_GPIO_Init+0x328>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x212>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	; (80033f8 <HAL_GPIO_Init+0x32c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_GPIO_Init+0x330>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x20a>
 80032d2:	2307      	movs	r3, #7
 80032d4:	e00e      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032d6:	2308      	movs	r3, #8
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_GPIO_Init+0x310>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003336:	4a32      	ldr	r2, [pc, #200]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_GPIO_Init+0x334>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003360:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_GPIO_Init+0x334>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_GPIO_Init+0x334>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f ae90 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	041a      	lsls	r2, r3, #16
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43d9      	mvns	r1, r3
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	400b      	ands	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e264      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d075      	beq.n	8003576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348a:	4ba3      	ldr	r3, [pc, #652]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003496:	4ba0      	ldr	r3, [pc, #640]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4b9d      	ldr	r3, [pc, #628]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	4b99      	ldr	r3, [pc, #612]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d05b      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d157      	bne.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e23f      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x74>
 80034d2:	4b91      	ldr	r3, [pc, #580]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a90      	ldr	r2, [pc, #576]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e01d      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x98>
 80034ea:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a87      	ldr	r2, [pc, #540]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a83      	ldr	r2, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b81      	ldr	r3, [pc, #516]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a80      	ldr	r2, [pc, #512]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fd ffec 	bl	8001500 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fd ffe8 	bl	8001500 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e204      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0xc0>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fd ffd8 	bl	8001500 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd ffd4 	bl	8001500 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1f0      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0xe8>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003582:	4b65      	ldr	r3, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1c4      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b56      	ldr	r3, [pc, #344]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4952      	ldr	r1, [pc, #328]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	e03a      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_OscConfig+0x2b0>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd ff8d 	bl	8001500 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7fd ff89 	bl	8001500 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1a5      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4940      	ldr	r1, [pc, #256]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x2b0>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd ff6c 	bl	8001500 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7fd ff68 	bl	8001500 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e184      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d030      	beq.n	80036b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_OscConfig+0x2b4>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd ff4c 	bl	8001500 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366c:	f7fd ff48 	bl	8001500 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e164      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x200>
 800368a:	e015      	b.n	80036b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x2b4>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fd ff35 	bl	8001500 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369a:	f7fd ff31 	bl	8001500 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e14d      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a0 	beq.w	8003806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fd fef7 	bl	8001500 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	e011      	b.n	800373a <HAL_RCC_OscConfig+0x2ce>
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	42470000 	.word	0x42470000
 8003720:	42470e80 	.word	0x42470e80
 8003724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fd feea 	bl	8001500 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e106      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCC_OscConfig+0x4e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x2f0>
 800374e:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x32a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x312>
 8003764:	4b7b      	ldr	r3, [pc, #492]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a7a      	ldr	r2, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b78      	ldr	r3, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x32a>
 800377e:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a74      	ldr	r2, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a71      	ldr	r2, [pc, #452]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd feaf 	bl	8001500 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd feab 	bl	8001500 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0c5      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x33a>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fe99 	bl	8001500 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fe95 	bl	8001500 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0af      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a55      	ldr	r2, [pc, #340]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 809b 	beq.w	8003946 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d05c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d141      	bne.n	80038a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd fe69 	bl	8001500 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003832:	f7fd fe65 	bl	8001500 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e081      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	019b      	lsls	r3, r3, #6
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	3b01      	subs	r3, #1
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	4937      	ldr	r1, [pc, #220]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fd fe3e 	bl	8001500 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fe3a 	bl	8001500 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e056      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x41c>
 80038a6:	e04e      	b.n	8003946 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fd fe27 	bl	8001500 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd fe23 	bl	8001500 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e03f      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x44a>
 80038d4:	e037      	b.n	8003946 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e032      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d028      	beq.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d11a      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003918:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40007000 	.word	0x40007000
 8003954:	40023800 	.word	0x40023800
 8003958:	42470060 	.word	0x42470060

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0cc      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90c      	bls.n	8003998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d044      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4934      	ldr	r1, [pc, #208]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fd58 	bl	8001500 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fd54 	bl	8001500 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20c      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fcb8 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08013d6c 	.word	0x08013d6c
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b40:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d00d      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	f200 80bd 	bhi.w	8003ccc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5a:	e0b7      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b5e:	60bb      	str	r3, [r7, #8]
       break;
 8003b60:	e0b7      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b64:	60bb      	str	r3, [r7, #8]
      break;
 8003b66:	e0b4      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04d      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	461a      	mov	r2, r3
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	ea02 0800 	and.w	r8, r2, r0
 8003b96:	ea03 0901 	and.w	r9, r3, r1
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	014b      	lsls	r3, r1, #5
 8003ba8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bac:	0142      	lsls	r2, r0, #5
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	ebb0 0008 	subs.w	r0, r0, r8
 8003bb6:	eb61 0109 	sbc.w	r1, r1, r9
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	018b      	lsls	r3, r1, #6
 8003bc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bc8:	0182      	lsls	r2, r0, #6
 8003bca:	1a12      	subs	r2, r2, r0
 8003bcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	00d9      	lsls	r1, r3, #3
 8003bda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bde:	00d0      	lsls	r0, r2, #3
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	eb12 0208 	adds.w	r2, r2, r8
 8003be8:	eb43 0309 	adc.w	r3, r3, r9
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0259      	lsls	r1, r3, #9
 8003bf6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bfa:	0250      	lsls	r0, r2, #9
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	f7fc fb30 	bl	8000270 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e04a      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	ea02 0400 	and.w	r4, r2, r0
 8003c32:	ea03 0501 	and.w	r5, r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	014b      	lsls	r3, r1, #5
 8003c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c48:	0142      	lsls	r2, r0, #5
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	1b00      	subs	r0, r0, r4
 8003c50:	eb61 0105 	sbc.w	r1, r1, r5
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	018b      	lsls	r3, r1, #6
 8003c5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c62:	0182      	lsls	r2, r0, #6
 8003c64:	1a12      	subs	r2, r2, r0
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	00d9      	lsls	r1, r3, #3
 8003c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c78:	00d0      	lsls	r0, r2, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	1912      	adds	r2, r2, r4
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	f04f 0000 	mov.w	r0, #0
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	0299      	lsls	r1, r3, #10
 8003c8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c92:	0290      	lsls	r0, r2, #10
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f7fc fae4 	bl	8000270 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	60bb      	str	r3, [r7, #8]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cce:	60bb      	str	r3, [r7, #8]
      break;
 8003cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4903      	ldr	r1, [pc, #12]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	08013d7c 	.word	0x08013d7c

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d30:	f7ff ffdc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0b5b      	lsrs	r3, r3, #13
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08013d7c 	.word	0x08013d7c

08003d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07b      	b.n	8003e5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d76:	d009      	beq.n	8003d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f8a2 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0104 	and.w	r1, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0210 	and.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b08c      	sub	sp, #48	; 0x30
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e74:	2301      	movs	r3, #1
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x26>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e18a      	b.n	80041a2 <HAL_SPI_TransmitReceive+0x33c>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e94:	f7fd fb34 	bl	8001500 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00f      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x70>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ebc:	d107      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x68>
 8003ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed4:	e15b      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x82>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x82>
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eee:	e14e      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d003      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2205      	movs	r2, #5
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	887a      	ldrh	r2, [r7, #2]
 8003f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d007      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	d178      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_SPI_TransmitReceive+0x10a>
 8003f6a:	8b7b      	ldrh	r3, [r7, #26]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d166      	bne.n	800403e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f94:	e053      	b.n	800403e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d11b      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x176>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x176>
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d113      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	881a      	ldrh	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d119      	bne.n	800401e <HAL_SPI_TransmitReceive+0x1b8>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d014      	beq.n	800401e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	b292      	uxth	r2, r2
 8004000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	1c9a      	adds	r2, r3, #2
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800401e:	f7fd fa6f 	bl	8001500 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402a:	429a      	cmp	r2, r3
 800402c:	d807      	bhi.n	800403e <HAL_SPI_TransmitReceive+0x1d8>
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d003      	beq.n	800403e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800403c:	e0a7      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1a6      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x130>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1a1      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x130>
 8004052:	e07c      	b.n	800414e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_TransmitReceive+0x1fc>
 800405c:	8b7b      	ldrh	r3, [r7, #26]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d16b      	bne.n	800413a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004088:	e057      	b.n	800413a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11c      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x26c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d017      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x26c>
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d114      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d119      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x2ae>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004110:	2301      	movs	r3, #1
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004114:	f7fd f9f4 	bl	8001500 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004120:	429a      	cmp	r2, r3
 8004122:	d803      	bhi.n	800412c <HAL_SPI_TransmitReceive+0x2c6>
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d102      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x2cc>
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004138:	e029      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1a2      	bne.n	800408a <HAL_SPI_TransmitReceive+0x224>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d19d      	bne.n	800408a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f8c0 	bl	80042d8 <SPI_EndRxTxTransaction>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800416a:	e010      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	e000      	b.n	800418e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800418c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800419e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3730      	adds	r7, #48	; 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b8:	b2db      	uxtb	r3, r3
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041d8:	f7fd f992 	bl	8001500 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041e8:	f7fd f98a 	bl	8001500 <HAL_GetTick>
 80041ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	015b      	lsls	r3, r3, #5
 80041f4:	0d1b      	lsrs	r3, r3, #20
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fe:	e054      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d050      	beq.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004208:	f7fd f97a 	bl	8001500 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	429a      	cmp	r2, r3
 8004216:	d902      	bls.n	800421e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d13d      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800422c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004236:	d111      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004240:	d004      	beq.n	800424c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d107      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d10f      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e017      	b.n	80042ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d19b      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000

080042d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <SPI_EndRxTxTransaction+0x7c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <SPI_EndRxTxTransaction+0x80>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0d5b      	lsrs	r3, r3, #21
 80042f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d112      	bne.n	800432a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff5a 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d0f2      	beq.n	800432a <SPI_EndRxTxTransaction+0x52>
 8004344:	e000      	b.n	8004348 <SPI_EndRxTxTransaction+0x70>
        break;
 8004346:	bf00      	nop
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000
 8004358:	165e9f81 	.word	0x165e9f81

0800435c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e041      	b.n	80043f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fe32 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 fad8 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e041      	b.n	8004490 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f839 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 fa89 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start+0x24>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e022      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d109      	bne.n	80044ea <HAL_TIM_PWM_Start+0x3e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e015      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x58>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e008      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07c      	b.n	8004618 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0x82>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800452c:	e013      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0x92>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453c:	e00b      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800454c:	e003      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fce0 	bl	8004f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <HAL_TIM_PWM_Start+0x174>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_TIM_PWM_Start+0xcc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <HAL_TIM_PWM_Start+0x178>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_TIM_PWM_Start+0xd0>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_TIM_PWM_Start+0xd2>
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_TIM_PWM_Start+0x174>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d01d      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1f      	ldr	r2, [pc, #124]	; (8004628 <HAL_TIM_PWM_Start+0x17c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_TIM_PWM_Start+0x180>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIM_PWM_Start+0x184>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a16      	ldr	r2, [pc, #88]	; (8004624 <HAL_TIM_PWM_Start+0x178>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <HAL_TIM_PWM_Start+0x188>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x136>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIM_PWM_Start+0x18c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d111      	bne.n	8004606 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d010      	beq.n	8004616 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	e007      	b.n	8004616 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40010000 	.word	0x40010000
 8004624:	40010400 	.word	0x40010400
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40014000 	.word	0x40014000
 8004638:	40001800 	.word	0x40001800

0800463c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0ae      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	f200 809f 	bhi.w	80047a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080047a9 	.word	0x080047a9
 8004678:	080047a9 	.word	0x080047a9
 800467c:	080047a9 	.word	0x080047a9
 8004680:	080046e5 	.word	0x080046e5
 8004684:	080047a9 	.word	0x080047a9
 8004688:	080047a9 	.word	0x080047a9
 800468c:	080047a9 	.word	0x080047a9
 8004690:	08004727 	.word	0x08004727
 8004694:	080047a9 	.word	0x080047a9
 8004698:	080047a9 	.word	0x080047a9
 800469c:	080047a9 	.word	0x080047a9
 80046a0:	08004767 	.word	0x08004767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f9f0 	bl	8004a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	619a      	str	r2, [r3, #24]
      break;
 80046e2:	e064      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fa40 	bl	8004b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]
      break;
 8004724:	e043      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa95 	bl	8004c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0208 	orr.w	r2, r2, #8
 8004740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0204 	bic.w	r2, r2, #4
 8004750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
      break;
 8004764:	e023      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fae9 	bl	8004d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	021a      	lsls	r2, r3, #8
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	61da      	str	r2, [r3, #28]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75fb      	strb	r3, [r7, #23]
      break;
 80047ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_ConfigClockSource+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b4      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x186>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d03e      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0xd4>
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	f200 8087 	bhi.w	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	f000 8086 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x172>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d87f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b70      	cmp	r3, #112	; 0x70
 800482e:	d01a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0xa6>
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d87b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b60      	cmp	r3, #96	; 0x60
 8004836:	d050      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x11a>
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d877      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d03c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xfa>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d873      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d058      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x13a>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d86f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d064      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d86b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d060      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d867      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05c      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b10      	cmp	r3, #16
 8004862:	d05a      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	e062      	b.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f000 fb35 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	609a      	str	r2, [r3, #8]
      break;
 8004892:	e04f      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6899      	ldr	r1, [r3, #8]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f000 fb1e 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b6:	609a      	str	r2, [r3, #8]
      break;
 80048b8:	e03c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 fa92 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2150      	movs	r1, #80	; 0x50
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 faeb 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80048d8:	e02c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 fab1 	bl	8004e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2160      	movs	r1, #96	; 0x60
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fadb 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80048f8:	e01c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 fa72 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	4618      	mov	r0, r3
 8004914:	f000 facb 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004918:	e00c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 fac2 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 800492a:	e003      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      break;
 8004930:	e000      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3d      	ldr	r2, [pc, #244]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3a      	ldr	r2, [pc, #232]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d027      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d023      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d017      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <TIM_Base_SetConfig+0x128>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <TIM_Base_SetConfig+0x12c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <TIM_Base_SetConfig+0x130>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <TIM_Base_SetConfig+0x134>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a24      	ldr	r2, [pc, #144]	; (8004a88 <TIM_Base_SetConfig+0x138>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <TIM_Base_SetConfig+0x13c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800
 8004a84:	40001800 	.word	0x40001800
 8004a88:	40001c00 	.word	0x40001c00
 8004a8c:	40002000 	.word	0x40002000

08004a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 0302 	bic.w	r3, r3, #2
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <TIM_OC1_SetConfig+0xd8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC1_SetConfig+0x64>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <TIM_OC1_SetConfig+0xdc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0308 	bic.w	r3, r3, #8
 8004afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <TIM_OC1_SetConfig+0xd8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_OC1_SetConfig+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <TIM_OC1_SetConfig+0xdc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400

08004b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0210 	bic.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0320 	bic.w	r3, r3, #32
 8004bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <TIM_OC2_SetConfig+0xe4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC2_SetConfig+0x68>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <TIM_OC2_SetConfig+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10d      	bne.n	8004bf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC2_SetConfig+0xe4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC2_SetConfig+0x94>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <TIM_OC2_SetConfig+0xe8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d113      	bne.n	8004c2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40010400 	.word	0x40010400

08004c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <TIM_OC3_SetConfig+0xe0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_OC3_SetConfig+0x66>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <TIM_OC3_SetConfig+0xe4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10d      	bne.n	8004cde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <TIM_OC3_SetConfig+0xe0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_OC3_SetConfig+0x92>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <TIM_OC3_SetConfig+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d113      	bne.n	8004d16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40010400 	.word	0x40010400

08004d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <TIM_OC4_SetConfig+0xa4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC4_SetConfig+0x68>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a11      	ldr	r2, [pc, #68]	; (8004dec <TIM_OC4_SetConfig+0xa8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d109      	bne.n	8004dc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	019b      	lsls	r3, r3, #6
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40010400 	.word	0x40010400

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2201      	movs	r2, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	401a      	ands	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e05a      	b.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d01d      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10c      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4313      	orrs	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40001800 	.word	0x40001800

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e03f      	b.n	80050fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc f808 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 ff5b 	bl	8005f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b08a      	sub	sp, #40	; 0x28
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b20      	cmp	r3, #32
 8005120:	d17c      	bne.n	800521c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Transmit+0x2c>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e075      	b.n	800521e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_UART_Transmit+0x3e>
 800513c:	2302      	movs	r3, #2
 800513e:	e06e      	b.n	800521e <HAL_UART_Transmit+0x11c>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2221      	movs	r2, #33	; 0x21
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005156:	f7fc f9d3 	bl	8001500 <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d108      	bne.n	8005184 <HAL_UART_Transmit+0x82>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e003      	b.n	800518c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005194:	e02a      	b.n	80051ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fc17 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e036      	b.n	800521e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	3302      	adds	r3, #2
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e007      	b.n	80051de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3301      	adds	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1cf      	bne.n	8005196 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2140      	movs	r1, #64	; 0x40
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fbe7 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b20      	cmp	r3, #32
 800523e:	d11d      	bne.n	800527c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Receive_DMA+0x26>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e016      	b.n	800527e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_UART_Receive_DMA+0x38>
 800525a:	2302      	movs	r3, #2
 800525c:	e00f      	b.n	800527e <HAL_UART_Receive_DMA+0x58>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	461a      	mov	r2, r3
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fc1c 	bl	8005ab0 <UART_Start_Receive_DMA>
 8005278:	4603      	mov	r3, r0
 800527a:	e000      	b.n	800527e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b0ba      	sub	sp, #232	; 0xe8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_UART_IRQHandler+0x66>
 80052da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fd83 	bl	8005df2 <UART_Receive_IT>
      return;
 80052ec:	e256      	b.n	800579c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80de 	beq.w	80054b4 <HAL_UART_IRQHandler+0x22c>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005308:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80d1 	beq.w	80054b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xae>
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <HAL_UART_IRQHandler+0xd2>
 8005342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f043 0202 	orr.w	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_UART_IRQHandler+0xf6>
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <HAL_UART_IRQHandler+0x126>
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0208 	orr.w	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 81ed 	beq.w	8005792 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_UART_IRQHandler+0x14e>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fd0e 	bl	8005df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_UART_IRQHandler+0x17a>
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04f      	beq.n	80054a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fc16 	bl	8005c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d141      	bne.n	800549a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3314      	adds	r3, #20
 800541c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800542c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800544e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800545a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1d9      	bne.n	8005416 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	2b00      	cmp	r3, #0
 8005468:	d013      	beq.n	8005492 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	4a7d      	ldr	r2, [pc, #500]	; (8005664 <HAL_UART_IRQHandler+0x3dc>)
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc fafa 	bl	8001a70 <HAL_DMA_Abort_IT>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800548c:	4610      	mov	r0, r2
 800548e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	e00e      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f990 	bl	80057b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e00a      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f98c 	bl	80057b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e006      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f988 	bl	80057b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054ae:	e170      	b.n	8005792 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	bf00      	nop
    return;
 80054b2:	e16e      	b.n	8005792 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 814a 	bne.w	8005752 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8143 	beq.w	8005752 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 813c 	beq.w	8005752 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	f040 80b4 	bne.w	8005668 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800550c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8140 	beq.w	8005796 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800551a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800551e:	429a      	cmp	r2, r3
 8005520:	f080 8139 	bcs.w	8005796 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800552a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005536:	f000 8088 	beq.w	800564a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800556a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005572:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800557e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1d9      	bne.n	800553a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3314      	adds	r3, #20
 80055a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e1      	bne.n	8005586 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e3      	bne.n	80055c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800562c:	65ba      	str	r2, [r7, #88]	; 0x58
 800562e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e3      	bne.n	8005608 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	4618      	mov	r0, r3
 8005646:	f7fc f9a3 	bl	8001990 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005652:	b29b      	uxth	r3, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8b6 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005660:	e099      	b.n	8005796 <HAL_UART_IRQHandler+0x50e>
 8005662:	bf00      	nop
 8005664:	08005cfb 	.word	0x08005cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005670:	b29b      	uxth	r3, r3
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 808b 	beq.w	800579a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8086 	beq.w	800579a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056b2:	647a      	str	r2, [r7, #68]	; 0x44
 80056b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e3      	bne.n	800568e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	623b      	str	r3, [r7, #32]
   return(result);
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056ea:	633a      	str	r2, [r7, #48]	; 0x30
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e3      	bne.n	80056c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	60fb      	str	r3, [r7, #12]
   return(result);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005730:	61fa      	str	r2, [r7, #28]
 8005732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	617b      	str	r3, [r7, #20]
   return(result);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e3      	bne.n	800570c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f83e 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005750:	e023      	b.n	800579a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_UART_IRQHandler+0x4ea>
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fad9 	bl	8005d22 <UART_Transmit_IT>
    return;
 8005770:	e014      	b.n	800579c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <HAL_UART_IRQHandler+0x514>
 800577e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb19 	bl	8005dc2 <UART_EndTransmit_IT>
    return;
 8005790:	e004      	b.n	800579c <HAL_UART_IRQHandler+0x514>
    return;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_UART_IRQHandler+0x514>
      return;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_UART_IRQHandler+0x514>
      return;
 800579a:	bf00      	nop
  }
}
 800579c:	37e8      	adds	r7, #232	; 0xe8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop

080057a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b09c      	sub	sp, #112	; 0x70
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d172      	bne.n	80058e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	2200      	movs	r2, #0
 8005804:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	66bb      	str	r3, [r7, #104]	; 0x68
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005826:	65ba      	str	r2, [r7, #88]	; 0x58
 8005828:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800582c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	667b      	str	r3, [r7, #100]	; 0x64
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800585a:	647a      	str	r2, [r7, #68]	; 0x44
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	623b      	str	r3, [r7, #32]
   return(result);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005884:	663b      	str	r3, [r7, #96]	; 0x60
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3314      	adds	r3, #20
 800588c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800588e:	633a      	str	r2, [r7, #48]	; 0x30
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e5      	bne.n	800586e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d119      	bne.n	80058e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0310 	bic.w	r3, r3, #16
 80058c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058d2:	61fa      	str	r2, [r7, #28]
 80058d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	617b      	str	r3, [r7, #20]
   return(result);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d106      	bne.n	80058fc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058f2:	4619      	mov	r1, r3
 80058f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058f6:	f7ff ff69 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058fa:	e002      	b.n	8005902 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80058fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058fe:	f7fa fe41 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 8005902:	bf00      	nop
 8005904:	3770      	adds	r7, #112	; 0x70
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	2b01      	cmp	r3, #1
 800591e:	d108      	bne.n	8005932 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	b29b      	uxth	r3, r3
 8005928:	4619      	mov	r1, r3
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff ff4e 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005930:	e002      	b.n	8005938 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fa fe18 	bl	8000568 <HAL_UART_RxHalfCpltCallback>
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b21      	cmp	r3, #33	; 0x21
 8005972:	d108      	bne.n	8005986 <UART_DMAError+0x46>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2200      	movs	r2, #0
 800597e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005980:	68b8      	ldr	r0, [r7, #8]
 8005982:	f000 f92f 	bl	8005be4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b22      	cmp	r3, #34	; 0x22
 80059a6:	d108      	bne.n	80059ba <UART_DMAError+0x7a>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f000 f93d 	bl	8005c34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0210 	orr.w	r2, r3, #16
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c6:	68b8      	ldr	r0, [r7, #8]
 80059c8:	f7ff fef6 	bl	80057b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b090      	sub	sp, #64	; 0x40
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e4:	e050      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d04c      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80059f4:	f7fb fd84 	bl	8001500 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d241      	bcs.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a24:	637a      	str	r2, [r7, #52]	; 0x34
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a58:	623a      	str	r2, [r7, #32]
 8005a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d09f      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3740      	adds	r7, #64	; 0x40
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b098      	sub	sp, #96	; 0x60
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2222      	movs	r2, #34	; 0x22
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	4a3e      	ldr	r2, [pc, #248]	; (8005bd8 <UART_Start_Receive_DMA+0x128>)
 8005ade:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	4a3d      	ldr	r2, [pc, #244]	; (8005bdc <UART_Start_Receive_DMA+0x12c>)
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <UART_Start_Receive_DMA+0x130>)
 8005aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	2200      	movs	r2, #0
 8005af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005af8:	f107 0308 	add.w	r3, r7, #8
 8005afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	f7fb fee6 	bl	80018e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b52:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3314      	adds	r3, #20
 8005b84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b86:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bba:	627a      	str	r2, [r7, #36]	; 0x24
 8005bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6a39      	ldr	r1, [r7, #32]
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3760      	adds	r7, #96	; 0x60
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	080057e5 	.word	0x080057e5
 8005bdc:	0800590b 	.word	0x0800590b
 8005be0:	08005941 	.word	0x08005941

08005be4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	; 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	61ba      	str	r2, [r7, #24]
 8005c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c28:	bf00      	nop
 8005c2a:	3724      	adds	r7, #36	; 0x24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b095      	sub	sp, #84	; 0x54
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d119      	bne.n	8005ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ccc:	61ba      	str	r2, [r7, #24]
 8005cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cee:	bf00      	nop
 8005cf0:	3754      	adds	r7, #84	; 0x54
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fd4f 	bl	80057b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b21      	cmp	r3, #33	; 0x21
 8005d34:	d13e      	bne.n	8005db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d114      	bne.n	8005d6a <UART_Transmit_IT+0x48>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d110      	bne.n	8005d6a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]
 8005d68:	e008      	b.n	8005d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6211      	str	r1, [r2, #32]
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fcde 	bl	80057a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b08c      	sub	sp, #48	; 0x30
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b22      	cmp	r3, #34	; 0x22
 8005e04:	f040 80ab 	bne.w	8005f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d117      	bne.n	8005e42 <UART_Receive_IT+0x50>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d113      	bne.n	8005e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e40:	e026      	b.n	8005e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d007      	beq.n	8005e66 <UART_Receive_IT+0x74>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <UART_Receive_IT+0x82>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e008      	b.n	8005e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d15a      	bne.n	8005f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0220 	bic.w	r2, r2, #32
 8005eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d135      	bne.n	8005f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 0310 	bic.w	r3, r3, #16
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0a:	623a      	str	r2, [r7, #32]
 8005f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	69f9      	ldr	r1, [r7, #28]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d10a      	bne.n	8005f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff fc3f 	bl	80057cc <HAL_UARTEx_RxEventCallback>
 8005f4e:	e002      	b.n	8005f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fa fb17 	bl	8000584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e002      	b.n	8005f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3730      	adds	r7, #48	; 0x30
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b09f      	sub	sp, #124	; 0x7c
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	68d9      	ldr	r1, [r3, #12]
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	ea40 0301 	orr.w	r3, r0, r1
 8005f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fac:	f021 010c 	bic.w	r1, r1, #12
 8005fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc6:	6999      	ldr	r1, [r3, #24]
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	ea40 0301 	orr.w	r3, r0, r1
 8005fd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4bc5      	ldr	r3, [pc, #788]	; (80062ec <UART_SetConfig+0x384>)
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d004      	beq.n	8005fe6 <UART_SetConfig+0x7e>
 8005fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4bc3      	ldr	r3, [pc, #780]	; (80062f0 <UART_SetConfig+0x388>)
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d103      	bne.n	8005fee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fe6:	f7fd fea1 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8005fea:	6778      	str	r0, [r7, #116]	; 0x74
 8005fec:	e002      	b.n	8005ff4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fee:	f7fd fe89 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8005ff2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	f040 80b6 	bne.w	800616c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006002:	461c      	mov	r4, r3
 8006004:	f04f 0500 	mov.w	r5, #0
 8006008:	4622      	mov	r2, r4
 800600a:	462b      	mov	r3, r5
 800600c:	1891      	adds	r1, r2, r2
 800600e:	6439      	str	r1, [r7, #64]	; 0x40
 8006010:	415b      	adcs	r3, r3
 8006012:	647b      	str	r3, [r7, #68]	; 0x44
 8006014:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006018:	1912      	adds	r2, r2, r4
 800601a:	eb45 0303 	adc.w	r3, r5, r3
 800601e:	f04f 0000 	mov.w	r0, #0
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	00d9      	lsls	r1, r3, #3
 8006028:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800602c:	00d0      	lsls	r0, r2, #3
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	1911      	adds	r1, r2, r4
 8006034:	6639      	str	r1, [r7, #96]	; 0x60
 8006036:	416b      	adcs	r3, r5
 8006038:	667b      	str	r3, [r7, #100]	; 0x64
 800603a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	1891      	adds	r1, r2, r2
 8006046:	63b9      	str	r1, [r7, #56]	; 0x38
 8006048:	415b      	adcs	r3, r3
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800604c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006050:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006054:	f7fa f90c 	bl	8000270 <__aeabi_uldivmod>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4ba5      	ldr	r3, [pc, #660]	; (80062f4 <UART_SetConfig+0x38c>)
 800605e:	fba3 2302 	umull	r2, r3, r3, r2
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	011e      	lsls	r6, r3, #4
 8006066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006068:	461c      	mov	r4, r3
 800606a:	f04f 0500 	mov.w	r5, #0
 800606e:	4622      	mov	r2, r4
 8006070:	462b      	mov	r3, r5
 8006072:	1891      	adds	r1, r2, r2
 8006074:	6339      	str	r1, [r7, #48]	; 0x30
 8006076:	415b      	adcs	r3, r3
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
 800607a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800607e:	1912      	adds	r2, r2, r4
 8006080:	eb45 0303 	adc.w	r3, r5, r3
 8006084:	f04f 0000 	mov.w	r0, #0
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	00d9      	lsls	r1, r3, #3
 800608e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006092:	00d0      	lsls	r0, r2, #3
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	1911      	adds	r1, r2, r4
 800609a:	65b9      	str	r1, [r7, #88]	; 0x58
 800609c:	416b      	adcs	r3, r5
 800609e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	1891      	adds	r1, r2, r2
 80060ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80060ae:	415b      	adcs	r3, r3
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80060ba:	f7fa f8d9 	bl	8000270 <__aeabi_uldivmod>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4b8c      	ldr	r3, [pc, #560]	; (80062f4 <UART_SetConfig+0x38c>)
 80060c4:	fba3 1302 	umull	r1, r3, r3, r2
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	2164      	movs	r1, #100	; 0x64
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	3332      	adds	r3, #50	; 0x32
 80060d6:	4a87      	ldr	r2, [pc, #540]	; (80062f4 <UART_SetConfig+0x38c>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060e4:	441e      	add	r6, r3
 80060e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e8:	4618      	mov	r0, r3
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	1894      	adds	r4, r2, r2
 80060f4:	623c      	str	r4, [r7, #32]
 80060f6:	415b      	adcs	r3, r3
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060fe:	1812      	adds	r2, r2, r0
 8006100:	eb41 0303 	adc.w	r3, r1, r3
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	f04f 0500 	mov.w	r5, #0
 800610c:	00dd      	lsls	r5, r3, #3
 800610e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006112:	00d4      	lsls	r4, r2, #3
 8006114:	4622      	mov	r2, r4
 8006116:	462b      	mov	r3, r5
 8006118:	1814      	adds	r4, r2, r0
 800611a:	653c      	str	r4, [r7, #80]	; 0x50
 800611c:	414b      	adcs	r3, r1
 800611e:	657b      	str	r3, [r7, #84]	; 0x54
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	461a      	mov	r2, r3
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	1891      	adds	r1, r2, r2
 800612c:	61b9      	str	r1, [r7, #24]
 800612e:	415b      	adcs	r3, r3
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006136:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800613a:	f7fa f899 	bl	8000270 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4b6c      	ldr	r3, [pc, #432]	; (80062f4 <UART_SetConfig+0x38c>)
 8006144:	fba3 1302 	umull	r1, r3, r3, r2
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	2164      	movs	r1, #100	; 0x64
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	3332      	adds	r3, #50	; 0x32
 8006156:	4a67      	ldr	r2, [pc, #412]	; (80062f4 <UART_SetConfig+0x38c>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f003 0207 	and.w	r2, r3, #7
 8006162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4432      	add	r2, r6
 8006168:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800616a:	e0b9      	b.n	80062e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800616c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616e:	461c      	mov	r4, r3
 8006170:	f04f 0500 	mov.w	r5, #0
 8006174:	4622      	mov	r2, r4
 8006176:	462b      	mov	r3, r5
 8006178:	1891      	adds	r1, r2, r2
 800617a:	6139      	str	r1, [r7, #16]
 800617c:	415b      	adcs	r3, r3
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006184:	1912      	adds	r2, r2, r4
 8006186:	eb45 0303 	adc.w	r3, r5, r3
 800618a:	f04f 0000 	mov.w	r0, #0
 800618e:	f04f 0100 	mov.w	r1, #0
 8006192:	00d9      	lsls	r1, r3, #3
 8006194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006198:	00d0      	lsls	r0, r2, #3
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	eb12 0804 	adds.w	r8, r2, r4
 80061a2:	eb43 0905 	adc.w	r9, r3, r5
 80061a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	008b      	lsls	r3, r1, #2
 80061ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061be:	0082      	lsls	r2, r0, #2
 80061c0:	4640      	mov	r0, r8
 80061c2:	4649      	mov	r1, r9
 80061c4:	f7fa f854 	bl	8000270 <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4b49      	ldr	r3, [pc, #292]	; (80062f4 <UART_SetConfig+0x38c>)
 80061ce:	fba3 2302 	umull	r2, r3, r3, r2
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	011e      	lsls	r6, r3, #4
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	4618      	mov	r0, r3
 80061da:	f04f 0100 	mov.w	r1, #0
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	1894      	adds	r4, r2, r2
 80061e4:	60bc      	str	r4, [r7, #8]
 80061e6:	415b      	adcs	r3, r3
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ee:	1812      	adds	r2, r2, r0
 80061f0:	eb41 0303 	adc.w	r3, r1, r3
 80061f4:	f04f 0400 	mov.w	r4, #0
 80061f8:	f04f 0500 	mov.w	r5, #0
 80061fc:	00dd      	lsls	r5, r3, #3
 80061fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006202:	00d4      	lsls	r4, r2, #3
 8006204:	4622      	mov	r2, r4
 8006206:	462b      	mov	r3, r5
 8006208:	1814      	adds	r4, r2, r0
 800620a:	64bc      	str	r4, [r7, #72]	; 0x48
 800620c:	414b      	adcs	r3, r1
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	f04f 0100 	mov.w	r1, #0
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006228:	0082      	lsls	r2, r0, #2
 800622a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800622e:	f7fa f81f 	bl	8000270 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b2f      	ldr	r3, [pc, #188]	; (80062f4 <UART_SetConfig+0x38c>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a2a      	ldr	r2, [pc, #168]	; (80062f4 <UART_SetConfig+0x38c>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006256:	441e      	add	r6, r3
 8006258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625a:	4618      	mov	r0, r3
 800625c:	f04f 0100 	mov.w	r1, #0
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	1894      	adds	r4, r2, r2
 8006266:	603c      	str	r4, [r7, #0]
 8006268:	415b      	adcs	r3, r3
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006270:	1812      	adds	r2, r2, r0
 8006272:	eb41 0303 	adc.w	r3, r1, r3
 8006276:	f04f 0400 	mov.w	r4, #0
 800627a:	f04f 0500 	mov.w	r5, #0
 800627e:	00dd      	lsls	r5, r3, #3
 8006280:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006284:	00d4      	lsls	r4, r2, #3
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	eb12 0a00 	adds.w	sl, r2, r0
 800628e:	eb43 0b01 	adc.w	fp, r3, r1
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4618      	mov	r0, r3
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	008b      	lsls	r3, r1, #2
 80062a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062aa:	0082      	lsls	r2, r0, #2
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7f9 ffde 	bl	8000270 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <UART_SetConfig+0x38c>)
 80062ba:	fba3 1302 	umull	r1, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2164      	movs	r1, #100	; 0x64
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	3332      	adds	r3, #50	; 0x32
 80062cc:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <UART_SetConfig+0x38c>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4432      	add	r2, r6
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	bf00      	nop
 80062e2:	377c      	adds	r7, #124	; 0x7c
 80062e4:	46bd      	mov	sp, r7
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	bf00      	nop
 80062ec:	40011000 	.word	0x40011000
 80062f0:	40011400 	.word	0x40011400
 80062f4:	51eb851f 	.word	0x51eb851f

080062f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80062fe:	4b8d      	ldr	r3, [pc, #564]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006300:	22c0      	movs	r2, #192	; 0xc0
 8006302:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006304:	4b8b      	ldr	r3, [pc, #556]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006306:	22a8      	movs	r2, #168	; 0xa8
 8006308:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 107;
 800630a:	4b8a      	ldr	r3, [pc, #552]	; (8006534 <MX_LWIP_Init+0x23c>)
 800630c:	226b      	movs	r2, #107	; 0x6b
 800630e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8006310:	4b88      	ldr	r3, [pc, #544]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006312:	226f      	movs	r2, #111	; 0x6f
 8006314:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006316:	4b88      	ldr	r3, [pc, #544]	; (8006538 <MX_LWIP_Init+0x240>)
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800631c:	4b86      	ldr	r3, [pc, #536]	; (8006538 <MX_LWIP_Init+0x240>)
 800631e:	22ff      	movs	r2, #255	; 0xff
 8006320:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006322:	4b85      	ldr	r3, [pc, #532]	; (8006538 <MX_LWIP_Init+0x240>)
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006328:	4b83      	ldr	r3, [pc, #524]	; (8006538 <MX_LWIP_Init+0x240>)
 800632a:	2200      	movs	r2, #0
 800632c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800632e:	4b83      	ldr	r3, [pc, #524]	; (800653c <MX_LWIP_Init+0x244>)
 8006330:	22c0      	movs	r2, #192	; 0xc0
 8006332:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006334:	4b81      	ldr	r3, [pc, #516]	; (800653c <MX_LWIP_Init+0x244>)
 8006336:	22a8      	movs	r2, #168	; 0xa8
 8006338:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 107;
 800633a:	4b80      	ldr	r3, [pc, #512]	; (800653c <MX_LWIP_Init+0x244>)
 800633c:	226b      	movs	r2, #107	; 0x6b
 800633e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <MX_LWIP_Init+0x244>)
 8006342:	2201      	movs	r2, #1
 8006344:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006346:	f000 fbe5 	bl	8006b14 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800634a:	4b7a      	ldr	r3, [pc, #488]	; (8006534 <MX_LWIP_Init+0x23c>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	061a      	lsls	r2, r3, #24
 8006350:	4b78      	ldr	r3, [pc, #480]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	431a      	orrs	r2, r3
 8006358:	4b76      	ldr	r3, [pc, #472]	; (8006534 <MX_LWIP_Init+0x23c>)
 800635a:	789b      	ldrb	r3, [r3, #2]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	4313      	orrs	r3, r2
 8006360:	4a74      	ldr	r2, [pc, #464]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006362:	78d2      	ldrb	r2, [r2, #3]
 8006364:	4313      	orrs	r3, r2
 8006366:	061a      	lsls	r2, r3, #24
 8006368:	4b72      	ldr	r3, [pc, #456]	; (8006534 <MX_LWIP_Init+0x23c>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	0619      	lsls	r1, r3, #24
 800636e:	4b71      	ldr	r3, [pc, #452]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	4319      	orrs	r1, r3
 8006376:	4b6f      	ldr	r3, [pc, #444]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	430b      	orrs	r3, r1
 800637e:	496d      	ldr	r1, [pc, #436]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006380:	78c9      	ldrb	r1, [r1, #3]
 8006382:	430b      	orrs	r3, r1
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800638a:	431a      	orrs	r2, r3
 800638c:	4b69      	ldr	r3, [pc, #420]	; (8006534 <MX_LWIP_Init+0x23c>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	0619      	lsls	r1, r3, #24
 8006392:	4b68      	ldr	r3, [pc, #416]	; (8006534 <MX_LWIP_Init+0x23c>)
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	4319      	orrs	r1, r3
 800639a:	4b66      	ldr	r3, [pc, #408]	; (8006534 <MX_LWIP_Init+0x23c>)
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	430b      	orrs	r3, r1
 80063a2:	4964      	ldr	r1, [pc, #400]	; (8006534 <MX_LWIP_Init+0x23c>)
 80063a4:	78c9      	ldrb	r1, [r1, #3]
 80063a6:	430b      	orrs	r3, r1
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063ae:	431a      	orrs	r2, r3
 80063b0:	4b60      	ldr	r3, [pc, #384]	; (8006534 <MX_LWIP_Init+0x23c>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	0619      	lsls	r1, r3, #24
 80063b6:	4b5f      	ldr	r3, [pc, #380]	; (8006534 <MX_LWIP_Init+0x23c>)
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	4319      	orrs	r1, r3
 80063be:	4b5d      	ldr	r3, [pc, #372]	; (8006534 <MX_LWIP_Init+0x23c>)
 80063c0:	789b      	ldrb	r3, [r3, #2]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	430b      	orrs	r3, r1
 80063c6:	495b      	ldr	r1, [pc, #364]	; (8006534 <MX_LWIP_Init+0x23c>)
 80063c8:	78c9      	ldrb	r1, [r1, #3]
 80063ca:	430b      	orrs	r3, r1
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	4313      	orrs	r3, r2
 80063d0:	4a5b      	ldr	r2, [pc, #364]	; (8006540 <MX_LWIP_Init+0x248>)
 80063d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80063d4:	4b58      	ldr	r3, [pc, #352]	; (8006538 <MX_LWIP_Init+0x240>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	061a      	lsls	r2, r3, #24
 80063da:	4b57      	ldr	r3, [pc, #348]	; (8006538 <MX_LWIP_Init+0x240>)
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	431a      	orrs	r2, r3
 80063e2:	4b55      	ldr	r3, [pc, #340]	; (8006538 <MX_LWIP_Init+0x240>)
 80063e4:	789b      	ldrb	r3, [r3, #2]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	4313      	orrs	r3, r2
 80063ea:	4a53      	ldr	r2, [pc, #332]	; (8006538 <MX_LWIP_Init+0x240>)
 80063ec:	78d2      	ldrb	r2, [r2, #3]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	061a      	lsls	r2, r3, #24
 80063f2:	4b51      	ldr	r3, [pc, #324]	; (8006538 <MX_LWIP_Init+0x240>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	0619      	lsls	r1, r3, #24
 80063f8:	4b4f      	ldr	r3, [pc, #316]	; (8006538 <MX_LWIP_Init+0x240>)
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	4319      	orrs	r1, r3
 8006400:	4b4d      	ldr	r3, [pc, #308]	; (8006538 <MX_LWIP_Init+0x240>)
 8006402:	789b      	ldrb	r3, [r3, #2]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	430b      	orrs	r3, r1
 8006408:	494b      	ldr	r1, [pc, #300]	; (8006538 <MX_LWIP_Init+0x240>)
 800640a:	78c9      	ldrb	r1, [r1, #3]
 800640c:	430b      	orrs	r3, r1
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006414:	431a      	orrs	r2, r3
 8006416:	4b48      	ldr	r3, [pc, #288]	; (8006538 <MX_LWIP_Init+0x240>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	0619      	lsls	r1, r3, #24
 800641c:	4b46      	ldr	r3, [pc, #280]	; (8006538 <MX_LWIP_Init+0x240>)
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	4319      	orrs	r1, r3
 8006424:	4b44      	ldr	r3, [pc, #272]	; (8006538 <MX_LWIP_Init+0x240>)
 8006426:	789b      	ldrb	r3, [r3, #2]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	430b      	orrs	r3, r1
 800642c:	4942      	ldr	r1, [pc, #264]	; (8006538 <MX_LWIP_Init+0x240>)
 800642e:	78c9      	ldrb	r1, [r1, #3]
 8006430:	430b      	orrs	r3, r1
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006438:	431a      	orrs	r2, r3
 800643a:	4b3f      	ldr	r3, [pc, #252]	; (8006538 <MX_LWIP_Init+0x240>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	0619      	lsls	r1, r3, #24
 8006440:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <MX_LWIP_Init+0x240>)
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	4319      	orrs	r1, r3
 8006448:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <MX_LWIP_Init+0x240>)
 800644a:	789b      	ldrb	r3, [r3, #2]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	430b      	orrs	r3, r1
 8006450:	4939      	ldr	r1, [pc, #228]	; (8006538 <MX_LWIP_Init+0x240>)
 8006452:	78c9      	ldrb	r1, [r1, #3]
 8006454:	430b      	orrs	r3, r1
 8006456:	0e1b      	lsrs	r3, r3, #24
 8006458:	4313      	orrs	r3, r2
 800645a:	4a3a      	ldr	r2, [pc, #232]	; (8006544 <MX_LWIP_Init+0x24c>)
 800645c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800645e:	4b37      	ldr	r3, [pc, #220]	; (800653c <MX_LWIP_Init+0x244>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	061a      	lsls	r2, r3, #24
 8006464:	4b35      	ldr	r3, [pc, #212]	; (800653c <MX_LWIP_Init+0x244>)
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	431a      	orrs	r2, r3
 800646c:	4b33      	ldr	r3, [pc, #204]	; (800653c <MX_LWIP_Init+0x244>)
 800646e:	789b      	ldrb	r3, [r3, #2]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	4313      	orrs	r3, r2
 8006474:	4a31      	ldr	r2, [pc, #196]	; (800653c <MX_LWIP_Init+0x244>)
 8006476:	78d2      	ldrb	r2, [r2, #3]
 8006478:	4313      	orrs	r3, r2
 800647a:	061a      	lsls	r2, r3, #24
 800647c:	4b2f      	ldr	r3, [pc, #188]	; (800653c <MX_LWIP_Init+0x244>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	0619      	lsls	r1, r3, #24
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <MX_LWIP_Init+0x244>)
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	4319      	orrs	r1, r3
 800648a:	4b2c      	ldr	r3, [pc, #176]	; (800653c <MX_LWIP_Init+0x244>)
 800648c:	789b      	ldrb	r3, [r3, #2]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	430b      	orrs	r3, r1
 8006492:	492a      	ldr	r1, [pc, #168]	; (800653c <MX_LWIP_Init+0x244>)
 8006494:	78c9      	ldrb	r1, [r1, #3]
 8006496:	430b      	orrs	r3, r1
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800649e:	431a      	orrs	r2, r3
 80064a0:	4b26      	ldr	r3, [pc, #152]	; (800653c <MX_LWIP_Init+0x244>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	0619      	lsls	r1, r3, #24
 80064a6:	4b25      	ldr	r3, [pc, #148]	; (800653c <MX_LWIP_Init+0x244>)
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	4319      	orrs	r1, r3
 80064ae:	4b23      	ldr	r3, [pc, #140]	; (800653c <MX_LWIP_Init+0x244>)
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	430b      	orrs	r3, r1
 80064b6:	4921      	ldr	r1, [pc, #132]	; (800653c <MX_LWIP_Init+0x244>)
 80064b8:	78c9      	ldrb	r1, [r1, #3]
 80064ba:	430b      	orrs	r3, r1
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064c2:	431a      	orrs	r2, r3
 80064c4:	4b1d      	ldr	r3, [pc, #116]	; (800653c <MX_LWIP_Init+0x244>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	0619      	lsls	r1, r3, #24
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <MX_LWIP_Init+0x244>)
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	041b      	lsls	r3, r3, #16
 80064d0:	4319      	orrs	r1, r3
 80064d2:	4b1a      	ldr	r3, [pc, #104]	; (800653c <MX_LWIP_Init+0x244>)
 80064d4:	789b      	ldrb	r3, [r3, #2]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	430b      	orrs	r3, r1
 80064da:	4918      	ldr	r1, [pc, #96]	; (800653c <MX_LWIP_Init+0x244>)
 80064dc:	78c9      	ldrb	r1, [r1, #3]
 80064de:	430b      	orrs	r3, r1
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	4313      	orrs	r3, r2
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <MX_LWIP_Init+0x250>)
 80064e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <MX_LWIP_Init+0x254>)
 80064ea:	9302      	str	r3, [sp, #8]
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <MX_LWIP_Init+0x258>)
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4b14      	ldr	r3, [pc, #80]	; (8006548 <MX_LWIP_Init+0x250>)
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <MX_LWIP_Init+0x24c>)
 80064f8:	4911      	ldr	r1, [pc, #68]	; (8006540 <MX_LWIP_Init+0x248>)
 80064fa:	4816      	ldr	r0, [pc, #88]	; (8006554 <MX_LWIP_Init+0x25c>)
 80064fc:	f000 ffb0 	bl	8007460 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006500:	4814      	ldr	r0, [pc, #80]	; (8006554 <MX_LWIP_Init+0x25c>)
 8006502:	f001 f95f 	bl	80077c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <MX_LWIP_Init+0x25c>)
 8006508:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800650c:	089b      	lsrs	r3, r3, #2
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006518:	480e      	ldr	r0, [pc, #56]	; (8006554 <MX_LWIP_Init+0x25c>)
 800651a:	f001 f963 	bl	80077e4 <netif_set_up>
 800651e:	e002      	b.n	8006526 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006520:	480c      	ldr	r0, [pc, #48]	; (8006554 <MX_LWIP_Init+0x25c>)
 8006522:	f001 f9cb 	bl	80078bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006526:	490c      	ldr	r1, [pc, #48]	; (8006558 <MX_LWIP_Init+0x260>)
 8006528:	480a      	ldr	r0, [pc, #40]	; (8006554 <MX_LWIP_Init+0x25c>)
 800652a:	f001 f9f9 	bl	8007920 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800652e:	bf00      	nop
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200003fc 	.word	0x200003fc
 8006538:	200003f8 	.word	0x200003f8
 800653c:	200003bc 	.word	0x200003bc
 8006540:	200003f4 	.word	0x200003f4
 8006544:	20000400 	.word	0x20000400
 8006548:	20000404 	.word	0x20000404
 800654c:	08010105 	.word	0x08010105
 8006550:	08006941 	.word	0x08006941
 8006554:	200003c0 	.word	0x200003c0
 8006558:	080069ad 	.word	0x080069ad

0800655c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a46      	ldr	r2, [pc, #280]	; (8006694 <HAL_ETH_MspInit+0x138>)
 800657a:	4293      	cmp	r3, r2
 800657c:	f040 8085 	bne.w	800668a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006580:	2300      	movs	r3, #0
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	4b44      	ldr	r3, [pc, #272]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	4a43      	ldr	r2, [pc, #268]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 800658a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800658e:	6313      	str	r3, [r2, #48]	; 0x30
 8006590:	4b41      	ldr	r3, [pc, #260]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	4b3d      	ldr	r3, [pc, #244]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	4a3c      	ldr	r2, [pc, #240]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065aa:	6313      	str	r3, [r2, #48]	; 0x30
 80065ac:	4b3a      	ldr	r3, [pc, #232]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	4a35      	ldr	r2, [pc, #212]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065c6:	6313      	str	r3, [r2, #48]	; 0x30
 80065c8:	4b33      	ldr	r3, [pc, #204]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	4a2e      	ldr	r2, [pc, #184]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	6313      	str	r3, [r2, #48]	; 0x30
 80065e4:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	4b28      	ldr	r3, [pc, #160]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	4a27      	ldr	r2, [pc, #156]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	4b21      	ldr	r3, [pc, #132]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 8006616:	f043 0302 	orr.w	r3, r3, #2
 800661a:	6313      	str	r3, [r2, #48]	; 0x30
 800661c:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <HAL_ETH_MspInit+0x13c>)
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006628:	2332      	movs	r3, #50	; 0x32
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662c:	2302      	movs	r3, #2
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006634:	2303      	movs	r3, #3
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006638:	230b      	movs	r3, #11
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800663c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006640:	4619      	mov	r1, r3
 8006642:	4816      	ldr	r0, [pc, #88]	; (800669c <HAL_ETH_MspInit+0x140>)
 8006644:	f7fc fd42 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006648:	2386      	movs	r3, #134	; 0x86
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664c:	2302      	movs	r3, #2
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2303      	movs	r3, #3
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006658:	230b      	movs	r3, #11
 800665a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800665c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006660:	4619      	mov	r1, r3
 8006662:	480f      	ldr	r0, [pc, #60]	; (80066a0 <HAL_ETH_MspInit+0x144>)
 8006664:	f7fc fd32 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006668:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666e:	2302      	movs	r3, #2
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006672:	2300      	movs	r3, #0
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006676:	2303      	movs	r3, #3
 8006678:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800667a:	230b      	movs	r3, #11
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800667e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006682:	4619      	mov	r1, r3
 8006684:	4807      	ldr	r0, [pc, #28]	; (80066a4 <HAL_ETH_MspInit+0x148>)
 8006686:	f7fc fd21 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800668a:	bf00      	nop
 800668c:	3738      	adds	r7, #56	; 0x38
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40028000 	.word	0x40028000
 8006698:	40023800 	.word	0x40023800
 800669c:	40020800 	.word	0x40020800
 80066a0:	40020000 	.word	0x40020000
 80066a4:	40020400 	.word	0x40020400

080066a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80066b4:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <low_level_init+0x144>)
 80066b6:	4a4e      	ldr	r2, [pc, #312]	; (80067f0 <low_level_init+0x148>)
 80066b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80066ba:	4b4c      	ldr	r3, [pc, #304]	; (80067ec <low_level_init+0x144>)
 80066bc:	2201      	movs	r2, #1
 80066be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80066c0:	4b4a      	ldr	r3, [pc, #296]	; (80067ec <low_level_init+0x144>)
 80066c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80066c8:	4b48      	ldr	r3, [pc, #288]	; (80067ec <low_level_init+0x144>)
 80066ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80066d0:	4b46      	ldr	r3, [pc, #280]	; (80067ec <low_level_init+0x144>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80066d6:	2300      	movs	r3, #0
 80066d8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80066de:	23e1      	movs	r3, #225	; 0xe1
 80066e0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80066e2:	2300      	movs	r3, #0
 80066e4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80066e6:	2300      	movs	r3, #0
 80066e8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80066ea:	2300      	movs	r3, #0
 80066ec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80066ee:	4a3f      	ldr	r2, [pc, #252]	; (80067ec <low_level_init+0x144>)
 80066f0:	f107 0308 	add.w	r3, r7, #8
 80066f4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <low_level_init+0x144>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80066fc:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <low_level_init+0x144>)
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006702:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <low_level_init+0x144>)
 8006704:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006708:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800670a:	4838      	ldr	r0, [pc, #224]	; (80067ec <low_level_init+0x144>)
 800670c:	f7fb fc3c 	bl	8001f88 <HAL_ETH_Init>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d108      	bne.n	800672c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006720:	f043 0304 	orr.w	r3, r3, #4
 8006724:	b2da      	uxtb	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800672c:	2304      	movs	r3, #4
 800672e:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <low_level_init+0x14c>)
 8006730:	4931      	ldr	r1, [pc, #196]	; (80067f8 <low_level_init+0x150>)
 8006732:	482e      	ldr	r0, [pc, #184]	; (80067ec <low_level_init+0x144>)
 8006734:	f7fb fdc4 	bl	80022c0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006738:	2304      	movs	r3, #4
 800673a:	4a30      	ldr	r2, [pc, #192]	; (80067fc <low_level_init+0x154>)
 800673c:	4930      	ldr	r1, [pc, #192]	; (8006800 <low_level_init+0x158>)
 800673e:	482b      	ldr	r0, [pc, #172]	; (80067ec <low_level_init+0x144>)
 8006740:	f7fb fe27 	bl	8002392 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2206      	movs	r2, #6
 8006748:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <low_level_init+0x144>)
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006758:	4b24      	ldr	r3, [pc, #144]	; (80067ec <low_level_init+0x144>)
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	785a      	ldrb	r2, [r3, #1]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006764:	4b21      	ldr	r3, [pc, #132]	; (80067ec <low_level_init+0x144>)
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	789a      	ldrb	r2, [r3, #2]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <low_level_init+0x144>)
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	78da      	ldrb	r2, [r3, #3]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <low_level_init+0x144>)
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	791a      	ldrb	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006788:	4b18      	ldr	r3, [pc, #96]	; (80067ec <low_level_init+0x144>)
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	795a      	ldrb	r2, [r3, #5]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800679a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067a2:	f043 030a 	orr.w	r3, r3, #10
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80067ae:	480f      	ldr	r0, [pc, #60]	; (80067ec <low_level_init+0x144>)
 80067b0:	f7fc f814 	bl	80027dc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	461a      	mov	r2, r3
 80067ba:	211d      	movs	r1, #29
 80067bc:	480b      	ldr	r0, [pc, #44]	; (80067ec <low_level_init+0x144>)
 80067be:	f7fb ff3f 	bl	8002640 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f043 030b 	orr.w	r3, r3, #11
 80067c8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	461a      	mov	r2, r3
 80067ce:	211d      	movs	r1, #29
 80067d0:	4806      	ldr	r0, [pc, #24]	; (80067ec <low_level_init+0x144>)
 80067d2:	f7fb ff9d 	bl	8002710 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80067d6:	f107 0310 	add.w	r3, r7, #16
 80067da:	461a      	mov	r2, r3
 80067dc:	211d      	movs	r1, #29
 80067de:	4803      	ldr	r0, [pc, #12]	; (80067ec <low_level_init+0x144>)
 80067e0:	f7fb ff2e 	bl	8002640 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80067e4:	bf00      	nop
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000408 	.word	0x20000408
 80067f0:	40028000 	.word	0x40028000
 80067f4:	200118d0 	.word	0x200118d0
 80067f8:	20010080 	.word	0x20010080
 80067fc:	20010100 	.word	0x20010100
 8006800:	20010000 	.word	0x20010000

08006804 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800680e:	4b4b      	ldr	r3, [pc, #300]	; (800693c <low_level_output+0x138>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006826:	4b45      	ldr	r3, [pc, #276]	; (800693c <low_level_output+0x138>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e05a      	b.n	80068ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	da03      	bge.n	8006846 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800683e:	23f8      	movs	r3, #248	; 0xf8
 8006840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006844:	e05c      	b.n	8006900 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	895b      	ldrh	r3, [r3, #10]
 800684a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006850:	e02f      	b.n	80068b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	18d0      	adds	r0, r2, r3
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	18d1      	adds	r1, r2, r3
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006866:	3304      	adds	r3, #4
 8006868:	461a      	mov	r2, r3
 800686a:	f009 fd53 	bl	8010314 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da03      	bge.n	8006884 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800687c:	23f8      	movs	r3, #248	; 0xf8
 800687e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006882:	e03d      	b.n	8006900 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006894:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80068a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80068ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80068bc:	4293      	cmp	r3, r2
 80068be:	d8c8      	bhi.n	8006852 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	18d0      	adds	r0, r2, r3
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4619      	mov	r1, r3
 80068d2:	f009 fd1f 	bl	8010314 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1a1      	bne.n	8006836 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	4811      	ldr	r0, [pc, #68]	; (800693c <low_level_output+0x138>)
 80068f6:	f7fb fdb9 	bl	800246c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <low_level_output+0x138>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006908:	3314      	adds	r3, #20
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <low_level_output+0x138>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691c:	3314      	adds	r3, #20
 800691e:	2220      	movs	r2, #32
 8006920:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <low_level_output+0x138>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	3304      	adds	r3, #4
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006930:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20000408 	.word	0x20000408

08006940 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <ethernetif_init+0x1c>
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <ethernetif_init+0x48>)
 8006950:	f240 220b 	movw	r2, #523	; 0x20b
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <ethernetif_init+0x4c>)
 8006956:	480e      	ldr	r0, [pc, #56]	; (8006990 <ethernetif_init+0x50>)
 8006958:	f009 fcf2 	bl	8010340 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2273      	movs	r2, #115	; 0x73
 8006960:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2274      	movs	r2, #116	; 0x74
 8006968:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <ethernetif_init+0x54>)
 8006970:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <ethernetif_init+0x58>)
 8006976:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fe95 	bl	80066a8 <low_level_init>

  return ERR_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	0801138c 	.word	0x0801138c
 800698c:	080113a8 	.word	0x080113a8
 8006990:	080113b8 	.word	0x080113b8
 8006994:	0800e5c9 	.word	0x0800e5c9
 8006998:	08006805 	.word	0x08006805

0800699c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80069a0:	f7fa fdae 	bl	8001500 <HAL_GetTick>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05d      	beq.n	8006a8a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d03f      	beq.n	8006a56 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80069d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069da:	2100      	movs	r1, #0
 80069dc:	4830      	ldr	r0, [pc, #192]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069de:	f7fb fe97 	bl	8002710 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80069e2:	f7fa fd8d 	bl	8001500 <HAL_GetTick>
 80069e6:	4603      	mov	r3, r0
 80069e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	461a      	mov	r2, r3
 80069f0:	2101      	movs	r1, #1
 80069f2:	482b      	ldr	r0, [pc, #172]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069f4:	f7fb fe24 	bl	8002640 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80069f8:	f7fa fd82 	bl	8001500 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d828      	bhi.n	8006a5a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0eb      	beq.n	80069ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	461a      	mov	r2, r3
 8006a18:	2110      	movs	r1, #16
 8006a1a:	4821      	ldr	r0, [pc, #132]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a1c:	f7fb fe10 	bl	8002640 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e002      	b.n	8006a3a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006a44:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]
 8006a4a:	e016      	b.n	8006a7a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006a4c:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a52:	609a      	str	r2, [r3, #8]
 8006a54:	e011      	b.n	8006a7a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <ethernetif_update_config+0xb0>
          goto error;
 8006a5a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	2100      	movs	r1, #0
 8006a74:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a76:	f7fb fe4b 	bl	8002710 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a7e:	f7fb ff0b 	bl	8002898 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006a82:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a84:	f7fb feaa 	bl	80027dc <HAL_ETH_Start>
 8006a88:	e002      	b.n	8006a90 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006a8a:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a8c:	f7fb fed5 	bl	800283a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f807 	bl	8006aa4 <ethernetif_notify_conn_changed>
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000408 	.word	0x20000408

08006aa4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	b21a      	sxth	r2, r3
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	b21b      	sxth	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b21b      	sxth	r3, r3
 8006ad4:	b29b      	uxth	r3, r3
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	061a      	lsls	r2, r3, #24
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	4313      	orrs	r3, r2
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006b1e:	f000 f8d5 	bl	8006ccc <mem_init>
  memp_init();
 8006b22:	f000 fbdb 	bl	80072dc <memp_init>
  pbuf_init();
  netif_init();
 8006b26:	f000 fc93 	bl	8007450 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006b2a:	f006 ff47 	bl	800d9bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006b2e:	f001 fce5 	bl	80084fc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006b32:	f006 fefb 	bl	800d92c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <ptr_to_mem+0x20>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	4413      	add	r3, r2
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000098 	.word	0x20000098

08006b64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <mem_to_ptr+0x20>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	b29b      	uxth	r3, r3
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000098 	.word	0x20000098

08006b88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006b90:	4b45      	ldr	r3, [pc, #276]	; (8006ca8 <plug_holes+0x120>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d206      	bcs.n	8006ba8 <plug_holes+0x20>
 8006b9a:	4b44      	ldr	r3, [pc, #272]	; (8006cac <plug_holes+0x124>)
 8006b9c:	f240 12df 	movw	r2, #479	; 0x1df
 8006ba0:	4943      	ldr	r1, [pc, #268]	; (8006cb0 <plug_holes+0x128>)
 8006ba2:	4844      	ldr	r0, [pc, #272]	; (8006cb4 <plug_holes+0x12c>)
 8006ba4:	f009 fbcc 	bl	8010340 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ba8:	4b43      	ldr	r3, [pc, #268]	; (8006cb8 <plug_holes+0x130>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d306      	bcc.n	8006bc0 <plug_holes+0x38>
 8006bb2:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <plug_holes+0x124>)
 8006bb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006bb8:	4940      	ldr	r1, [pc, #256]	; (8006cbc <plug_holes+0x134>)
 8006bba:	483e      	ldr	r0, [pc, #248]	; (8006cb4 <plug_holes+0x12c>)
 8006bbc:	f009 fbc0 	bl	8010340 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	791b      	ldrb	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <plug_holes+0x4e>
 8006bc8:	4b38      	ldr	r3, [pc, #224]	; (8006cac <plug_holes+0x124>)
 8006bca:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006bce:	493c      	ldr	r1, [pc, #240]	; (8006cc0 <plug_holes+0x138>)
 8006bd0:	4838      	ldr	r0, [pc, #224]	; (8006cb4 <plug_holes+0x12c>)
 8006bd2:	f009 fbb5 	bl	8010340 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006bde:	d906      	bls.n	8006bee <plug_holes+0x66>
 8006be0:	4b32      	ldr	r3, [pc, #200]	; (8006cac <plug_holes+0x124>)
 8006be2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006be6:	4937      	ldr	r1, [pc, #220]	; (8006cc4 <plug_holes+0x13c>)
 8006be8:	4832      	ldr	r0, [pc, #200]	; (8006cb4 <plug_holes+0x12c>)
 8006bea:	f009 fba9 	bl	8010340 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff ffa4 	bl	8006b40 <ptr_to_mem>
 8006bf8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d024      	beq.n	8006c4c <plug_holes+0xc4>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d120      	bne.n	8006c4c <plug_holes+0xc4>
 8006c0a:	4b2b      	ldr	r3, [pc, #172]	; (8006cb8 <plug_holes+0x130>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d01b      	beq.n	8006c4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <plug_holes+0x140>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d102      	bne.n	8006c24 <plug_holes+0x9c>
      lfree = mem;
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <plug_holes+0x140>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c34:	d00a      	beq.n	8006c4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff ff80 	bl	8006b40 <ptr_to_mem>
 8006c40:	4604      	mov	r4, r0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff8e 	bl	8006b64 <mem_to_ptr>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff ff75 	bl	8006b40 <ptr_to_mem>
 8006c56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d01f      	beq.n	8006ca0 <plug_holes+0x118>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	791b      	ldrb	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11b      	bne.n	8006ca0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <plug_holes+0x140>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d102      	bne.n	8006c78 <plug_holes+0xf0>
      lfree = pmem;
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <plug_holes+0x140>)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c88:	d00a      	beq.n	8006ca0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff ff56 	bl	8006b40 <ptr_to_mem>
 8006c94:	4604      	mov	r4, r0
 8006c96:	68b8      	ldr	r0, [r7, #8]
 8006c98:	f7ff ff64 	bl	8006b64 <mem_to_ptr>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd90      	pop	{r4, r7, pc}
 8006ca8:	20000098 	.word	0x20000098
 8006cac:	080113e0 	.word	0x080113e0
 8006cb0:	08011410 	.word	0x08011410
 8006cb4:	08011428 	.word	0x08011428
 8006cb8:	2000009c 	.word	0x2000009c
 8006cbc:	08011450 	.word	0x08011450
 8006cc0:	0801146c 	.word	0x0801146c
 8006cc4:	08011488 	.word	0x08011488
 8006cc8:	200000a0 	.word	0x200000a0

08006ccc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006cd2:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <mem_init+0x68>)
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4b16      	ldr	r3, [pc, #88]	; (8006d38 <mem_init+0x6c>)
 8006cde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006ce0:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <mem_init+0x6c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006cec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006cfa:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006cfe:	f7ff ff1f 	bl	8006b40 <ptr_to_mem>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <mem_init+0x70>)
 8006d06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <mem_init+0x70>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <mem_init+0x70>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006d18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <mem_init+0x70>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006d22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <mem_init+0x6c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a05      	ldr	r2, [pc, #20]	; (8006d40 <mem_init+0x74>)
 8006d2a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000468 	.word	0x20000468
 8006d38:	20000098 	.word	0x20000098
 8006d3c:	2000009c 	.word	0x2000009c
 8006d40:	200000a0 	.word	0x200000a0

08006d44 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff09 	bl	8006b64 <mem_to_ptr>
 8006d52:	4603      	mov	r3, r0
 8006d54:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fef0 	bl	8006b40 <ptr_to_mem>
 8006d60:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff feea 	bl	8006b40 <ptr_to_mem>
 8006d6c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d76:	d818      	bhi.n	8006daa <mem_link_valid+0x66>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	885b      	ldrh	r3, [r3, #2]
 8006d7c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d80:	d813      	bhi.n	8006daa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006d86:	8afa      	ldrh	r2, [r7, #22]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d004      	beq.n	8006d96 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	8afa      	ldrh	r2, [r7, #22]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d109      	bne.n	8006daa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <mem_link_valid+0x74>)
 8006d98:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d006      	beq.n	8006dae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	885b      	ldrh	r3, [r3, #2]
 8006da4:	8afa      	ldrh	r2, [r7, #22]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d001      	beq.n	8006dae <mem_link_valid+0x6a>
    return 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e000      	b.n	8006db0 <mem_link_valid+0x6c>
  }
  return 1;
 8006dae:	2301      	movs	r3, #1
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	2000009c 	.word	0x2000009c

08006dbc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d04c      	beq.n	8006e64 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <mem_free+0xb0>)
 8006dd6:	f240 2273 	movw	r2, #627	; 0x273
 8006dda:	4925      	ldr	r1, [pc, #148]	; (8006e70 <mem_free+0xb4>)
 8006ddc:	4825      	ldr	r0, [pc, #148]	; (8006e74 <mem_free+0xb8>)
 8006dde:	f009 faaf 	bl	8010340 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006de2:	e040      	b.n	8006e66 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3b08      	subs	r3, #8
 8006de8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <mem_free+0xbc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d306      	bcc.n	8006e02 <mem_free+0x46>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 020c 	add.w	r2, r3, #12
 8006dfa:	4b20      	ldr	r3, [pc, #128]	; (8006e7c <mem_free+0xc0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d907      	bls.n	8006e12 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <mem_free+0xb0>)
 8006e04:	f240 227f 	movw	r2, #639	; 0x27f
 8006e08:	491d      	ldr	r1, [pc, #116]	; (8006e80 <mem_free+0xc4>)
 8006e0a:	481a      	ldr	r0, [pc, #104]	; (8006e74 <mem_free+0xb8>)
 8006e0c:	f009 fa98 	bl	8010340 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006e10:	e029      	b.n	8006e66 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <mem_free+0xb0>)
 8006e1c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006e20:	4918      	ldr	r1, [pc, #96]	; (8006e84 <mem_free+0xc8>)
 8006e22:	4814      	ldr	r0, [pc, #80]	; (8006e74 <mem_free+0xb8>)
 8006e24:	f009 fa8c 	bl	8010340 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006e28:	e01d      	b.n	8006e66 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7ff ff8a 	bl	8006d44 <mem_link_valid>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d107      	bne.n	8006e46 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <mem_free+0xb0>)
 8006e38:	f240 2295 	movw	r2, #661	; 0x295
 8006e3c:	4912      	ldr	r1, [pc, #72]	; (8006e88 <mem_free+0xcc>)
 8006e3e:	480d      	ldr	r0, [pc, #52]	; (8006e74 <mem_free+0xb8>)
 8006e40:	f009 fa7e 	bl	8010340 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006e44:	e00f      	b.n	8006e66 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <mem_free+0xd0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d202      	bcs.n	8006e5c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006e56:	4a0d      	ldr	r2, [pc, #52]	; (8006e8c <mem_free+0xd0>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fe93 	bl	8006b88 <plug_holes>
 8006e62:	e000      	b.n	8006e66 <mem_free+0xaa>
    return;
 8006e64:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	080113e0 	.word	0x080113e0
 8006e70:	080114b4 	.word	0x080114b4
 8006e74:	08011428 	.word	0x08011428
 8006e78:	20000098 	.word	0x20000098
 8006e7c:	2000009c 	.word	0x2000009c
 8006e80:	080114d8 	.word	0x080114d8
 8006e84:	080114f4 	.word	0x080114f4
 8006e88:	0801151c 	.word	0x0801151c
 8006e8c:	200000a0 	.word	0x200000a0

08006e90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006e9c:	887b      	ldrh	r3, [r7, #2]
 8006e9e:	3303      	adds	r3, #3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006ea8:	8bfb      	ldrh	r3, [r7, #30]
 8006eaa:	2b0b      	cmp	r3, #11
 8006eac:	d801      	bhi.n	8006eb2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006eae:	230c      	movs	r3, #12
 8006eb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006eb2:	8bfb      	ldrh	r3, [r7, #30]
 8006eb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006eb8:	d803      	bhi.n	8006ec2 <mem_trim+0x32>
 8006eba:	8bfa      	ldrh	r2, [r7, #30]
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d201      	bcs.n	8006ec6 <mem_trim+0x36>
    return NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e0cc      	b.n	8007060 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006ec6:	4b68      	ldr	r3, [pc, #416]	; (8007068 <mem_trim+0x1d8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d304      	bcc.n	8006eda <mem_trim+0x4a>
 8006ed0:	4b66      	ldr	r3, [pc, #408]	; (800706c <mem_trim+0x1dc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d306      	bcc.n	8006ee8 <mem_trim+0x58>
 8006eda:	4b65      	ldr	r3, [pc, #404]	; (8007070 <mem_trim+0x1e0>)
 8006edc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006ee0:	4964      	ldr	r1, [pc, #400]	; (8007074 <mem_trim+0x1e4>)
 8006ee2:	4865      	ldr	r0, [pc, #404]	; (8007078 <mem_trim+0x1e8>)
 8006ee4:	f009 fa2c 	bl	8010340 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006ee8:	4b5f      	ldr	r3, [pc, #380]	; (8007068 <mem_trim+0x1d8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d304      	bcc.n	8006efc <mem_trim+0x6c>
 8006ef2:	4b5e      	ldr	r3, [pc, #376]	; (800706c <mem_trim+0x1dc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d301      	bcc.n	8006f00 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	e0af      	b.n	8007060 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3b08      	subs	r3, #8
 8006f04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006f06:	69b8      	ldr	r0, [r7, #24]
 8006f08:	f7ff fe2c 	bl	8006b64 <mem_to_ptr>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	881a      	ldrh	r2, [r3, #0]
 8006f14:	8afb      	ldrh	r3, [r7, #22]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b08      	subs	r3, #8
 8006f1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006f1e:	8bfa      	ldrh	r2, [r7, #30]
 8006f20:	8abb      	ldrh	r3, [r7, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d906      	bls.n	8006f34 <mem_trim+0xa4>
 8006f26:	4b52      	ldr	r3, [pc, #328]	; (8007070 <mem_trim+0x1e0>)
 8006f28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006f2c:	4953      	ldr	r1, [pc, #332]	; (800707c <mem_trim+0x1ec>)
 8006f2e:	4852      	ldr	r0, [pc, #328]	; (8007078 <mem_trim+0x1e8>)
 8006f30:	f009 fa06 	bl	8010340 <iprintf>
  if (newsize > size) {
 8006f34:	8bfa      	ldrh	r2, [r7, #30]
 8006f36:	8abb      	ldrh	r3, [r7, #20]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d901      	bls.n	8006f40 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e08f      	b.n	8007060 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006f40:	8bfa      	ldrh	r2, [r7, #30]
 8006f42:	8abb      	ldrh	r3, [r7, #20]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d101      	bne.n	8006f4c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	e089      	b.n	8007060 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fdf5 	bl	8006b40 <ptr_to_mem>
 8006f56:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	791b      	ldrb	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d13f      	bne.n	8006fe0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006f68:	d106      	bne.n	8006f78 <mem_trim+0xe8>
 8006f6a:	4b41      	ldr	r3, [pc, #260]	; (8007070 <mem_trim+0x1e0>)
 8006f6c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006f70:	4943      	ldr	r1, [pc, #268]	; (8007080 <mem_trim+0x1f0>)
 8006f72:	4841      	ldr	r0, [pc, #260]	; (8007078 <mem_trim+0x1e8>)
 8006f74:	f009 f9e4 	bl	8010340 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006f7e:	8afa      	ldrh	r2, [r7, #22]
 8006f80:	8bfb      	ldrh	r3, [r7, #30]
 8006f82:	4413      	add	r3, r2
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3308      	adds	r3, #8
 8006f88:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006f8a:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <mem_trim+0x1f4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d106      	bne.n	8006fa2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fdd2 	bl	8006b40 <ptr_to_mem>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	4a39      	ldr	r2, [pc, #228]	; (8007084 <mem_trim+0x1f4>)
 8006fa0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006fa2:	89fb      	ldrh	r3, [r7, #14]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fdcb 	bl	8006b40 <ptr_to_mem>
 8006faa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	89ba      	ldrh	r2, [r7, #12]
 8006fb6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	8afa      	ldrh	r2, [r7, #22]
 8006fbc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	89fa      	ldrh	r2, [r7, #14]
 8006fc2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006fcc:	d047      	beq.n	800705e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fdb4 	bl	8006b40 <ptr_to_mem>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	8053      	strh	r3, [r2, #2]
 8006fde:	e03e      	b.n	800705e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006fe0:	8bfb      	ldrh	r3, [r7, #30]
 8006fe2:	f103 0214 	add.w	r2, r3, #20
 8006fe6:	8abb      	ldrh	r3, [r7, #20]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d838      	bhi.n	800705e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006fec:	8afa      	ldrh	r2, [r7, #22]
 8006fee:	8bfb      	ldrh	r3, [r7, #30]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007000:	d106      	bne.n	8007010 <mem_trim+0x180>
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <mem_trim+0x1e0>)
 8007004:	f240 3216 	movw	r2, #790	; 0x316
 8007008:	491d      	ldr	r1, [pc, #116]	; (8007080 <mem_trim+0x1f0>)
 800700a:	481b      	ldr	r0, [pc, #108]	; (8007078 <mem_trim+0x1e8>)
 800700c:	f009 f998 	bl	8010340 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007010:	89fb      	ldrh	r3, [r7, #14]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fd94 	bl	8006b40 <ptr_to_mem>
 8007018:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <mem_trim+0x1f4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	429a      	cmp	r2, r3
 8007022:	d202      	bcs.n	800702a <mem_trim+0x19a>
      lfree = mem2;
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <mem_trim+0x1f4>)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2200      	movs	r2, #0
 800702e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	881a      	ldrh	r2, [r3, #0]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	8afa      	ldrh	r2, [r7, #22]
 800703c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	89fa      	ldrh	r2, [r7, #14]
 8007042:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800704c:	d007      	beq.n	800705e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fd74 	bl	8006b40 <ptr_to_mem>
 8007058:	4602      	mov	r2, r0
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800705e:	687b      	ldr	r3, [r7, #4]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000098 	.word	0x20000098
 800706c:	2000009c 	.word	0x2000009c
 8007070:	080113e0 	.word	0x080113e0
 8007074:	08011550 	.word	0x08011550
 8007078:	08011428 	.word	0x08011428
 800707c:	08011568 	.word	0x08011568
 8007080:	08011588 	.word	0x08011588
 8007084:	200000a0 	.word	0x200000a0

08007088 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <mem_malloc+0x14>
    return NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	e0d9      	b.n	8007250 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	3303      	adds	r3, #3
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80070a8:	8bbb      	ldrh	r3, [r7, #28]
 80070aa:	2b0b      	cmp	r3, #11
 80070ac:	d801      	bhi.n	80070b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80070ae:	230c      	movs	r3, #12
 80070b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80070b2:	8bbb      	ldrh	r3, [r7, #28]
 80070b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070b8:	d803      	bhi.n	80070c2 <mem_malloc+0x3a>
 80070ba:	8bba      	ldrh	r2, [r7, #28]
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d201      	bcs.n	80070c6 <mem_malloc+0x3e>
    return NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e0c4      	b.n	8007250 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80070c6:	4b64      	ldr	r3, [pc, #400]	; (8007258 <mem_malloc+0x1d0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fd4a 	bl	8006b64 <mem_to_ptr>
 80070d0:	4603      	mov	r3, r0
 80070d2:	83fb      	strh	r3, [r7, #30]
 80070d4:	e0b4      	b.n	8007240 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80070d6:	8bfb      	ldrh	r3, [r7, #30]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fd31 	bl	8006b40 <ptr_to_mem>
 80070de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	791b      	ldrb	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 80a4 	bne.w	8007232 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	8bfb      	ldrh	r3, [r7, #30]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f1a3 0208 	sub.w	r2, r3, #8
 80070f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80070fa:	429a      	cmp	r2, r3
 80070fc:	f0c0 8099 	bcc.w	8007232 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	8bfb      	ldrh	r3, [r7, #30]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f1a3 0208 	sub.w	r2, r3, #8
 800710e:	8bbb      	ldrh	r3, [r7, #28]
 8007110:	3314      	adds	r3, #20
 8007112:	429a      	cmp	r2, r3
 8007114:	d333      	bcc.n	800717e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007116:	8bfa      	ldrh	r2, [r7, #30]
 8007118:	8bbb      	ldrh	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	b29b      	uxth	r3, r3
 800711e:	3308      	adds	r3, #8
 8007120:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007122:	8a7b      	ldrh	r3, [r7, #18]
 8007124:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007128:	d106      	bne.n	8007138 <mem_malloc+0xb0>
 800712a:	4b4c      	ldr	r3, [pc, #304]	; (800725c <mem_malloc+0x1d4>)
 800712c:	f240 3287 	movw	r2, #903	; 0x387
 8007130:	494b      	ldr	r1, [pc, #300]	; (8007260 <mem_malloc+0x1d8>)
 8007132:	484c      	ldr	r0, [pc, #304]	; (8007264 <mem_malloc+0x1dc>)
 8007134:	f009 f904 	bl	8010340 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007138:	8a7b      	ldrh	r3, [r7, #18]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fd00 	bl	8006b40 <ptr_to_mem>
 8007140:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8bfa      	ldrh	r2, [r7, #30]
 8007154:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	8a7a      	ldrh	r2, [r7, #18]
 800715a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2201      	movs	r2, #1
 8007160:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800716a:	d00b      	beq.n	8007184 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff fce5 	bl	8006b40 <ptr_to_mem>
 8007176:	4602      	mov	r2, r0
 8007178:	8a7b      	ldrh	r3, [r7, #18]
 800717a:	8053      	strh	r3, [r2, #2]
 800717c:	e002      	b.n	8007184 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2201      	movs	r2, #1
 8007182:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007184:	4b34      	ldr	r3, [pc, #208]	; (8007258 <mem_malloc+0x1d0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	429a      	cmp	r2, r3
 800718c:	d127      	bne.n	80071de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800718e:	4b32      	ldr	r3, [pc, #200]	; (8007258 <mem_malloc+0x1d0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007194:	e005      	b.n	80071a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fcd0 	bl	8006b40 <ptr_to_mem>
 80071a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	791b      	ldrb	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <mem_malloc+0x12c>
 80071aa:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <mem_malloc+0x1e0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d1f0      	bne.n	8007196 <mem_malloc+0x10e>
          }
          lfree = cur;
 80071b4:	4a28      	ldr	r2, [pc, #160]	; (8007258 <mem_malloc+0x1d0>)
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80071ba:	4b27      	ldr	r3, [pc, #156]	; (8007258 <mem_malloc+0x1d0>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <mem_malloc+0x1e0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d00b      	beq.n	80071de <mem_malloc+0x156>
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <mem_malloc+0x1d0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	791b      	ldrb	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <mem_malloc+0x156>
 80071d0:	4b22      	ldr	r3, [pc, #136]	; (800725c <mem_malloc+0x1d4>)
 80071d2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80071d6:	4925      	ldr	r1, [pc, #148]	; (800726c <mem_malloc+0x1e4>)
 80071d8:	4822      	ldr	r0, [pc, #136]	; (8007264 <mem_malloc+0x1dc>)
 80071da:	f009 f8b1 	bl	8010340 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80071de:	8bba      	ldrh	r2, [r7, #28]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	4413      	add	r3, r2
 80071e4:	3308      	adds	r3, #8
 80071e6:	4a20      	ldr	r2, [pc, #128]	; (8007268 <mem_malloc+0x1e0>)
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d906      	bls.n	80071fc <mem_malloc+0x174>
 80071ee:	4b1b      	ldr	r3, [pc, #108]	; (800725c <mem_malloc+0x1d4>)
 80071f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80071f4:	491e      	ldr	r1, [pc, #120]	; (8007270 <mem_malloc+0x1e8>)
 80071f6:	481b      	ldr	r0, [pc, #108]	; (8007264 <mem_malloc+0x1dc>)
 80071f8:	f009 f8a2 	bl	8010340 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <mem_malloc+0x18c>
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <mem_malloc+0x1d4>)
 8007208:	f240 32bb 	movw	r2, #955	; 0x3bb
 800720c:	4919      	ldr	r1, [pc, #100]	; (8007274 <mem_malloc+0x1ec>)
 800720e:	4815      	ldr	r0, [pc, #84]	; (8007264 <mem_malloc+0x1dc>)
 8007210:	f009 f896 	bl	8010340 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d006      	beq.n	800722c <mem_malloc+0x1a4>
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <mem_malloc+0x1d4>)
 8007220:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007224:	4914      	ldr	r1, [pc, #80]	; (8007278 <mem_malloc+0x1f0>)
 8007226:	480f      	ldr	r0, [pc, #60]	; (8007264 <mem_malloc+0x1dc>)
 8007228:	f009 f88a 	bl	8010340 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	3308      	adds	r3, #8
 8007230:	e00e      	b.n	8007250 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007232:	8bfb      	ldrh	r3, [r7, #30]
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fc83 	bl	8006b40 <ptr_to_mem>
 800723a:	4603      	mov	r3, r0
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007240:	8bfa      	ldrh	r2, [r7, #30]
 8007242:	8bbb      	ldrh	r3, [r7, #28]
 8007244:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007248:	429a      	cmp	r2, r3
 800724a:	f4ff af44 	bcc.w	80070d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	200000a0 	.word	0x200000a0
 800725c:	080113e0 	.word	0x080113e0
 8007260:	08011588 	.word	0x08011588
 8007264:	08011428 	.word	0x08011428
 8007268:	2000009c 	.word	0x2000009c
 800726c:	0801159c 	.word	0x0801159c
 8007270:	080115b8 	.word	0x080115b8
 8007274:	080115e8 	.word	0x080115e8
 8007278:	08011618 	.word	0x08011618

0800727c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	3303      	adds	r3, #3
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e011      	b.n	80072c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	4413      	add	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	461a      	mov	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4293      	cmp	r3, r2
 80072cc:	dbe7      	blt.n	800729e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80072e2:	2300      	movs	r3, #0
 80072e4:	80fb      	strh	r3, [r7, #6]
 80072e6:	e009      	b.n	80072fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	4a08      	ldr	r2, [pc, #32]	; (800730c <memp_init+0x30>)
 80072ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ffc3 	bl	800727c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	3301      	adds	r3, #1
 80072fa:	80fb      	strh	r3, [r7, #6]
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d9f2      	bls.n	80072e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	08013df8 	.word	0x08013df8

08007310 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d012      	beq.n	800734c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <do_memp_malloc_pool+0x38>
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <do_memp_malloc_pool+0x48>)
 800733c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007340:	4906      	ldr	r1, [pc, #24]	; (800735c <do_memp_malloc_pool+0x4c>)
 8007342:	4807      	ldr	r0, [pc, #28]	; (8007360 <do_memp_malloc_pool+0x50>)
 8007344:	f008 fffc 	bl	8010340 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	e000      	b.n	800734e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	0801163c 	.word	0x0801163c
 800735c:	0801166c 	.word	0x0801166c
 8007360:	08011690 	.word	0x08011690

08007364 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d908      	bls.n	8007386 <memp_malloc+0x22>
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <memp_malloc+0x3c>)
 8007376:	f240 1257 	movw	r2, #343	; 0x157
 800737a:	490a      	ldr	r1, [pc, #40]	; (80073a4 <memp_malloc+0x40>)
 800737c:	480a      	ldr	r0, [pc, #40]	; (80073a8 <memp_malloc+0x44>)
 800737e:	f008 ffdf 	bl	8010340 <iprintf>
 8007382:	2300      	movs	r3, #0
 8007384:	e008      	b.n	8007398 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <memp_malloc+0x48>)
 800738a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ffbe 	bl	8007310 <do_memp_malloc_pool>
 8007394:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	0801163c 	.word	0x0801163c
 80073a4:	080116cc 	.word	0x080116cc
 80073a8:	08011690 	.word	0x08011690
 80073ac:	08013df8 	.word	0x08013df8

080073b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <do_memp_free_pool+0x22>
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <do_memp_free_pool+0x40>)
 80073c6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <do_memp_free_pool+0x44>)
 80073cc:	480a      	ldr	r0, [pc, #40]	; (80073f8 <do_memp_free_pool+0x48>)
 80073ce:	f008 ffb7 	bl	8010340 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	0801163c 	.word	0x0801163c
 80073f4:	080116ec 	.word	0x080116ec
 80073f8:	08011690 	.word	0x08011690

080073fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	2b08      	cmp	r3, #8
 800740c:	d907      	bls.n	800741e <memp_free+0x22>
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <memp_free+0x44>)
 8007410:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007414:	490b      	ldr	r1, [pc, #44]	; (8007444 <memp_free+0x48>)
 8007416:	480c      	ldr	r0, [pc, #48]	; (8007448 <memp_free+0x4c>)
 8007418:	f008 ff92 	bl	8010340 <iprintf>
 800741c:	e00c      	b.n	8007438 <memp_free+0x3c>

  if (mem == NULL) {
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	4a09      	ldr	r2, [pc, #36]	; (800744c <memp_free+0x50>)
 8007428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ffbe 	bl	80073b0 <do_memp_free_pool>
 8007434:	e000      	b.n	8007438 <memp_free+0x3c>
    return;
 8007436:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	0801163c 	.word	0x0801163c
 8007444:	0801170c 	.word	0x0801170c
 8007448:	08011690 	.word	0x08011690
 800744c:	08013df8 	.word	0x08013df8

08007450 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007454:	bf00      	nop
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d108      	bne.n	8007486 <netif_add+0x26>
 8007474:	4b57      	ldr	r3, [pc, #348]	; (80075d4 <netif_add+0x174>)
 8007476:	f240 1227 	movw	r2, #295	; 0x127
 800747a:	4957      	ldr	r1, [pc, #348]	; (80075d8 <netif_add+0x178>)
 800747c:	4857      	ldr	r0, [pc, #348]	; (80075dc <netif_add+0x17c>)
 800747e:	f008 ff5f 	bl	8010340 <iprintf>
 8007482:	2300      	movs	r3, #0
 8007484:	e0a2      	b.n	80075cc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d108      	bne.n	800749e <netif_add+0x3e>
 800748c:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <netif_add+0x174>)
 800748e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007492:	4953      	ldr	r1, [pc, #332]	; (80075e0 <netif_add+0x180>)
 8007494:	4851      	ldr	r0, [pc, #324]	; (80075dc <netif_add+0x17c>)
 8007496:	f008 ff53 	bl	8010340 <iprintf>
 800749a:	2300      	movs	r3, #0
 800749c:	e096      	b.n	80075cc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80074a4:	4b4f      	ldr	r3, [pc, #316]	; (80075e4 <netif_add+0x184>)
 80074a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80074ae:	4b4d      	ldr	r3, [pc, #308]	; (80075e4 <netif_add+0x184>)
 80074b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80074b8:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <netif_add+0x184>)
 80074ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a45      	ldr	r2, [pc, #276]	; (80075e8 <netif_add+0x188>)
 80074d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a3a      	ldr	r2, [r7, #32]
 80074ec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80074ee:	4b3f      	ldr	r3, [pc, #252]	; (80075ec <netif_add+0x18c>)
 80074f0:	781a      	ldrb	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f913 	bl	8007730 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	4798      	blx	r3
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <netif_add+0xba>
    return NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	e058      	b.n	80075cc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007520:	2bff      	cmp	r3, #255	; 0xff
 8007522:	d103      	bne.n	800752c <netif_add+0xcc>
        netif->num = 0;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007530:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <netif_add+0x190>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e02b      	b.n	8007590 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d106      	bne.n	800754e <netif_add+0xee>
 8007540:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <netif_add+0x174>)
 8007542:	f240 128b 	movw	r2, #395	; 0x18b
 8007546:	492b      	ldr	r1, [pc, #172]	; (80075f4 <netif_add+0x194>)
 8007548:	4824      	ldr	r0, [pc, #144]	; (80075dc <netif_add+0x17c>)
 800754a:	f008 fef9 	bl	8010340 <iprintf>
        num_netifs++;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2bff      	cmp	r3, #255	; 0xff
 8007558:	dd06      	ble.n	8007568 <netif_add+0x108>
 800755a:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <netif_add+0x174>)
 800755c:	f240 128d 	movw	r2, #397	; 0x18d
 8007560:	4925      	ldr	r1, [pc, #148]	; (80075f8 <netif_add+0x198>)
 8007562:	481e      	ldr	r0, [pc, #120]	; (80075dc <netif_add+0x17c>)
 8007564:	f008 feec 	bl	8010340 <iprintf>
        if (netif2->num == netif->num) {
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007574:	429a      	cmp	r2, r3
 8007576:	d108      	bne.n	800758a <netif_add+0x12a>
          netif->num++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800757e:	3301      	adds	r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007588:	e005      	b.n	8007596 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1d0      	bne.n	8007538 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1be      	bne.n	800751a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a2:	2bfe      	cmp	r3, #254	; 0xfe
 80075a4:	d103      	bne.n	80075ae <netif_add+0x14e>
    netif_num = 0;
 80075a6:	4b11      	ldr	r3, [pc, #68]	; (80075ec <netif_add+0x18c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e006      	b.n	80075bc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b4:	3301      	adds	r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <netif_add+0x18c>)
 80075ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80075bc:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <netif_add+0x190>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80075c4:	4a0a      	ldr	r2, [pc, #40]	; (80075f0 <netif_add+0x190>)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80075ca:	68fb      	ldr	r3, [r7, #12]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	08011728 	.word	0x08011728
 80075d8:	080117bc 	.word	0x080117bc
 80075dc:	08011778 	.word	0x08011778
 80075e0:	080117d8 	.word	0x080117d8
 80075e4:	08013e5c 	.word	0x08013e5c
 80075e8:	08007943 	.word	0x08007943
 80075ec:	200000c8 	.word	0x200000c8
 80075f0:	20005b44 	.word	0x20005b44
 80075f4:	080117fc 	.word	0x080117fc
 80075f8:	08011810 	.word	0x08011810

080075fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f002 fabf 	bl	8009b8c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f006 fb5d 	bl	800dcd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <netif_do_set_ipaddr+0x20>
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <netif_do_set_ipaddr+0x88>)
 8007634:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007638:	491c      	ldr	r1, [pc, #112]	; (80076ac <netif_do_set_ipaddr+0x8c>)
 800763a:	481d      	ldr	r0, [pc, #116]	; (80076b0 <netif_do_set_ipaddr+0x90>)
 800763c:	f008 fe80 	bl	8010340 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <netif_do_set_ipaddr+0x34>
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <netif_do_set_ipaddr+0x88>)
 8007648:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800764c:	4917      	ldr	r1, [pc, #92]	; (80076ac <netif_do_set_ipaddr+0x8c>)
 800764e:	4818      	ldr	r0, [pc, #96]	; (80076b0 <netif_do_set_ipaddr+0x90>)
 8007650:	f008 fe76 	bl	8010340 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3304      	adds	r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d01c      	beq.n	800769c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007672:	f107 0314 	add.w	r3, r7, #20
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ffbf 	bl	80075fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <netif_do_set_ipaddr+0x6a>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	e000      	b.n	800768c <netif_do_set_ipaddr+0x6c>
 800768a:	2300      	movs	r3, #0
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007690:	2101      	movs	r1, #1
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f8d2 	bl	800783c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	08011728 	.word	0x08011728
 80076ac:	08011840 	.word	0x08011840
 80076b0:	08011778 	.word	0x08011778

080076b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3308      	adds	r3, #8
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d00a      	beq.n	80076e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <netif_do_set_netmask+0x26>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	e000      	b.n	80076dc <netif_do_set_netmask+0x28>
 80076da:	2300      	movs	r3, #0
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	330c      	adds	r3, #12
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d00a      	beq.n	8007722 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <netif_do_set_gw+0x26>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	e000      	b.n	800771a <netif_do_set_gw+0x28>
 8007718:	2300      	movs	r3, #0
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800774c:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <netif_set_addr+0x90>)
 800774e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <netif_set_addr+0x90>)
 8007758:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <netif_set_addr+0x90>)
 8007762:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <netif_set_addr+0x42>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <netif_set_addr+0x46>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <netif_set_addr+0x48>
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]
  if (remove) {
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007780:	f107 0310 	add.w	r3, r7, #16
 8007784:	461a      	mov	r2, r3
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff ff49 	bl	8007620 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff8e 	bl	80076b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff ffa8 	bl	80076f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80077a8:	f107 0310 	add.w	r3, r7, #16
 80077ac:	461a      	mov	r2, r3
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff ff35 	bl	8007620 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80077b6:	bf00      	nop
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	08013e5c 	.word	0x08013e5c

080077c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80077cc:	4a04      	ldr	r2, [pc, #16]	; (80077e0 <netif_set_default+0x1c>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20005b48 	.word	0x20005b48

080077e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <netif_set_up+0x1e>
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <netif_set_up+0x4c>)
 80077f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80077f8:	490e      	ldr	r1, [pc, #56]	; (8007834 <netif_set_up+0x50>)
 80077fa:	480f      	ldr	r0, [pc, #60]	; (8007838 <netif_set_up+0x54>)
 80077fc:	f008 fda0 	bl	8010340 <iprintf>
 8007800:	e013      	b.n	800782a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10c      	bne.n	800782a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	b2da      	uxtb	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007822:	2103      	movs	r1, #3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f809 	bl	800783c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	08011728 	.word	0x08011728
 8007834:	080118b0 	.word	0x080118b0
 8007838:	08011778 	.word	0x08011778

0800783c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <netif_issue_reports+0x20>
 800784e:	4b18      	ldr	r3, [pc, #96]	; (80078b0 <netif_issue_reports+0x74>)
 8007850:	f240 326d 	movw	r2, #877	; 0x36d
 8007854:	4917      	ldr	r1, [pc, #92]	; (80078b4 <netif_issue_reports+0x78>)
 8007856:	4818      	ldr	r0, [pc, #96]	; (80078b8 <netif_issue_reports+0x7c>)
 8007858:	f008 fd72 	bl	8010340 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01e      	beq.n	80078a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007870:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007874:	2b00      	cmp	r3, #0
 8007876:	d017      	beq.n	80078a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d013      	beq.n	80078aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f007 f97f 	bl	800eba4 <etharp_request>
 80078a6:	e000      	b.n	80078aa <netif_issue_reports+0x6e>
    return;
 80078a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	08011728 	.word	0x08011728
 80078b4:	080118cc 	.word	0x080118cc
 80078b8:	08011778 	.word	0x08011778

080078bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <netif_set_down+0x1e>
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <netif_set_down+0x58>)
 80078cc:	f240 329b 	movw	r2, #923	; 0x39b
 80078d0:	4911      	ldr	r1, [pc, #68]	; (8007918 <netif_set_down+0x5c>)
 80078d2:	4812      	ldr	r0, [pc, #72]	; (800791c <netif_set_down+0x60>)
 80078d4:	f008 fd34 	bl	8010340 <iprintf>
 80078d8:	e019      	b.n	800790e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d012      	beq.n	800790e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f006 fd09 	bl	800e320 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08011728 	.word	0x08011728
 8007918:	080118f0 	.word	0x080118f0
 800791c:	08011778 	.word	0x08011778

08007920 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	61da      	str	r2, [r3, #28]
  }
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800794e:	f06f 030b 	mvn.w	r3, #11
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d013      	beq.n	8007998 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007970:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <netif_get_by_index+0x48>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e00c      	b.n	8007992 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800797e:	3301      	adds	r3, #1
 8007980:	b2db      	uxtb	r3, r3
 8007982:	79fa      	ldrb	r2, [r7, #7]
 8007984:	429a      	cmp	r2, r3
 8007986:	d101      	bne.n	800798c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	e006      	b.n	800799a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1ef      	bne.n	8007978 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20005b44 	.word	0x20005b44

080079ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80079b0:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <pbuf_pool_is_empty+0x14>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80079b6:	bf00      	nop
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20005b4c 	.word	0x20005b4c

080079c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4611      	mov	r1, r2
 80079d0:	461a      	mov	r2, r3
 80079d2:	460b      	mov	r3, r1
 80079d4:	80fb      	strh	r3, [r7, #6]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	88fa      	ldrh	r2, [r7, #6]
 80079ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	88ba      	ldrh	r2, [r7, #4]
 80079f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80079f2:	8b3b      	ldrh	r3, [r7, #24]
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	7f3a      	ldrb	r2, [r7, #28]
 80079fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	73da      	strb	r2, [r3, #15]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08c      	sub	sp, #48	; 0x30
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
 8007a22:	460b      	mov	r3, r1
 8007a24:	80bb      	strh	r3, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007a2e:	887b      	ldrh	r3, [r7, #2]
 8007a30:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007a34:	d07f      	beq.n	8007b36 <pbuf_alloc+0x11e>
 8007a36:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007a3a:	f300 80c8 	bgt.w	8007bce <pbuf_alloc+0x1b6>
 8007a3e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007a42:	d010      	beq.n	8007a66 <pbuf_alloc+0x4e>
 8007a44:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007a48:	f300 80c1 	bgt.w	8007bce <pbuf_alloc+0x1b6>
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d002      	beq.n	8007a56 <pbuf_alloc+0x3e>
 8007a50:	2b41      	cmp	r3, #65	; 0x41
 8007a52:	f040 80bc 	bne.w	8007bce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007a56:	887a      	ldrh	r2, [r7, #2]
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f000 f8d1 	bl	8007c04 <pbuf_alloc_reference>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007a64:	e0bd      	b.n	8007be2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007a6e:	88bb      	ldrh	r3, [r7, #4]
 8007a70:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a72:	2008      	movs	r0, #8
 8007a74:	f7ff fc76 	bl	8007364 <memp_malloc>
 8007a78:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007a80:	f7ff ff94 	bl	80079ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a8c:	f000 faa8 	bl	8007fe0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e0a7      	b.n	8007be4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a96:	3303      	adds	r3, #3
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	8b7a      	ldrh	r2, [r7, #26]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf28      	it	cs
 8007aac:	4613      	movcs	r3, r2
 8007aae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3303      	adds	r3, #3
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	4618      	mov	r0, r3
 8007ac0:	89f9      	ldrh	r1, [r7, #14]
 8007ac2:	8b7a      	ldrh	r2, [r7, #26]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	460b      	mov	r3, r1
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6938      	ldr	r0, [r7, #16]
 8007ad2:	f7ff ff77 	bl	80079c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <pbuf_alloc+0xd8>
 8007ae2:	4b42      	ldr	r3, [pc, #264]	; (8007bec <pbuf_alloc+0x1d4>)
 8007ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae8:	4941      	ldr	r1, [pc, #260]	; (8007bf0 <pbuf_alloc+0x1d8>)
 8007aea:	4842      	ldr	r0, [pc, #264]	; (8007bf4 <pbuf_alloc+0x1dc>)
 8007aec:	f008 fc28 	bl	8010340 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007af2:	3303      	adds	r3, #3
 8007af4:	f023 0303 	bic.w	r3, r3, #3
 8007af8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007afc:	d106      	bne.n	8007b0c <pbuf_alloc+0xf4>
 8007afe:	4b3b      	ldr	r3, [pc, #236]	; (8007bec <pbuf_alloc+0x1d4>)
 8007b00:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007b04:	493c      	ldr	r1, [pc, #240]	; (8007bf8 <pbuf_alloc+0x1e0>)
 8007b06:	483b      	ldr	r0, [pc, #236]	; (8007bf4 <pbuf_alloc+0x1dc>)
 8007b08:	f008 fc1a 	bl	8010340 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
 8007b16:	e002      	b.n	8007b1e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007b22:	8b7a      	ldrh	r2, [r7, #26]
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007b2e:	8b7b      	ldrh	r3, [r7, #26]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d19e      	bne.n	8007a72 <pbuf_alloc+0x5a>
      break;
 8007b34:	e055      	b.n	8007be2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007b36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b38:	3303      	adds	r3, #3
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f023 0303 	bic.w	r3, r3, #3
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	88bb      	ldrh	r3, [r7, #4]
 8007b44:	3303      	adds	r3, #3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007b52:	8b3b      	ldrh	r3, [r7, #24]
 8007b54:	3310      	adds	r3, #16
 8007b56:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b58:	8b3a      	ldrh	r2, [r7, #24]
 8007b5a:	88bb      	ldrh	r3, [r7, #4]
 8007b5c:	3303      	adds	r3, #3
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d306      	bcc.n	8007b74 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007b66:	8afa      	ldrh	r2, [r7, #22]
 8007b68:	88bb      	ldrh	r3, [r7, #4]
 8007b6a:	3303      	adds	r3, #3
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d201      	bcs.n	8007b78 <pbuf_alloc+0x160>
        return NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e035      	b.n	8007be4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007b78:	8afb      	ldrh	r3, [r7, #22]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fa84 	bl	8007088 <mem_malloc>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <pbuf_alloc+0x174>
        return NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e02b      	b.n	8007be4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b8e:	3310      	adds	r3, #16
 8007b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b92:	4413      	add	r3, r2
 8007b94:	3303      	adds	r3, #3
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	88b9      	ldrh	r1, [r7, #4]
 8007b9e:	88ba      	ldrh	r2, [r7, #4]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	887b      	ldrh	r3, [r7, #2]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4601      	mov	r1, r0
 8007bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bae:	f7ff ff09 	bl	80079c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d010      	beq.n	8007be0 <pbuf_alloc+0x1c8>
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <pbuf_alloc+0x1d4>)
 8007bc0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007bc4:	490d      	ldr	r1, [pc, #52]	; (8007bfc <pbuf_alloc+0x1e4>)
 8007bc6:	480b      	ldr	r0, [pc, #44]	; (8007bf4 <pbuf_alloc+0x1dc>)
 8007bc8:	f008 fbba 	bl	8010340 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007bcc:	e008      	b.n	8007be0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <pbuf_alloc+0x1d4>)
 8007bd0:	f240 1227 	movw	r2, #295	; 0x127
 8007bd4:	490a      	ldr	r1, [pc, #40]	; (8007c00 <pbuf_alloc+0x1e8>)
 8007bd6:	4807      	ldr	r0, [pc, #28]	; (8007bf4 <pbuf_alloc+0x1dc>)
 8007bd8:	f008 fbb2 	bl	8010340 <iprintf>
      return NULL;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e001      	b.n	8007be4 <pbuf_alloc+0x1cc>
      break;
 8007be0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3728      	adds	r7, #40	; 0x28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	08011958 	.word	0x08011958
 8007bf0:	08011988 	.word	0x08011988
 8007bf4:	080119b8 	.word	0x080119b8
 8007bf8:	080119e0 	.word	0x080119e0
 8007bfc:	08011a14 	.word	0x08011a14
 8007c00:	08011a40 	.word	0x08011a40

08007c04 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	807b      	strh	r3, [r7, #2]
 8007c10:	4613      	mov	r3, r2
 8007c12:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007c14:	883b      	ldrh	r3, [r7, #0]
 8007c16:	2b41      	cmp	r3, #65	; 0x41
 8007c18:	d009      	beq.n	8007c2e <pbuf_alloc_reference+0x2a>
 8007c1a:	883b      	ldrh	r3, [r7, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d006      	beq.n	8007c2e <pbuf_alloc_reference+0x2a>
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <pbuf_alloc_reference+0x5c>)
 8007c22:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007c26:	490f      	ldr	r1, [pc, #60]	; (8007c64 <pbuf_alloc_reference+0x60>)
 8007c28:	480f      	ldr	r0, [pc, #60]	; (8007c68 <pbuf_alloc_reference+0x64>)
 8007c2a:	f008 fb89 	bl	8010340 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007c2e:	2007      	movs	r0, #7
 8007c30:	f7ff fb98 	bl	8007364 <memp_malloc>
 8007c34:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e00b      	b.n	8007c58 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007c40:	8879      	ldrh	r1, [r7, #2]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	2300      	movs	r3, #0
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	883b      	ldrh	r3, [r7, #0]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff feb7 	bl	80079c4 <pbuf_init_alloced_pbuf>
  return p;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	08011958 	.word	0x08011958
 8007c64:	08011a5c 	.word	0x08011a5c
 8007c68:	080119b8 	.word	0x080119b8

08007c6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	81bb      	strh	r3, [r7, #12]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007c84:	8a7b      	ldrh	r3, [r7, #18]
 8007c86:	3303      	adds	r3, #3
 8007c88:	f023 0203 	bic.w	r2, r3, #3
 8007c8c:	89bb      	ldrh	r3, [r7, #12]
 8007c8e:	441a      	add	r2, r3
 8007c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d901      	bls.n	8007c9a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e018      	b.n	8007ccc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007ca0:	8a7b      	ldrh	r3, [r7, #18]
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	f023 0303 	bic.w	r3, r3, #3
 8007ca8:	6a3a      	ldr	r2, [r7, #32]
 8007caa:	4413      	add	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e001      	b.n	8007cb4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	89b9      	ldrh	r1, [r7, #12]
 8007cb8:	89ba      	ldrh	r2, [r7, #12]
 8007cba:	2302      	movs	r3, #2
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	897b      	ldrh	r3, [r7, #10]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	f7ff fe7d 	bl	80079c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007cca:	687b      	ldr	r3, [r7, #4]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <pbuf_realloc+0x20>
 8007ce6:	4b3a      	ldr	r3, [pc, #232]	; (8007dd0 <pbuf_realloc+0xfc>)
 8007ce8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007cec:	4939      	ldr	r1, [pc, #228]	; (8007dd4 <pbuf_realloc+0x100>)
 8007cee:	483a      	ldr	r0, [pc, #232]	; (8007dd8 <pbuf_realloc+0x104>)
 8007cf0:	f008 fb26 	bl	8010340 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	891b      	ldrh	r3, [r3, #8]
 8007cf8:	887a      	ldrh	r2, [r7, #2]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d263      	bcs.n	8007dc6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	891a      	ldrh	r2, [r3, #8]
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007d08:	887b      	ldrh	r3, [r7, #2]
 8007d0a:	817b      	strh	r3, [r7, #10]
  q = p;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007d10:	e018      	b.n	8007d44 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	895b      	ldrh	r3, [r3, #10]
 8007d16:	897a      	ldrh	r2, [r7, #10]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	891a      	ldrh	r2, [r3, #8]
 8007d20:	893b      	ldrh	r3, [r7, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <pbuf_realloc+0x70>
 8007d36:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <pbuf_realloc+0xfc>)
 8007d38:	f240 12af 	movw	r2, #431	; 0x1af
 8007d3c:	4927      	ldr	r1, [pc, #156]	; (8007ddc <pbuf_realloc+0x108>)
 8007d3e:	4826      	ldr	r0, [pc, #152]	; (8007dd8 <pbuf_realloc+0x104>)
 8007d40:	f008 fafe 	bl	8010340 <iprintf>
  while (rem_len > q->len) {
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	895b      	ldrh	r3, [r3, #10]
 8007d48:	897a      	ldrh	r2, [r7, #10]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d8e1      	bhi.n	8007d12 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	7b1b      	ldrb	r3, [r3, #12]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d121      	bne.n	8007d9e <pbuf_realloc+0xca>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	895b      	ldrh	r3, [r3, #10]
 8007d5e:	897a      	ldrh	r2, [r7, #10]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d01c      	beq.n	8007d9e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7b5b      	ldrb	r3, [r3, #13]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d116      	bne.n	8007d9e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	897b      	ldrh	r3, [r7, #10]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4619      	mov	r1, r3
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff f884 	bl	8006e90 <mem_trim>
 8007d88:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d106      	bne.n	8007d9e <pbuf_realloc+0xca>
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <pbuf_realloc+0xfc>)
 8007d92:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007d96:	4912      	ldr	r1, [pc, #72]	; (8007de0 <pbuf_realloc+0x10c>)
 8007d98:	480f      	ldr	r0, [pc, #60]	; (8007dd8 <pbuf_realloc+0x104>)
 8007d9a:	f008 fad1 	bl	8010340 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	897a      	ldrh	r2, [r7, #10]
 8007da2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	895a      	ldrh	r2, [r3, #10]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 f911 	bl	8007fe0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e000      	b.n	8007dc8 <pbuf_realloc+0xf4>
    return;
 8007dc6:	bf00      	nop

}
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08011958 	.word	0x08011958
 8007dd4:	08011a70 	.word	0x08011a70
 8007dd8:	080119b8 	.word	0x080119b8
 8007ddc:	08011a88 	.word	0x08011a88
 8007de0:	08011aa0 	.word	0x08011aa0

08007de4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <pbuf_add_header_impl+0x22>
 8007df8:	4b2b      	ldr	r3, [pc, #172]	; (8007ea8 <pbuf_add_header_impl+0xc4>)
 8007dfa:	f240 12df 	movw	r2, #479	; 0x1df
 8007dfe:	492b      	ldr	r1, [pc, #172]	; (8007eac <pbuf_add_header_impl+0xc8>)
 8007e00:	482b      	ldr	r0, [pc, #172]	; (8007eb0 <pbuf_add_header_impl+0xcc>)
 8007e02:	f008 fa9d 	bl	8010340 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <pbuf_add_header_impl+0x30>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e12:	d301      	bcc.n	8007e18 <pbuf_add_header_impl+0x34>
    return 1;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e043      	b.n	8007ea0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <pbuf_add_header_impl+0x3e>
    return 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e03e      	b.n	8007ea0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	891a      	ldrh	r2, [r3, #8]
 8007e2a:	8a7b      	ldrh	r3, [r7, #18]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8a7a      	ldrh	r2, [r7, #18]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d901      	bls.n	8007e3a <pbuf_add_header_impl+0x56>
    return 1;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e032      	b.n	8007ea0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	7b1b      	ldrb	r3, [r3, #12]
 8007e3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007e40:	8a3b      	ldrh	r3, [r7, #16]
 8007e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	425b      	negs	r3, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3310      	adds	r3, #16
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d20d      	bcs.n	8007e7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e01d      	b.n	8007ea0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d006      	beq.n	8007e78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	425b      	negs	r3, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	e001      	b.n	8007e7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e011      	b.n	8007ea0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	895a      	ldrh	r2, [r3, #10]
 8007e86:	8a7b      	ldrh	r3, [r7, #18]
 8007e88:	4413      	add	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	891a      	ldrh	r2, [r3, #8]
 8007e94:	8a7b      	ldrh	r3, [r7, #18]
 8007e96:	4413      	add	r3, r2
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	811a      	strh	r2, [r3, #8]


  return 0;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08011958 	.word	0x08011958
 8007eac:	08011abc 	.word	0x08011abc
 8007eb0:	080119b8 	.word	0x080119b8

08007eb4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff ff8e 	bl	8007de4 <pbuf_add_header_impl>
 8007ec8:	4603      	mov	r3, r0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <pbuf_remove_header+0x1e>
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <pbuf_remove_header+0x94>)
 8007ee6:	f240 224b 	movw	r2, #587	; 0x24b
 8007eea:	4920      	ldr	r1, [pc, #128]	; (8007f6c <pbuf_remove_header+0x98>)
 8007eec:	4820      	ldr	r0, [pc, #128]	; (8007f70 <pbuf_remove_header+0x9c>)
 8007eee:	f008 fa27 	bl	8010340 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <pbuf_remove_header+0x2c>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d301      	bcc.n	8007f04 <pbuf_remove_header+0x30>
    return 1;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e02c      	b.n	8007f5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <pbuf_remove_header+0x3a>
    return 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e027      	b.n	8007f5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	895b      	ldrh	r3, [r3, #10]
 8007f16:	89fa      	ldrh	r2, [r7, #14]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d908      	bls.n	8007f2e <pbuf_remove_header+0x5a>
 8007f1c:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <pbuf_remove_header+0x94>)
 8007f1e:	f240 2255 	movw	r2, #597	; 0x255
 8007f22:	4914      	ldr	r1, [pc, #80]	; (8007f74 <pbuf_remove_header+0xa0>)
 8007f24:	4812      	ldr	r0, [pc, #72]	; (8007f70 <pbuf_remove_header+0x9c>)
 8007f26:	f008 fa0b 	bl	8010340 <iprintf>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e017      	b.n	8007f5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	441a      	add	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	895a      	ldrh	r2, [r3, #10]
 8007f44:	89fb      	ldrh	r3, [r7, #14]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	891a      	ldrh	r2, [r3, #8]
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	08011958 	.word	0x08011958
 8007f6c:	08011abc 	.word	0x08011abc
 8007f70:	080119b8 	.word	0x080119b8
 8007f74:	08011ac8 	.word	0x08011ac8

08007f78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
 8007f84:	4613      	mov	r3, r2
 8007f86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da08      	bge.n	8007fa2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007f90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f94:	425b      	negs	r3, r3
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff9b 	bl	8007ed4 <pbuf_remove_header>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	e007      	b.n	8007fb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007fa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fa6:	787a      	ldrb	r2, [r7, #1]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff ff1a 	bl	8007de4 <pbuf_add_header_impl>
 8007fb0:	4603      	mov	r3, r0
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff ffd2 	bl	8007f78 <pbuf_header_impl>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <pbuf_free+0x22>
 8007ff4:	4b38      	ldr	r3, [pc, #224]	; (80080d8 <pbuf_free+0xf8>)
 8007ff6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007ffa:	4938      	ldr	r1, [pc, #224]	; (80080dc <pbuf_free+0xfc>)
 8007ffc:	4838      	ldr	r0, [pc, #224]	; (80080e0 <pbuf_free+0x100>)
 8007ffe:	f008 f99f 	bl	8010340 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008002:	2300      	movs	r3, #0
 8008004:	e063      	b.n	80080ce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800800a:	e05c      	b.n	80080c6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7b9b      	ldrb	r3, [r3, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <pbuf_free+0x42>
 8008014:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <pbuf_free+0xf8>)
 8008016:	f240 22f1 	movw	r2, #753	; 0x2f1
 800801a:	4932      	ldr	r1, [pc, #200]	; (80080e4 <pbuf_free+0x104>)
 800801c:	4830      	ldr	r0, [pc, #192]	; (80080e0 <pbuf_free+0x100>)
 800801e:	f008 f98f 	bl	8010340 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7b9b      	ldrb	r3, [r3, #14]
 8008026:	3b01      	subs	r3, #1
 8008028:	b2da      	uxtb	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	739a      	strb	r2, [r3, #14]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	7b9b      	ldrb	r3, [r3, #14]
 8008032:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008034:	7dbb      	ldrb	r3, [r7, #22]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d143      	bne.n	80080c2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7b1b      	ldrb	r3, [r3, #12]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7b5b      	ldrb	r3, [r3, #13]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d011      	beq.n	800807a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <pbuf_free+0x90>
 8008062:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <pbuf_free+0xf8>)
 8008064:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008068:	491f      	ldr	r1, [pc, #124]	; (80080e8 <pbuf_free+0x108>)
 800806a:	481d      	ldr	r0, [pc, #116]	; (80080e0 <pbuf_free+0x100>)
 800806c:	f008 f968 	bl	8010340 <iprintf>
        pc->custom_free_function(p);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
 8008078:	e01d      	b.n	80080b6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d104      	bne.n	800808a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	2008      	movs	r0, #8
 8008084:	f7ff f9ba 	bl	80073fc <memp_free>
 8008088:	e015      	b.n	80080b6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d104      	bne.n	800809a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	2007      	movs	r0, #7
 8008094:	f7ff f9b2 	bl	80073fc <memp_free>
 8008098:	e00d      	b.n	80080b6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d103      	bne.n	80080a8 <pbuf_free+0xc8>
          mem_free(p);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fe fe8b 	bl	8006dbc <mem_free>
 80080a6:	e006      	b.n	80080b6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <pbuf_free+0xf8>)
 80080aa:	f240 320f 	movw	r2, #783	; 0x30f
 80080ae:	490f      	ldr	r1, [pc, #60]	; (80080ec <pbuf_free+0x10c>)
 80080b0:	480b      	ldr	r0, [pc, #44]	; (80080e0 <pbuf_free+0x100>)
 80080b2:	f008 f945 	bl	8010340 <iprintf>
        }
      }
      count++;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	3301      	adds	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	e001      	b.n	80080c6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d19f      	bne.n	800800c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	08011958 	.word	0x08011958
 80080dc:	08011abc 	.word	0x08011abc
 80080e0:	080119b8 	.word	0x080119b8
 80080e4:	08011ae8 	.word	0x08011ae8
 80080e8:	08011b00 	.word	0x08011b00
 80080ec:	08011b24 	.word	0x08011b24

080080f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80080fc:	e005      	b.n	800810a <pbuf_clen+0x1a>
    ++len;
 80080fe:	89fb      	ldrh	r3, [r7, #14]
 8008100:	3301      	adds	r3, #1
 8008102:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f6      	bne.n	80080fe <pbuf_clen+0xe>
  }
  return len;
 8008110:	89fb      	ldrh	r3, [r7, #14]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7b9b      	ldrb	r3, [r3, #14]
 8008132:	3301      	adds	r3, #1
 8008134:	b2da      	uxtb	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7b9b      	ldrb	r3, [r3, #14]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <pbuf_ref+0x30>
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <pbuf_ref+0x38>)
 8008144:	f240 3242 	movw	r2, #834	; 0x342
 8008148:	4904      	ldr	r1, [pc, #16]	; (800815c <pbuf_ref+0x3c>)
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <pbuf_ref+0x40>)
 800814c:	f008 f8f8 	bl	8010340 <iprintf>
  }
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	08011958 	.word	0x08011958
 800815c:	08011b38 	.word	0x08011b38
 8008160:	080119b8 	.word	0x080119b8

08008164 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <pbuf_cat+0x16>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <pbuf_cat+0x26>
 800817a:	4b20      	ldr	r3, [pc, #128]	; (80081fc <pbuf_cat+0x98>)
 800817c:	f240 3259 	movw	r2, #857	; 0x359
 8008180:	491f      	ldr	r1, [pc, #124]	; (8008200 <pbuf_cat+0x9c>)
 8008182:	4820      	ldr	r0, [pc, #128]	; (8008204 <pbuf_cat+0xa0>)
 8008184:	f008 f8dc 	bl	8010340 <iprintf>
 8008188:	e034      	b.n	80081f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	e00a      	b.n	80081a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	891a      	ldrh	r2, [r3, #8]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	891b      	ldrh	r3, [r3, #8]
 8008198:	4413      	add	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f0      	bne.n	8008190 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	891a      	ldrh	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	895b      	ldrh	r3, [r3, #10]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d006      	beq.n	80081c8 <pbuf_cat+0x64>
 80081ba:	4b10      	ldr	r3, [pc, #64]	; (80081fc <pbuf_cat+0x98>)
 80081bc:	f240 3262 	movw	r2, #866	; 0x362
 80081c0:	4911      	ldr	r1, [pc, #68]	; (8008208 <pbuf_cat+0xa4>)
 80081c2:	4810      	ldr	r0, [pc, #64]	; (8008204 <pbuf_cat+0xa0>)
 80081c4:	f008 f8bc 	bl	8010340 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <pbuf_cat+0x7a>
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <pbuf_cat+0x98>)
 80081d2:	f240 3263 	movw	r2, #867	; 0x363
 80081d6:	490d      	ldr	r1, [pc, #52]	; (800820c <pbuf_cat+0xa8>)
 80081d8:	480a      	ldr	r0, [pc, #40]	; (8008204 <pbuf_cat+0xa0>)
 80081da:	f008 f8b1 	bl	8010340 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	891a      	ldrh	r2, [r3, #8]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	891b      	ldrh	r3, [r3, #8]
 80081e6:	4413      	add	r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	08011958 	.word	0x08011958
 8008200:	08011b4c 	.word	0x08011b4c
 8008204:	080119b8 	.word	0x080119b8
 8008208:	08011b84 	.word	0x08011b84
 800820c:	08011bb4 	.word	0x08011bb4

08008210 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d008      	beq.n	800823a <pbuf_copy+0x2a>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <pbuf_copy+0x2a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	891a      	ldrh	r2, [r3, #8]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	891b      	ldrh	r3, [r3, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	d209      	bcs.n	800824e <pbuf_copy+0x3e>
 800823a:	4b57      	ldr	r3, [pc, #348]	; (8008398 <pbuf_copy+0x188>)
 800823c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008240:	4956      	ldr	r1, [pc, #344]	; (800839c <pbuf_copy+0x18c>)
 8008242:	4857      	ldr	r0, [pc, #348]	; (80083a0 <pbuf_copy+0x190>)
 8008244:	f008 f87c 	bl	8010340 <iprintf>
 8008248:	f06f 030f 	mvn.w	r3, #15
 800824c:	e09f      	b.n	800838e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	895b      	ldrh	r3, [r3, #10]
 8008252:	461a      	mov	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	895b      	ldrh	r3, [r3, #10]
 800825c:	4619      	mov	r1, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1acb      	subs	r3, r1, r3
 8008262:	429a      	cmp	r2, r3
 8008264:	d306      	bcc.n	8008274 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	895b      	ldrh	r3, [r3, #10]
 800826a:	461a      	mov	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e005      	b.n	8008280 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	895b      	ldrh	r3, [r3, #10]
 8008278:	461a      	mov	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	18d0      	adds	r0, r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4413      	add	r3, r2
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4619      	mov	r1, r3
 8008294:	f008 f83e 	bl	8010314 <memcpy>
    offset_to += len;
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	895b      	ldrh	r3, [r3, #10]
 80082ac:	461a      	mov	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d906      	bls.n	80082c2 <pbuf_copy+0xb2>
 80082b4:	4b38      	ldr	r3, [pc, #224]	; (8008398 <pbuf_copy+0x188>)
 80082b6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80082ba:	493a      	ldr	r1, [pc, #232]	; (80083a4 <pbuf_copy+0x194>)
 80082bc:	4838      	ldr	r0, [pc, #224]	; (80083a0 <pbuf_copy+0x190>)
 80082be:	f008 f83f 	bl	8010340 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	895b      	ldrh	r3, [r3, #10]
 80082c6:	461a      	mov	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d906      	bls.n	80082dc <pbuf_copy+0xcc>
 80082ce:	4b32      	ldr	r3, [pc, #200]	; (8008398 <pbuf_copy+0x188>)
 80082d0:	f240 32da 	movw	r2, #986	; 0x3da
 80082d4:	4934      	ldr	r1, [pc, #208]	; (80083a8 <pbuf_copy+0x198>)
 80082d6:	4832      	ldr	r0, [pc, #200]	; (80083a0 <pbuf_copy+0x190>)
 80082d8:	f008 f832 	bl	8010340 <iprintf>
    if (offset_from >= p_from->len) {
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	895b      	ldrh	r3, [r3, #10]
 80082e0:	461a      	mov	r2, r3
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d304      	bcc.n	80082f2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	895b      	ldrh	r3, [r3, #10]
 80082f6:	461a      	mov	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d114      	bne.n	8008328 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10c      	bne.n	8008328 <pbuf_copy+0x118>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <pbuf_copy+0x118>
 8008314:	4b20      	ldr	r3, [pc, #128]	; (8008398 <pbuf_copy+0x188>)
 8008316:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800831a:	4924      	ldr	r1, [pc, #144]	; (80083ac <pbuf_copy+0x19c>)
 800831c:	4820      	ldr	r0, [pc, #128]	; (80083a0 <pbuf_copy+0x190>)
 800831e:	f008 f80f 	bl	8010340 <iprintf>
 8008322:	f06f 030f 	mvn.w	r3, #15
 8008326:	e032      	b.n	800838e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d013      	beq.n	8008356 <pbuf_copy+0x146>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	895a      	ldrh	r2, [r3, #10]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	891b      	ldrh	r3, [r3, #8]
 8008336:	429a      	cmp	r2, r3
 8008338:	d10d      	bne.n	8008356 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <pbuf_copy+0x146>
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <pbuf_copy+0x188>)
 8008344:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008348:	4919      	ldr	r1, [pc, #100]	; (80083b0 <pbuf_copy+0x1a0>)
 800834a:	4815      	ldr	r0, [pc, #84]	; (80083a0 <pbuf_copy+0x190>)
 800834c:	f007 fff8 	bl	8010340 <iprintf>
 8008350:	f06f 0305 	mvn.w	r3, #5
 8008354:	e01b      	b.n	800838e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <pbuf_copy+0x174>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	895a      	ldrh	r2, [r3, #10]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	891b      	ldrh	r3, [r3, #8]
 8008364:	429a      	cmp	r2, r3
 8008366:	d10d      	bne.n	8008384 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <pbuf_copy+0x174>
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <pbuf_copy+0x188>)
 8008372:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008376:	490e      	ldr	r1, [pc, #56]	; (80083b0 <pbuf_copy+0x1a0>)
 8008378:	4809      	ldr	r0, [pc, #36]	; (80083a0 <pbuf_copy+0x190>)
 800837a:	f007 ffe1 	bl	8010340 <iprintf>
 800837e:	f06f 0305 	mvn.w	r3, #5
 8008382:	e004      	b.n	800838e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f47f af61 	bne.w	800824e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	08011958 	.word	0x08011958
 800839c:	08011c00 	.word	0x08011c00
 80083a0:	080119b8 	.word	0x080119b8
 80083a4:	08011c30 	.word	0x08011c30
 80083a8:	08011c48 	.word	0x08011c48
 80083ac:	08011c64 	.word	0x08011c64
 80083b0:	08011c74 	.word	0x08011c74

080083b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	460b      	mov	r3, r1
 80083c4:	80fb      	strh	r3, [r7, #6]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d108      	bne.n	80083ea <pbuf_copy_partial+0x36>
 80083d8:	4b2b      	ldr	r3, [pc, #172]	; (8008488 <pbuf_copy_partial+0xd4>)
 80083da:	f240 420a 	movw	r2, #1034	; 0x40a
 80083de:	492b      	ldr	r1, [pc, #172]	; (800848c <pbuf_copy_partial+0xd8>)
 80083e0:	482b      	ldr	r0, [pc, #172]	; (8008490 <pbuf_copy_partial+0xdc>)
 80083e2:	f007 ffad 	bl	8010340 <iprintf>
 80083e6:	2300      	movs	r3, #0
 80083e8:	e04a      	b.n	8008480 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <pbuf_copy_partial+0x4e>
 80083f0:	4b25      	ldr	r3, [pc, #148]	; (8008488 <pbuf_copy_partial+0xd4>)
 80083f2:	f240 420b 	movw	r2, #1035	; 0x40b
 80083f6:	4927      	ldr	r1, [pc, #156]	; (8008494 <pbuf_copy_partial+0xe0>)
 80083f8:	4825      	ldr	r0, [pc, #148]	; (8008490 <pbuf_copy_partial+0xdc>)
 80083fa:	f007 ffa1 	bl	8010340 <iprintf>
 80083fe:	2300      	movs	r3, #0
 8008400:	e03e      	b.n	8008480 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e034      	b.n	8008472 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008408:	88bb      	ldrh	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <pbuf_copy_partial+0x70>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	895b      	ldrh	r3, [r3, #10]
 8008412:	88ba      	ldrh	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d305      	bcc.n	8008424 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	895b      	ldrh	r3, [r3, #10]
 800841c:	88ba      	ldrh	r2, [r7, #4]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	80bb      	strh	r3, [r7, #4]
 8008422:	e023      	b.n	800846c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	895a      	ldrh	r2, [r3, #10]
 8008428:	88bb      	ldrh	r3, [r7, #4]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800842e:	8b3a      	ldrh	r2, [r7, #24]
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	429a      	cmp	r2, r3
 8008434:	d901      	bls.n	800843a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800843a:	8b7b      	ldrh	r3, [r7, #26]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	18d0      	adds	r0, r2, r3
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	88bb      	ldrh	r3, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	8b3a      	ldrh	r2, [r7, #24]
 800844a:	4619      	mov	r1, r3
 800844c:	f007 ff62 	bl	8010314 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008450:	8afa      	ldrh	r2, [r7, #22]
 8008452:	8b3b      	ldrh	r3, [r7, #24]
 8008454:	4413      	add	r3, r2
 8008456:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008458:	8b7a      	ldrh	r2, [r7, #26]
 800845a:	8b3b      	ldrh	r3, [r7, #24]
 800845c:	4413      	add	r3, r2
 800845e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	8b3b      	ldrh	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <pbuf_copy_partial+0xca>
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1c4      	bne.n	8008408 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800847e:	8afb      	ldrh	r3, [r7, #22]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	08011958 	.word	0x08011958
 800848c:	08011ca0 	.word	0x08011ca0
 8008490:	080119b8 	.word	0x080119b8
 8008494:	08011cc0 	.word	0x08011cc0

08008498 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	603a      	str	r2, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
 80084a4:	460b      	mov	r3, r1
 80084a6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	8919      	ldrh	r1, [r3, #8]
 80084ac:	88ba      	ldrh	r2, [r7, #4]
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fab1 	bl	8007a18 <pbuf_alloc>
 80084b6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <pbuf_clone+0x2a>
    return NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	e011      	b.n	80084e6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fea3 	bl	8008210 <pbuf_copy>
 80084ca:	4603      	mov	r3, r0
 80084cc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80084ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d006      	beq.n	80084e4 <pbuf_clone+0x4c>
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <pbuf_clone+0x58>)
 80084d8:	f240 5224 	movw	r2, #1316	; 0x524
 80084dc:	4905      	ldr	r1, [pc, #20]	; (80084f4 <pbuf_clone+0x5c>)
 80084de:	4806      	ldr	r0, [pc, #24]	; (80084f8 <pbuf_clone+0x60>)
 80084e0:	f007 ff2e 	bl	8010340 <iprintf>
  return q;
 80084e4:	68fb      	ldr	r3, [r7, #12]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	08011958 	.word	0x08011958
 80084f4:	08011dcc 	.word	0x08011dcc
 80084f8:	080119b8 	.word	0x080119b8

080084fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008500:	f007 ff36 	bl	8010370 <rand>
 8008504:	4603      	mov	r3, r0
 8008506:	b29b      	uxth	r3, r3
 8008508:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800850c:	b29b      	uxth	r3, r3
 800850e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008512:	b29a      	uxth	r2, r3
 8008514:	4b01      	ldr	r3, [pc, #4]	; (800851c <tcp_init+0x20>)
 8008516:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008518:	bf00      	nop
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000000a 	.word	0x2000000a

08008520 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d105      	bne.n	800853c <tcp_free+0x1c>
 8008530:	4b06      	ldr	r3, [pc, #24]	; (800854c <tcp_free+0x2c>)
 8008532:	22d4      	movs	r2, #212	; 0xd4
 8008534:	4906      	ldr	r1, [pc, #24]	; (8008550 <tcp_free+0x30>)
 8008536:	4807      	ldr	r0, [pc, #28]	; (8008554 <tcp_free+0x34>)
 8008538:	f007 ff02 	bl	8010340 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	2001      	movs	r0, #1
 8008540:	f7fe ff5c 	bl	80073fc <memp_free>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	08011e58 	.word	0x08011e58
 8008550:	08011e88 	.word	0x08011e88
 8008554:	08011e9c 	.word	0x08011e9c

08008558 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7d1b      	ldrb	r3, [r3, #20]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d105      	bne.n	8008574 <tcp_free_listen+0x1c>
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <tcp_free_listen+0x2c>)
 800856a:	22df      	movs	r2, #223	; 0xdf
 800856c:	4906      	ldr	r1, [pc, #24]	; (8008588 <tcp_free_listen+0x30>)
 800856e:	4807      	ldr	r0, [pc, #28]	; (800858c <tcp_free_listen+0x34>)
 8008570:	f007 fee6 	bl	8010340 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	2002      	movs	r0, #2
 8008578:	f7fe ff40 	bl	80073fc <memp_free>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	08011e58 	.word	0x08011e58
 8008588:	08011ec4 	.word	0x08011ec4
 800858c:	08011e9c 	.word	0x08011e9c

08008590 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008594:	f000 fea2 	bl	80092dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <tcp_tmr+0x28>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <tcp_tmr+0x28>)
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <tcp_tmr+0x28>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80085b0:	f000 fb54 	bl	8008c5c <tcp_slowtmr>
  }
}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200000c9 	.word	0x200000c9

080085bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <tcp_remove_listener+0x1c>
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <tcp_remove_listener+0x48>)
 80085ce:	22ff      	movs	r2, #255	; 0xff
 80085d0:	490d      	ldr	r1, [pc, #52]	; (8008608 <tcp_remove_listener+0x4c>)
 80085d2:	480e      	ldr	r0, [pc, #56]	; (800860c <tcp_remove_listener+0x50>)
 80085d4:	f007 feb4 	bl	8010340 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e00a      	b.n	80085f4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d102      	bne.n	80085ee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f1      	bne.n	80085de <tcp_remove_listener+0x22>
    }
  }
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08011e58 	.word	0x08011e58
 8008608:	08011ee0 	.word	0x08011ee0
 800860c:	08011e9c 	.word	0x08011e9c

08008610 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <tcp_listen_closed+0x1c>
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <tcp_listen_closed+0x60>)
 8008620:	f240 1211 	movw	r2, #273	; 0x111
 8008624:	4913      	ldr	r1, [pc, #76]	; (8008674 <tcp_listen_closed+0x64>)
 8008626:	4814      	ldr	r0, [pc, #80]	; (8008678 <tcp_listen_closed+0x68>)
 8008628:	f007 fe8a 	bl	8010340 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7d1b      	ldrb	r3, [r3, #20]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d006      	beq.n	8008642 <tcp_listen_closed+0x32>
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <tcp_listen_closed+0x60>)
 8008636:	f44f 7289 	mov.w	r2, #274	; 0x112
 800863a:	4910      	ldr	r1, [pc, #64]	; (800867c <tcp_listen_closed+0x6c>)
 800863c:	480e      	ldr	r0, [pc, #56]	; (8008678 <tcp_listen_closed+0x68>)
 800863e:	f007 fe7f 	bl	8010340 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008642:	2301      	movs	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	e00b      	b.n	8008660 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008648:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <tcp_listen_closed+0x70>)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff ffb1 	bl	80085bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d9f0      	bls.n	8008648 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	08011e58 	.word	0x08011e58
 8008674:	08011f08 	.word	0x08011f08
 8008678:	08011e9c 	.word	0x08011e9c
 800867c:	08011f14 	.word	0x08011f14
 8008680:	08013e34 	.word	0x08013e34

08008684 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008684:	b5b0      	push	{r4, r5, r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af04      	add	r7, sp, #16
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <tcp_close_shutdown+0x20>
 8008696:	4b63      	ldr	r3, [pc, #396]	; (8008824 <tcp_close_shutdown+0x1a0>)
 8008698:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800869c:	4962      	ldr	r1, [pc, #392]	; (8008828 <tcp_close_shutdown+0x1a4>)
 800869e:	4863      	ldr	r0, [pc, #396]	; (800882c <tcp_close_shutdown+0x1a8>)
 80086a0:	f007 fe4e 	bl	8010340 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d066      	beq.n	8008778 <tcp_close_shutdown+0xf4>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7d1b      	ldrb	r3, [r3, #20]
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d003      	beq.n	80086ba <tcp_close_shutdown+0x36>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7d1b      	ldrb	r3, [r3, #20]
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d15e      	bne.n	8008778 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <tcp_close_shutdown+0x48>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80086ca:	d055      	beq.n	8008778 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8b5b      	ldrh	r3, [r3, #26]
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <tcp_close_shutdown+0x62>
 80086d8:	4b52      	ldr	r3, [pc, #328]	; (8008824 <tcp_close_shutdown+0x1a0>)
 80086da:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80086de:	4954      	ldr	r1, [pc, #336]	; (8008830 <tcp_close_shutdown+0x1ac>)
 80086e0:	4852      	ldr	r0, [pc, #328]	; (800882c <tcp_close_shutdown+0x1a8>)
 80086e2:	f007 fe2d 	bl	8010340 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80086ee:	687d      	ldr	r5, [r7, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	8ad2      	ldrh	r2, [r2, #22]
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	8b09      	ldrh	r1, [r1, #24]
 80086fc:	9102      	str	r1, [sp, #8]
 80086fe:	9201      	str	r2, [sp, #4]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	462b      	mov	r3, r5
 8008704:	4622      	mov	r2, r4
 8008706:	4601      	mov	r1, r0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f004 fe8d 	bl	800d428 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 f8c6 	bl	80098a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008714:	4b47      	ldr	r3, [pc, #284]	; (8008834 <tcp_close_shutdown+0x1b0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d105      	bne.n	800872a <tcp_close_shutdown+0xa6>
 800871e:	4b45      	ldr	r3, [pc, #276]	; (8008834 <tcp_close_shutdown+0x1b0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	4a43      	ldr	r2, [pc, #268]	; (8008834 <tcp_close_shutdown+0x1b0>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	e013      	b.n	8008752 <tcp_close_shutdown+0xce>
 800872a:	4b42      	ldr	r3, [pc, #264]	; (8008834 <tcp_close_shutdown+0x1b0>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e00c      	b.n	800874c <tcp_close_shutdown+0xc8>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d104      	bne.n	8008746 <tcp_close_shutdown+0xc2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	60da      	str	r2, [r3, #12]
 8008744:	e005      	b.n	8008752 <tcp_close_shutdown+0xce>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1ef      	bne.n	8008732 <tcp_close_shutdown+0xae>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	4b37      	ldr	r3, [pc, #220]	; (8008838 <tcp_close_shutdown+0x1b4>)
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800875e:	4b37      	ldr	r3, [pc, #220]	; (800883c <tcp_close_shutdown+0x1b8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	429a      	cmp	r2, r3
 8008766:	d102      	bne.n	800876e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008768:	f003 fd5a 	bl	800c220 <tcp_trigger_input_pcb_close>
 800876c:	e002      	b.n	8008774 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fed6 	bl	8008520 <tcp_free>
      }
      return ERR_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e050      	b.n	800881a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d03b      	beq.n	80087f8 <tcp_close_shutdown+0x174>
 8008780:	2b02      	cmp	r3, #2
 8008782:	dc44      	bgt.n	800880e <tcp_close_shutdown+0x18a>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <tcp_close_shutdown+0x10a>
 8008788:	2b01      	cmp	r3, #1
 800878a:	d02a      	beq.n	80087e2 <tcp_close_shutdown+0x15e>
 800878c:	e03f      	b.n	800880e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8adb      	ldrh	r3, [r3, #22]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d021      	beq.n	80087da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008796:	4b2a      	ldr	r3, [pc, #168]	; (8008840 <tcp_close_shutdown+0x1bc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	429a      	cmp	r2, r3
 800879e:	d105      	bne.n	80087ac <tcp_close_shutdown+0x128>
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <tcp_close_shutdown+0x1bc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	4a26      	ldr	r2, [pc, #152]	; (8008840 <tcp_close_shutdown+0x1bc>)
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e013      	b.n	80087d4 <tcp_close_shutdown+0x150>
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <tcp_close_shutdown+0x1bc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	e00c      	b.n	80087ce <tcp_close_shutdown+0x14a>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d104      	bne.n	80087c8 <tcp_close_shutdown+0x144>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	e005      	b.n	80087d4 <tcp_close_shutdown+0x150>
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ef      	bne.n	80087b4 <tcp_close_shutdown+0x130>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fea0 	bl	8008520 <tcp_free>
      break;
 80087e0:	e01a      	b.n	8008818 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff ff14 	bl	8008610 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4816      	ldr	r0, [pc, #88]	; (8008844 <tcp_close_shutdown+0x1c0>)
 80087ec:	f001 f8a8 	bl	8009940 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff feb1 	bl	8008558 <tcp_free_listen>
      break;
 80087f6:	e00f      	b.n	8008818 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	480e      	ldr	r0, [pc, #56]	; (8008834 <tcp_close_shutdown+0x1b0>)
 80087fc:	f001 f8a0 	bl	8009940 <tcp_pcb_remove>
 8008800:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <tcp_close_shutdown+0x1b4>)
 8008802:	2201      	movs	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff fe8a 	bl	8008520 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800880c:	e004      	b.n	8008818 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f81a 	bl	8008848 <tcp_close_shutdown_fin>
 8008814:	4603      	mov	r3, r0
 8008816:	e000      	b.n	800881a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bdb0      	pop	{r4, r5, r7, pc}
 8008822:	bf00      	nop
 8008824:	08011e58 	.word	0x08011e58
 8008828:	08011f2c 	.word	0x08011f2c
 800882c:	08011e9c 	.word	0x08011e9c
 8008830:	08011f4c 	.word	0x08011f4c
 8008834:	20005b54 	.word	0x20005b54
 8008838:	20005b50 	.word	0x20005b50
 800883c:	20005b68 	.word	0x20005b68
 8008840:	20005b60 	.word	0x20005b60
 8008844:	20005b5c 	.word	0x20005b5c

08008848 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <tcp_close_shutdown_fin+0x1c>
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <tcp_close_shutdown_fin+0xc8>)
 8008858:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800885c:	492d      	ldr	r1, [pc, #180]	; (8008914 <tcp_close_shutdown_fin+0xcc>)
 800885e:	482e      	ldr	r0, [pc, #184]	; (8008918 <tcp_close_shutdown_fin+0xd0>)
 8008860:	f007 fd6e 	bl	8010340 <iprintf>

  switch (pcb->state) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7d1b      	ldrb	r3, [r3, #20]
 8008868:	2b07      	cmp	r3, #7
 800886a:	d020      	beq.n	80088ae <tcp_close_shutdown_fin+0x66>
 800886c:	2b07      	cmp	r3, #7
 800886e:	dc2b      	bgt.n	80088c8 <tcp_close_shutdown_fin+0x80>
 8008870:	2b03      	cmp	r3, #3
 8008872:	d002      	beq.n	800887a <tcp_close_shutdown_fin+0x32>
 8008874:	2b04      	cmp	r3, #4
 8008876:	d00d      	beq.n	8008894 <tcp_close_shutdown_fin+0x4c>
 8008878:	e026      	b.n	80088c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f003 fee2 	bl	800c644 <tcp_send_fin>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11f      	bne.n	80088cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2205      	movs	r2, #5
 8008890:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008892:	e01b      	b.n	80088cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f003 fed5 	bl	800c644 <tcp_send_fin>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800889e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d114      	bne.n	80088d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2205      	movs	r2, #5
 80088aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80088ac:	e010      	b.n	80088d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f003 fec8 	bl	800c644 <tcp_send_fin>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80088b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2209      	movs	r2, #9
 80088c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80088c6:	e005      	b.n	80088d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e01c      	b.n	8008906 <tcp_close_shutdown_fin+0xbe>
      break;
 80088cc:	bf00      	nop
 80088ce:	e002      	b.n	80088d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80088d0:	bf00      	nop
 80088d2:	e000      	b.n	80088d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80088d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80088d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f003 ffee 	bl	800c8c0 <tcp_output>
 80088e4:	e00d      	b.n	8008902 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80088e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d108      	bne.n	8008902 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8b5b      	ldrh	r3, [r3, #26]
 80088f4:	f043 0308 	orr.w	r3, r3, #8
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	e001      	b.n	8008906 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08011e58 	.word	0x08011e58
 8008914:	08011f08 	.word	0x08011f08
 8008918:	08011e9c 	.word	0x08011e9c

0800891c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <tcp_close+0x22>
 800892a:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <tcp_close+0x4c>)
 800892c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008930:	490e      	ldr	r1, [pc, #56]	; (800896c <tcp_close+0x50>)
 8008932:	480f      	ldr	r0, [pc, #60]	; (8008970 <tcp_close+0x54>)
 8008934:	f007 fd04 	bl	8010340 <iprintf>
 8008938:	f06f 030f 	mvn.w	r3, #15
 800893c:	e00f      	b.n	800895e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	7d1b      	ldrb	r3, [r3, #20]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d006      	beq.n	8008954 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8b5b      	ldrh	r3, [r3, #26]
 800894a:	f043 0310 	orr.w	r3, r3, #16
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008954:	2101      	movs	r1, #1
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fe94 	bl	8008684 <tcp_close_shutdown>
 800895c:	4603      	mov	r3, r0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	08011e58 	.word	0x08011e58
 800896c:	08011f68 	.word	0x08011f68
 8008970:	08011e9c 	.word	0x08011e9c

08008974 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08e      	sub	sp, #56	; 0x38
 8008978:	af04      	add	r7, sp, #16
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d107      	bne.n	8008994 <tcp_abandon+0x20>
 8008984:	4b52      	ldr	r3, [pc, #328]	; (8008ad0 <tcp_abandon+0x15c>)
 8008986:	f240 223d 	movw	r2, #573	; 0x23d
 800898a:	4952      	ldr	r1, [pc, #328]	; (8008ad4 <tcp_abandon+0x160>)
 800898c:	4852      	ldr	r0, [pc, #328]	; (8008ad8 <tcp_abandon+0x164>)
 800898e:	f007 fcd7 	bl	8010340 <iprintf>
 8008992:	e099      	b.n	8008ac8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <tcp_abandon+0x36>
 800899c:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <tcp_abandon+0x15c>)
 800899e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80089a2:	494e      	ldr	r1, [pc, #312]	; (8008adc <tcp_abandon+0x168>)
 80089a4:	484c      	ldr	r0, [pc, #304]	; (8008ad8 <tcp_abandon+0x164>)
 80089a6:	f007 fccb 	bl	8010340 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7d1b      	ldrb	r3, [r3, #20]
 80089ae:	2b0a      	cmp	r3, #10
 80089b0:	d107      	bne.n	80089c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	484a      	ldr	r0, [pc, #296]	; (8008ae0 <tcp_abandon+0x16c>)
 80089b6:	f000 ffc3 	bl	8009940 <tcp_pcb_remove>
    tcp_free(pcb);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fdb0 	bl	8008520 <tcp_free>
 80089c0:	e082      	b.n	8008ac8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7d1b      	ldrb	r3, [r3, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d126      	bne.n	8008a3a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8adb      	ldrh	r3, [r3, #22]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d02e      	beq.n	8008a52 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089f4:	4b3b      	ldr	r3, [pc, #236]	; (8008ae4 <tcp_abandon+0x170>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d105      	bne.n	8008a0a <tcp_abandon+0x96>
 80089fe:	4b39      	ldr	r3, [pc, #228]	; (8008ae4 <tcp_abandon+0x170>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	4a37      	ldr	r2, [pc, #220]	; (8008ae4 <tcp_abandon+0x170>)
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	e013      	b.n	8008a32 <tcp_abandon+0xbe>
 8008a0a:	4b36      	ldr	r3, [pc, #216]	; (8008ae4 <tcp_abandon+0x170>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e00c      	b.n	8008a2c <tcp_abandon+0xb8>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d104      	bne.n	8008a26 <tcp_abandon+0xb2>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	60da      	str	r2, [r3, #12]
 8008a24:	e005      	b.n	8008a32 <tcp_abandon+0xbe>
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ef      	bne.n	8008a12 <tcp_abandon+0x9e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	60da      	str	r2, [r3, #12]
 8008a38:	e00b      	b.n	8008a52 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8adb      	ldrh	r3, [r3, #22]
 8008a42:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4828      	ldr	r0, [pc, #160]	; (8008ae8 <tcp_abandon+0x174>)
 8008a48:	f000 ff7a 	bl	8009940 <tcp_pcb_remove>
 8008a4c:	4b27      	ldr	r3, [pc, #156]	; (8008aec <tcp_abandon+0x178>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fd1c 	bl	800949c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fd13 	bl	800949c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fd0a 	bl	800949c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	8b12      	ldrh	r2, [r2, #24]
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f004 fcbe 	bl	800d428 <tcp_rst>
    }
    last_state = pcb->state;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7d1b      	ldrb	r3, [r3, #20]
 8008ab0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fd34 	bl	8008520 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <tcp_abandon+0x154>
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f06f 010c 	mvn.w	r1, #12
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	4798      	blx	r3
  }
}
 8008ac8:	3728      	adds	r7, #40	; 0x28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	08011e58 	.word	0x08011e58
 8008ad4:	08011f9c 	.word	0x08011f9c
 8008ad8:	08011e9c 	.word	0x08011e9c
 8008adc:	08011fb8 	.word	0x08011fb8
 8008ae0:	20005b64 	.word	0x20005b64
 8008ae4:	20005b60 	.word	0x20005b60
 8008ae8:	20005b54 	.word	0x20005b54
 8008aec:	20005b50 	.word	0x20005b50

08008af0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008af8:	2101      	movs	r1, #1
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ff3a 	bl	8008974 <tcp_abandon>
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <tcp_update_rcv_ann_wnd+0x1c>
 8008b16:	4b25      	ldr	r3, [pc, #148]	; (8008bac <tcp_update_rcv_ann_wnd+0xa4>)
 8008b18:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008b1c:	4924      	ldr	r1, [pc, #144]	; (8008bb0 <tcp_update_rcv_ann_wnd+0xa8>)
 8008b1e:	4825      	ldr	r0, [pc, #148]	; (8008bb4 <tcp_update_rcv_ann_wnd+0xac>)
 8008b20:	f007 fc0e 	bl	8010340 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b2c:	4413      	add	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008b38:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008b3c:	bf28      	it	cs
 8008b3e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008b42:	b292      	uxth	r2, r2
 8008b44:	4413      	add	r3, r2
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	db08      	blt.n	8008b60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	e020      	b.n	8008ba2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd03      	ble.n	8008b76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b74:	e014      	b.n	8008ba0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b88:	d306      	bcc.n	8008b98 <tcp_update_rcv_ann_wnd+0x90>
 8008b8a:	4b08      	ldr	r3, [pc, #32]	; (8008bac <tcp_update_rcv_ann_wnd+0xa4>)
 8008b8c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008b90:	4909      	ldr	r1, [pc, #36]	; (8008bb8 <tcp_update_rcv_ann_wnd+0xb0>)
 8008b92:	4808      	ldr	r0, [pc, #32]	; (8008bb4 <tcp_update_rcv_ann_wnd+0xac>)
 8008b94:	f007 fbd4 	bl	8010340 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008ba0:	2300      	movs	r3, #0
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	08011e58 	.word	0x08011e58
 8008bb0:	080120b4 	.word	0x080120b4
 8008bb4:	08011e9c 	.word	0x08011e9c
 8008bb8:	080120d8 	.word	0x080120d8

08008bbc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d107      	bne.n	8008bde <tcp_recved+0x22>
 8008bce:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <tcp_recved+0x90>)
 8008bd0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008bd4:	491e      	ldr	r1, [pc, #120]	; (8008c50 <tcp_recved+0x94>)
 8008bd6:	481f      	ldr	r0, [pc, #124]	; (8008c54 <tcp_recved+0x98>)
 8008bd8:	f007 fbb2 	bl	8010340 <iprintf>
 8008bdc:	e032      	b.n	8008c44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	7d1b      	ldrb	r3, [r3, #20]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d106      	bne.n	8008bf4 <tcp_recved+0x38>
 8008be6:	4b19      	ldr	r3, [pc, #100]	; (8008c4c <tcp_recved+0x90>)
 8008be8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008bec:	491a      	ldr	r1, [pc, #104]	; (8008c58 <tcp_recved+0x9c>)
 8008bee:	4819      	ldr	r0, [pc, #100]	; (8008c54 <tcp_recved+0x98>)
 8008bf0:	f007 fba6 	bl	8010340 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bf8:	887b      	ldrh	r3, [r7, #2]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008bfe:	89fb      	ldrh	r3, [r7, #14]
 8008c00:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c04:	d804      	bhi.n	8008c10 <tcp_recved+0x54>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0a:	89fa      	ldrh	r2, [r7, #14]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d204      	bcs.n	8008c1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c16:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c18:	e002      	b.n	8008c20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	89fa      	ldrh	r2, [r7, #14]
 8008c1e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff ff71 	bl	8008b08 <tcp_update_rcv_ann_wnd>
 8008c26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c2e:	d309      	bcc.n	8008c44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8b5b      	ldrh	r3, [r3, #26]
 8008c34:	f043 0302 	orr.w	r3, r3, #2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f003 fe3e 	bl	800c8c0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08011e58 	.word	0x08011e58
 8008c50:	080120f4 	.word	0x080120f4
 8008c54:	08011e9c 	.word	0x08011e9c
 8008c58:	0801210c 	.word	0x0801210c

08008c5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008c5c:	b5b0      	push	{r4, r5, r7, lr}
 8008c5e:	b090      	sub	sp, #64	; 0x40
 8008c60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008c68:	4b94      	ldr	r3, [pc, #592]	; (8008ebc <tcp_slowtmr+0x260>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	4a93      	ldr	r2, [pc, #588]	; (8008ebc <tcp_slowtmr+0x260>)
 8008c70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008c72:	4b93      	ldr	r3, [pc, #588]	; (8008ec0 <tcp_slowtmr+0x264>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4b91      	ldr	r3, [pc, #580]	; (8008ec0 <tcp_slowtmr+0x264>)
 8008c7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008c82:	4b90      	ldr	r3, [pc, #576]	; (8008ec4 <tcp_slowtmr+0x268>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008c88:	e29f      	b.n	80091ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <tcp_slowtmr+0x44>
 8008c92:	4b8d      	ldr	r3, [pc, #564]	; (8008ec8 <tcp_slowtmr+0x26c>)
 8008c94:	f240 42be 	movw	r2, #1214	; 0x4be
 8008c98:	498c      	ldr	r1, [pc, #560]	; (8008ecc <tcp_slowtmr+0x270>)
 8008c9a:	488d      	ldr	r0, [pc, #564]	; (8008ed0 <tcp_slowtmr+0x274>)
 8008c9c:	f007 fb50 	bl	8010340 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	7d1b      	ldrb	r3, [r3, #20]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d106      	bne.n	8008cb6 <tcp_slowtmr+0x5a>
 8008ca8:	4b87      	ldr	r3, [pc, #540]	; (8008ec8 <tcp_slowtmr+0x26c>)
 8008caa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008cae:	4989      	ldr	r1, [pc, #548]	; (8008ed4 <tcp_slowtmr+0x278>)
 8008cb0:	4887      	ldr	r0, [pc, #540]	; (8008ed0 <tcp_slowtmr+0x274>)
 8008cb2:	f007 fb45 	bl	8010340 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	7d1b      	ldrb	r3, [r3, #20]
 8008cba:	2b0a      	cmp	r3, #10
 8008cbc:	d106      	bne.n	8008ccc <tcp_slowtmr+0x70>
 8008cbe:	4b82      	ldr	r3, [pc, #520]	; (8008ec8 <tcp_slowtmr+0x26c>)
 8008cc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008cc4:	4984      	ldr	r1, [pc, #528]	; (8008ed8 <tcp_slowtmr+0x27c>)
 8008cc6:	4882      	ldr	r0, [pc, #520]	; (8008ed0 <tcp_slowtmr+0x274>)
 8008cc8:	f007 fb3a 	bl	8010340 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	7f9a      	ldrb	r2, [r3, #30]
 8008cd0:	4b7b      	ldr	r3, [pc, #492]	; (8008ec0 <tcp_slowtmr+0x264>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d105      	bne.n	8008ce4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008ce2:	e272      	b.n	80091ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008ce4:	4b76      	ldr	r3, [pc, #472]	; (8008ec0 <tcp_slowtmr+0x264>)
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	7d1b      	ldrb	r3, [r3, #20]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d10a      	bne.n	8008d16 <tcp_slowtmr+0xba>
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	d905      	bls.n	8008d16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d14:	e11e      	b.n	8008f54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d1c:	2b0b      	cmp	r3, #11
 8008d1e:	d905      	bls.n	8008d2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d24:	3301      	adds	r3, #1
 8008d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d2a:	e113      	b.n	8008f54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d075      	beq.n	8008e22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <tcp_slowtmr+0xf0>
 8008d3e:	4b62      	ldr	r3, [pc, #392]	; (8008ec8 <tcp_slowtmr+0x26c>)
 8008d40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008d44:	4965      	ldr	r1, [pc, #404]	; (8008edc <tcp_slowtmr+0x280>)
 8008d46:	4862      	ldr	r0, [pc, #392]	; (8008ed0 <tcp_slowtmr+0x274>)
 8008d48:	f007 fafa 	bl	8010340 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d106      	bne.n	8008d62 <tcp_slowtmr+0x106>
 8008d54:	4b5c      	ldr	r3, [pc, #368]	; (8008ec8 <tcp_slowtmr+0x26c>)
 8008d56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008d5a:	4961      	ldr	r1, [pc, #388]	; (8008ee0 <tcp_slowtmr+0x284>)
 8008d5c:	485c      	ldr	r0, [pc, #368]	; (8008ed0 <tcp_slowtmr+0x274>)
 8008d5e:	f007 faef 	bl	8010340 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008d68:	2b0b      	cmp	r3, #11
 8008d6a:	d905      	bls.n	8008d78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d70:	3301      	adds	r3, #1
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d76:	e0ed      	b.n	8008f54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	4a58      	ldr	r2, [pc, #352]	; (8008ee4 <tcp_slowtmr+0x288>)
 8008d82:	5cd3      	ldrb	r3, [r2, r3]
 8008d84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008d8c:	7c7a      	ldrb	r2, [r7, #17]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d907      	bls.n	8008da2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008d98:	3301      	adds	r3, #1
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008da8:	7c7a      	ldrb	r2, [r7, #17]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	f200 80d2 	bhi.w	8008f54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008db0:	2301      	movs	r3, #1
 8008db2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d108      	bne.n	8008dd0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc0:	f004 fc26 	bl	800d610 <tcp_zero_window_probe>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d014      	beq.n	8008df4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008dca:	2300      	movs	r3, #0
 8008dcc:	623b      	str	r3, [r7, #32]
 8008dce:	e011      	b.n	8008df4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dda:	f003 faeb 	bl	800c3b4 <tcp_split_unsent_seg>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d107      	bne.n	8008df4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de6:	f003 fd6b 	bl	800c8c0 <tcp_output>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80ac 	beq.w	8008f54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e0a:	2b06      	cmp	r3, #6
 8008e0c:	f200 80a2 	bhi.w	8008f54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e16:	3301      	adds	r3, #1
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008e20:	e098      	b.n	8008f54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db0f      	blt.n	8008e4c <tcp_slowtmr+0x1f0>
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d008      	beq.n	8008e4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3301      	adds	r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	b21a      	sxth	r2, r3
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	db7b      	blt.n	8008f54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5e:	f004 f821 	bl	800cea4 <tcp_rexmit_rto_prepare>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <tcp_slowtmr+0x21c>
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d171      	bne.n	8008f54 <tcp_slowtmr+0x2f8>
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d06d      	beq.n	8008f54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	7d1b      	ldrb	r3, [r3, #20]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d03a      	beq.n	8008ef6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e86:	2b0c      	cmp	r3, #12
 8008e88:	bf28      	it	cs
 8008e8a:	230c      	movcs	r3, #12
 8008e8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008e94:	10db      	asrs	r3, r3, #3
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ea0:	4413      	add	r3, r2
 8008ea2:	7efa      	ldrb	r2, [r7, #27]
 8008ea4:	4910      	ldr	r1, [pc, #64]	; (8008ee8 <tcp_slowtmr+0x28c>)
 8008ea6:	5c8a      	ldrb	r2, [r1, r2]
 8008ea8:	4093      	lsls	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	dc1a      	bgt.n	8008eec <tcp_slowtmr+0x290>
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	b21a      	sxth	r2, r3
 8008eba:	e019      	b.n	8008ef0 <tcp_slowtmr+0x294>
 8008ebc:	20005b58 	.word	0x20005b58
 8008ec0:	200000ca 	.word	0x200000ca
 8008ec4:	20005b54 	.word	0x20005b54
 8008ec8:	08011e58 	.word	0x08011e58
 8008ecc:	0801219c 	.word	0x0801219c
 8008ed0:	08011e9c 	.word	0x08011e9c
 8008ed4:	080121c8 	.word	0x080121c8
 8008ed8:	080121f4 	.word	0x080121f4
 8008edc:	08012224 	.word	0x08012224
 8008ee0:	08012258 	.word	0x08012258
 8008ee4:	08013e2c 	.word	0x08013e2c
 8008ee8:	08013e1c 	.word	0x08013e1c
 8008eec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef8:	2200      	movs	r2, #0
 8008efa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	bf28      	it	cs
 8008f0c:	4613      	movcs	r3, r2
 8008f0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008f10:	8a7b      	ldrh	r3, [r7, #18]
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d206      	bcs.n	8008f3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f50:	f004 f818 	bl	800cf84 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	7d1b      	ldrb	r3, [r3, #20]
 8008f58:	2b06      	cmp	r3, #6
 8008f5a:	d111      	bne.n	8008f80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	8b5b      	ldrh	r3, [r3, #26]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f68:	4b9d      	ldr	r3, [pc, #628]	; (80091e0 <tcp_slowtmr+0x584>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b28      	cmp	r3, #40	; 0x28
 8008f74:	d904      	bls.n	8008f80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	7a5b      	ldrb	r3, [r3, #9]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d04c      	beq.n	8009026 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d003      	beq.n	8008f9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	d144      	bne.n	8009026 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f9c:	4b90      	ldr	r3, [pc, #576]	; (80091e0 <tcp_slowtmr+0x584>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008fb0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008fb4:	498b      	ldr	r1, [pc, #556]	; (80091e4 <tcp_slowtmr+0x588>)
 8008fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8008fba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d90a      	bls.n	8008fd6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fce:	3301      	adds	r3, #1
 8008fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fd4:	e027      	b.n	8009026 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008fd6:	4b82      	ldr	r3, [pc, #520]	; (80091e0 <tcp_slowtmr+0x584>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008fec:	4618      	mov	r0, r3
 8008fee:	4b7e      	ldr	r3, [pc, #504]	; (80091e8 <tcp_slowtmr+0x58c>)
 8008ff0:	fb03 f300 	mul.w	r3, r3, r0
 8008ff4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008ff6:	497b      	ldr	r1, [pc, #492]	; (80091e4 <tcp_slowtmr+0x588>)
 8008ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8008ffc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d911      	bls.n	8009026 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009004:	f004 fac4 	bl	800d590 <tcp_keepalive>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800900e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009012:	2b00      	cmp	r3, #0
 8009014:	d107      	bne.n	8009026 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800901c:	3301      	adds	r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902a:	2b00      	cmp	r3, #0
 800902c:	d011      	beq.n	8009052 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800902e:	4b6c      	ldr	r3, [pc, #432]	; (80091e0 <tcp_slowtmr+0x584>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800903e:	4619      	mov	r1, r3
 8009040:	460b      	mov	r3, r1
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	440b      	add	r3, r1
 8009046:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009048:	429a      	cmp	r2, r3
 800904a:	d302      	bcc.n	8009052 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800904c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904e:	f000 fddb 	bl	8009c08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	7d1b      	ldrb	r3, [r3, #20]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d10b      	bne.n	8009072 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800905a:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <tcp_slowtmr+0x584>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b28      	cmp	r3, #40	; 0x28
 8009066:	d904      	bls.n	8009072 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800906c:	3301      	adds	r3, #1
 800906e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	7d1b      	ldrb	r3, [r3, #20]
 8009076:	2b09      	cmp	r3, #9
 8009078:	d10b      	bne.n	8009092 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800907a:	4b59      	ldr	r3, [pc, #356]	; (80091e0 <tcp_slowtmr+0x584>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2bf0      	cmp	r3, #240	; 0xf0
 8009086:	d904      	bls.n	8009092 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800908c:	3301      	adds	r3, #1
 800908e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009096:	2b00      	cmp	r3, #0
 8009098:	d060      	beq.n	800915c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80090a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090a4:	f000 fbfc 	bl	80098a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80090ae:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <tcp_slowtmr+0x590>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d106      	bne.n	80090c6 <tcp_slowtmr+0x46a>
 80090b8:	4b4d      	ldr	r3, [pc, #308]	; (80091f0 <tcp_slowtmr+0x594>)
 80090ba:	f240 526d 	movw	r2, #1389	; 0x56d
 80090be:	494d      	ldr	r1, [pc, #308]	; (80091f4 <tcp_slowtmr+0x598>)
 80090c0:	484d      	ldr	r0, [pc, #308]	; (80091f8 <tcp_slowtmr+0x59c>)
 80090c2:	f007 f93d 	bl	8010340 <iprintf>
        prev->next = pcb->next;
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e00f      	b.n	80090f0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80090d0:	4b46      	ldr	r3, [pc, #280]	; (80091ec <tcp_slowtmr+0x590>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d006      	beq.n	80090e8 <tcp_slowtmr+0x48c>
 80090da:	4b45      	ldr	r3, [pc, #276]	; (80091f0 <tcp_slowtmr+0x594>)
 80090dc:	f240 5271 	movw	r2, #1393	; 0x571
 80090e0:	4946      	ldr	r1, [pc, #280]	; (80091fc <tcp_slowtmr+0x5a0>)
 80090e2:	4845      	ldr	r0, [pc, #276]	; (80091f8 <tcp_slowtmr+0x59c>)
 80090e4:	f007 f92c 	bl	8010340 <iprintf>
        tcp_active_pcbs = pcb->next;
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4a3f      	ldr	r2, [pc, #252]	; (80091ec <tcp_slowtmr+0x590>)
 80090ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80090f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d013      	beq.n	8009120 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009100:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	3304      	adds	r3, #4
 8009106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009108:	8ad2      	ldrh	r2, [r2, #22]
 800910a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800910c:	8b09      	ldrh	r1, [r1, #24]
 800910e:	9102      	str	r1, [sp, #8]
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462b      	mov	r3, r5
 8009116:	4622      	mov	r2, r4
 8009118:	4601      	mov	r1, r0
 800911a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800911c:	f004 f984 	bl	800d428 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	7d1b      	ldrb	r3, [r3, #20]
 800912a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009136:	6838      	ldr	r0, [r7, #0]
 8009138:	f7ff f9f2 	bl	8008520 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800913c:	4b30      	ldr	r3, [pc, #192]	; (8009200 <tcp_slowtmr+0x5a4>)
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <tcp_slowtmr+0x4f6>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f06f 010c 	mvn.w	r1, #12
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009152:	4b2b      	ldr	r3, [pc, #172]	; (8009200 <tcp_slowtmr+0x5a4>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d037      	beq.n	80091ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800915a:	e590      	b.n	8008c7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	7f1b      	ldrb	r3, [r3, #28]
 800916a:	3301      	adds	r3, #1
 800916c:	b2da      	uxtb	r2, r3
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	7f1a      	ldrb	r2, [r3, #28]
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	7f5b      	ldrb	r3, [r3, #29]
 800917a:	429a      	cmp	r2, r3
 800917c:	d325      	bcc.n	80091ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	2200      	movs	r2, #0
 8009182:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009184:	4b1e      	ldr	r3, [pc, #120]	; (8009200 <tcp_slowtmr+0x5a4>)
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <tcp_slowtmr+0x550>
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800919c:	6912      	ldr	r2, [r2, #16]
 800919e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80091aa:	e002      	b.n	80091b2 <tcp_slowtmr+0x556>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80091b2:	4b13      	ldr	r3, [pc, #76]	; (8009200 <tcp_slowtmr+0x5a4>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d000      	beq.n	80091bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80091ba:	e560      	b.n	8008c7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80091bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80091c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c6:	f003 fb7b 	bl	800c8c0 <tcp_output>
  while (pcb != NULL) {
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f ad5c 	bne.w	8008c8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <tcp_slowtmr+0x5a8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80091dc:	e067      	b.n	80092ae <tcp_slowtmr+0x652>
 80091de:	bf00      	nop
 80091e0:	20005b58 	.word	0x20005b58
 80091e4:	10624dd3 	.word	0x10624dd3
 80091e8:	000124f8 	.word	0x000124f8
 80091ec:	20005b54 	.word	0x20005b54
 80091f0:	08011e58 	.word	0x08011e58
 80091f4:	08012290 	.word	0x08012290
 80091f8:	08011e9c 	.word	0x08011e9c
 80091fc:	080122bc 	.word	0x080122bc
 8009200:	20005b50 	.word	0x20005b50
 8009204:	20005b64 	.word	0x20005b64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	7d1b      	ldrb	r3, [r3, #20]
 800920c:	2b0a      	cmp	r3, #10
 800920e:	d006      	beq.n	800921e <tcp_slowtmr+0x5c2>
 8009210:	4b2b      	ldr	r3, [pc, #172]	; (80092c0 <tcp_slowtmr+0x664>)
 8009212:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009216:	492b      	ldr	r1, [pc, #172]	; (80092c4 <tcp_slowtmr+0x668>)
 8009218:	482b      	ldr	r0, [pc, #172]	; (80092c8 <tcp_slowtmr+0x66c>)
 800921a:	f007 f891 	bl	8010340 <iprintf>
    pcb_remove = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009224:	4b29      	ldr	r3, [pc, #164]	; (80092cc <tcp_slowtmr+0x670>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2bf0      	cmp	r3, #240	; 0xf0
 8009230:	d904      	bls.n	800923c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009236:	3301      	adds	r3, #1
 8009238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800923c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009240:	2b00      	cmp	r3, #0
 8009242:	d02f      	beq.n	80092a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009246:	f000 fb2b 	bl	80098a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	2b00      	cmp	r3, #0
 800924e:	d010      	beq.n	8009272 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009250:	4b1f      	ldr	r3, [pc, #124]	; (80092d0 <tcp_slowtmr+0x674>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009256:	429a      	cmp	r2, r3
 8009258:	d106      	bne.n	8009268 <tcp_slowtmr+0x60c>
 800925a:	4b19      	ldr	r3, [pc, #100]	; (80092c0 <tcp_slowtmr+0x664>)
 800925c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009260:	491c      	ldr	r1, [pc, #112]	; (80092d4 <tcp_slowtmr+0x678>)
 8009262:	4819      	ldr	r0, [pc, #100]	; (80092c8 <tcp_slowtmr+0x66c>)
 8009264:	f007 f86c 	bl	8010340 <iprintf>
        prev->next = pcb->next;
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	60da      	str	r2, [r3, #12]
 8009270:	e00f      	b.n	8009292 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009272:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <tcp_slowtmr+0x674>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d006      	beq.n	800928a <tcp_slowtmr+0x62e>
 800927c:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <tcp_slowtmr+0x664>)
 800927e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009282:	4915      	ldr	r1, [pc, #84]	; (80092d8 <tcp_slowtmr+0x67c>)
 8009284:	4810      	ldr	r0, [pc, #64]	; (80092c8 <tcp_slowtmr+0x66c>)
 8009286:	f007 f85b 	bl	8010340 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	4a10      	ldr	r2, [pc, #64]	; (80092d0 <tcp_slowtmr+0x674>)
 8009290:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800929c:	69f8      	ldr	r0, [r7, #28]
 800929e:	f7ff f93f 	bl	8008520 <tcp_free>
 80092a2:	e004      	b.n	80092ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1a9      	bne.n	8009208 <tcp_slowtmr+0x5ac>
    }
  }
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop
 80092b8:	3730      	adds	r7, #48	; 0x30
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bdb0      	pop	{r4, r5, r7, pc}
 80092be:	bf00      	nop
 80092c0:	08011e58 	.word	0x08011e58
 80092c4:	080122e8 	.word	0x080122e8
 80092c8:	08011e9c 	.word	0x08011e9c
 80092cc:	20005b58 	.word	0x20005b58
 80092d0:	20005b64 	.word	0x20005b64
 80092d4:	08012318 	.word	0x08012318
 80092d8:	08012340 	.word	0x08012340

080092dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80092e2:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <tcp_fasttmr+0xbc>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b2b      	ldr	r3, [pc, #172]	; (8009398 <tcp_fasttmr+0xbc>)
 80092ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80092ee:	4b2b      	ldr	r3, [pc, #172]	; (800939c <tcp_fasttmr+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80092f4:	e048      	b.n	8009388 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7f9a      	ldrb	r2, [r3, #30]
 80092fa:	4b27      	ldr	r3, [pc, #156]	; (8009398 <tcp_fasttmr+0xbc>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d03f      	beq.n	8009382 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009302:	4b25      	ldr	r3, [pc, #148]	; (8009398 <tcp_fasttmr+0xbc>)
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	8b5b      	ldrh	r3, [r3, #26]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8b5b      	ldrh	r3, [r3, #26]
 800931a:	f043 0302 	orr.w	r3, r3, #2
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f003 facb 	bl	800c8c0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8b5b      	ldrh	r3, [r3, #26]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8b5b      	ldrh	r3, [r3, #26]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	8b5b      	ldrh	r3, [r3, #26]
 8009348:	f023 0308 	bic.w	r3, r3, #8
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fa78 	bl	8008848 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009366:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <tcp_fasttmr+0xc4>)
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f819 	bl	80093a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009372:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <tcp_fasttmr+0xc4>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d000      	beq.n	800937c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800937a:	e7b8      	b.n	80092ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	607b      	str	r3, [r7, #4]
 8009380:	e002      	b.n	8009388 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1b3      	bne.n	80092f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	200000ca 	.word	0x200000ca
 800939c:	20005b54 	.word	0x20005b54
 80093a0:	20005b50 	.word	0x20005b50

080093a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <tcp_process_refused_data+0x22>
 80093b2:	4b37      	ldr	r3, [pc, #220]	; (8009490 <tcp_process_refused_data+0xec>)
 80093b4:	f240 6209 	movw	r2, #1545	; 0x609
 80093b8:	4936      	ldr	r1, [pc, #216]	; (8009494 <tcp_process_refused_data+0xf0>)
 80093ba:	4837      	ldr	r0, [pc, #220]	; (8009498 <tcp_process_refused_data+0xf4>)
 80093bc:	f006 ffc0 	bl	8010340 <iprintf>
 80093c0:	f06f 030f 	mvn.w	r3, #15
 80093c4:	e060      	b.n	8009488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ca:	7b5b      	ldrb	r3, [r3, #13]
 80093cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <tcp_process_refused_data+0x58>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	2300      	movs	r3, #0
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	47a0      	blx	r4
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]
 80093fa:	e007      	b.n	800940c <tcp_process_refused_data+0x68>
 80093fc:	2300      	movs	r3, #0
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	2000      	movs	r0, #0
 8009404:	f000 f8a4 	bl	8009550 <tcp_recv_null>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800940c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d12a      	bne.n	800946a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d033      	beq.n	8009486 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009422:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009426:	d005      	beq.n	8009434 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	3301      	adds	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <tcp_process_refused_data+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6918      	ldr	r0, [r3, #16]
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	47a0      	blx	r4
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
 8009454:	e001      	b.n	800945a <tcp_process_refused_data+0xb6>
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800945a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945e:	f113 0f0d 	cmn.w	r3, #13
 8009462:	d110      	bne.n	8009486 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009464:	f06f 030c 	mvn.w	r3, #12
 8009468:	e00e      	b.n	8009488 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800946a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946e:	f113 0f0d 	cmn.w	r3, #13
 8009472:	d102      	bne.n	800947a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009474:	f06f 030c 	mvn.w	r3, #12
 8009478:	e006      	b.n	8009488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009480:	f06f 0304 	mvn.w	r3, #4
 8009484:	e000      	b.n	8009488 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	bd90      	pop	{r4, r7, pc}
 8009490:	08011e58 	.word	0x08011e58
 8009494:	08012368 	.word	0x08012368
 8009498:	08011e9c 	.word	0x08011e9c

0800949c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80094a4:	e007      	b.n	80094b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f80a 	bl	80094c6 <tcp_seg_free>
    seg = next;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f4      	bne.n	80094a6 <tcp_segs_free+0xa>
  }
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fd7d 	bl	8007fe0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	2003      	movs	r0, #3
 80094ea:	f7fd ff87 	bl	80073fc <memp_free>
  }
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <tcp_seg_copy+0x1c>
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <tcp_seg_copy+0x4c>)
 8009508:	f240 6282 	movw	r2, #1666	; 0x682
 800950c:	490e      	ldr	r1, [pc, #56]	; (8009548 <tcp_seg_copy+0x50>)
 800950e:	480f      	ldr	r0, [pc, #60]	; (800954c <tcp_seg_copy+0x54>)
 8009510:	f006 ff16 	bl	8010340 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009514:	2003      	movs	r0, #3
 8009516:	f7fd ff25 	bl	8007364 <memp_malloc>
 800951a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <tcp_seg_copy+0x2e>
    return NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	e00a      	b.n	800953c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009526:	2210      	movs	r2, #16
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f006 fef2 	bl	8010314 <memcpy>
  pbuf_ref(cseg->p);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fdf3 	bl	8008120 <pbuf_ref>
  return cseg;
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	08011e58 	.word	0x08011e58
 8009548:	080123ac 	.word	0x080123ac
 800954c:	08011e9c 	.word	0x08011e9c

08009550 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d109      	bne.n	8009578 <tcp_recv_null+0x28>
 8009564:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <tcp_recv_null+0x60>)
 8009566:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800956a:	4912      	ldr	r1, [pc, #72]	; (80095b4 <tcp_recv_null+0x64>)
 800956c:	4812      	ldr	r0, [pc, #72]	; (80095b8 <tcp_recv_null+0x68>)
 800956e:	f006 fee7 	bl	8010340 <iprintf>
 8009572:	f06f 030f 	mvn.w	r3, #15
 8009576:	e016      	b.n	80095a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d009      	beq.n	8009592 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	891b      	ldrh	r3, [r3, #8]
 8009582:	4619      	mov	r1, r3
 8009584:	68b8      	ldr	r0, [r7, #8]
 8009586:	f7ff fb19 	bl	8008bbc <tcp_recved>
    pbuf_free(p);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe fd28 	bl	8007fe0 <pbuf_free>
 8009590:	e008      	b.n	80095a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d104      	bne.n	80095a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800959a:	68b8      	ldr	r0, [r7, #8]
 800959c:	f7ff f9be 	bl	800891c <tcp_close>
 80095a0:	4603      	mov	r3, r0
 80095a2:	e000      	b.n	80095a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	08011e58 	.word	0x08011e58
 80095b4:	080123c8 	.word	0x080123c8
 80095b8:	08011e9c 	.word	0x08011e9c

080095bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80095c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db01      	blt.n	80095d2 <tcp_kill_prio+0x16>
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	e000      	b.n	80095d4 <tcp_kill_prio+0x18>
 80095d2:	237f      	movs	r3, #127	; 0x7f
 80095d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d034      	beq.n	8009646 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	3b01      	subs	r3, #1
 80095e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095ea:	4b19      	ldr	r3, [pc, #100]	; (8009650 <tcp_kill_prio+0x94>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	e01f      	b.n	8009632 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	7d5b      	ldrb	r3, [r3, #21]
 80095f6:	7afa      	ldrb	r2, [r7, #11]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d80c      	bhi.n	8009616 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009600:	7afa      	ldrb	r2, [r7, #11]
 8009602:	429a      	cmp	r2, r3
 8009604:	d112      	bne.n	800962c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <tcp_kill_prio+0x98>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	429a      	cmp	r2, r3
 8009614:	d80a      	bhi.n	800962c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <tcp_kill_prio+0x98>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	7d5b      	ldrb	r3, [r3, #21]
 800962a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1dc      	bne.n	80095f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d004      	beq.n	8009648 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800963e:	6938      	ldr	r0, [r7, #16]
 8009640:	f7ff fa56 	bl	8008af0 <tcp_abort>
 8009644:	e000      	b.n	8009648 <tcp_kill_prio+0x8c>
    return;
 8009646:	bf00      	nop
  }
}
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20005b54 	.word	0x20005b54
 8009654:	20005b58 	.word	0x20005b58

08009658 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	2b08      	cmp	r3, #8
 8009666:	d009      	beq.n	800967c <tcp_kill_state+0x24>
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b09      	cmp	r3, #9
 800966c:	d006      	beq.n	800967c <tcp_kill_state+0x24>
 800966e:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <tcp_kill_state+0x80>)
 8009670:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009674:	4919      	ldr	r1, [pc, #100]	; (80096dc <tcp_kill_state+0x84>)
 8009676:	481a      	ldr	r0, [pc, #104]	; (80096e0 <tcp_kill_state+0x88>)
 8009678:	f006 fe62 	bl	8010340 <iprintf>

  inactivity = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009684:	4b17      	ldr	r3, [pc, #92]	; (80096e4 <tcp_kill_state+0x8c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	617b      	str	r3, [r7, #20]
 800968a:	e017      	b.n	80096bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	7d1b      	ldrb	r3, [r3, #20]
 8009690:	79fa      	ldrb	r2, [r7, #7]
 8009692:	429a      	cmp	r2, r3
 8009694:	d10f      	bne.n	80096b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <tcp_kill_state+0x90>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d807      	bhi.n	80096b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <tcp_kill_state+0x90>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e4      	bne.n	800968c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80096c8:	2100      	movs	r1, #0
 80096ca:	6938      	ldr	r0, [r7, #16]
 80096cc:	f7ff f952 	bl	8008974 <tcp_abandon>
  }
}
 80096d0:	bf00      	nop
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	08011e58 	.word	0x08011e58
 80096dc:	080123e4 	.word	0x080123e4
 80096e0:	08011e9c 	.word	0x08011e9c
 80096e4:	20005b54 	.word	0x20005b54
 80096e8:	20005b58 	.word	0x20005b58

080096ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <tcp_kill_timewait+0x58>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e012      	b.n	8009728 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009702:	4b11      	ldr	r3, [pc, #68]	; (8009748 <tcp_kill_timewait+0x5c>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	d807      	bhi.n	8009722 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009712:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <tcp_kill_timewait+0x5c>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e9      	bne.n	8009702 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009734:	68b8      	ldr	r0, [r7, #8]
 8009736:	f7ff f9db 	bl	8008af0 <tcp_abort>
  }
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20005b64 	.word	0x20005b64
 8009748:	20005b58 	.word	0x20005b58

0800974c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009752:	4b10      	ldr	r3, [pc, #64]	; (8009794 <tcp_handle_closepend+0x48>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009758:	e014      	b.n	8009784 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	8b5b      	ldrh	r3, [r3, #26]
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	8b5b      	ldrh	r3, [r3, #26]
 8009770:	f023 0308 	bic.w	r3, r3, #8
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff f864 	bl	8008848 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e7      	bne.n	800975a <tcp_handle_closepend+0xe>
  }
}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20005b54 	.word	0x20005b54

08009798 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097a2:	2001      	movs	r0, #1
 80097a4:	f7fd fdde 	bl	8007364 <memp_malloc>
 80097a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d126      	bne.n	80097fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80097b0:	f7ff ffcc 	bl	800974c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80097b4:	f7ff ff9a 	bl	80096ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097b8:	2001      	movs	r0, #1
 80097ba:	f7fd fdd3 	bl	8007364 <memp_malloc>
 80097be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d11b      	bne.n	80097fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80097c6:	2009      	movs	r0, #9
 80097c8:	f7ff ff46 	bl	8009658 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7fd fdc9 	bl	8007364 <memp_malloc>
 80097d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d111      	bne.n	80097fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80097da:	2008      	movs	r0, #8
 80097dc:	f7ff ff3c 	bl	8009658 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097e0:	2001      	movs	r0, #1
 80097e2:	f7fd fdbf 	bl	8007364 <memp_malloc>
 80097e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d107      	bne.n	80097fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fee3 	bl	80095bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097f6:	2001      	movs	r0, #1
 80097f8:	f7fd fdb4 	bl	8007364 <memp_malloc>
 80097fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d03f      	beq.n	8009884 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009804:	229c      	movs	r2, #156	; 0x9c
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f006 fd91 	bl	8010330 <memset>
    pcb->prio = prio;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	79fa      	ldrb	r2, [r7, #7]
 8009812:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800981a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	22ff      	movs	r2, #255	; 0xff
 8009832:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f44f 7206 	mov.w	r2, #536	; 0x218
 800983a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2206      	movs	r2, #6
 8009840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2206      	movs	r2, #6
 8009848:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009850:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <tcp_alloc+0xf8>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009862:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <tcp_alloc+0xfc>)
 8009864:	781a      	ldrb	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009870:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4a08      	ldr	r2, [pc, #32]	; (8009898 <tcp_alloc+0x100>)
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a07      	ldr	r2, [pc, #28]	; (800989c <tcp_alloc+0x104>)
 8009880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20005b58 	.word	0x20005b58
 8009894:	200000ca 	.word	0x200000ca
 8009898:	08009551 	.word	0x08009551
 800989c:	006ddd00 	.word	0x006ddd00

080098a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d107      	bne.n	80098be <tcp_pcb_purge+0x1e>
 80098ae:	4b21      	ldr	r3, [pc, #132]	; (8009934 <tcp_pcb_purge+0x94>)
 80098b0:	f640 0251 	movw	r2, #2129	; 0x851
 80098b4:	4920      	ldr	r1, [pc, #128]	; (8009938 <tcp_pcb_purge+0x98>)
 80098b6:	4821      	ldr	r0, [pc, #132]	; (800993c <tcp_pcb_purge+0x9c>)
 80098b8:	f006 fd42 	bl	8010340 <iprintf>
 80098bc:	e037      	b.n	800992e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7d1b      	ldrb	r3, [r3, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d033      	beq.n	800992e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80098ca:	2b0a      	cmp	r3, #10
 80098cc:	d02f      	beq.n	800992e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d02b      	beq.n	800992e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fb7c 	bl	8007fe0 <pbuf_free>
      pcb->refused_data = NULL;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f986 	bl	8009c08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009902:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fdc7 	bl	800949c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fdc2 	bl	800949c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	66da      	str	r2, [r3, #108]	; 0x6c
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	08011e58 	.word	0x08011e58
 8009938:	080124a4 	.word	0x080124a4
 800993c:	08011e9c 	.word	0x08011e9c

08009940 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d106      	bne.n	800995e <tcp_pcb_remove+0x1e>
 8009950:	4b3e      	ldr	r3, [pc, #248]	; (8009a4c <tcp_pcb_remove+0x10c>)
 8009952:	f640 0283 	movw	r2, #2179	; 0x883
 8009956:	493e      	ldr	r1, [pc, #248]	; (8009a50 <tcp_pcb_remove+0x110>)
 8009958:	483e      	ldr	r0, [pc, #248]	; (8009a54 <tcp_pcb_remove+0x114>)
 800995a:	f006 fcf1 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <tcp_pcb_remove+0x32>
 8009964:	4b39      	ldr	r3, [pc, #228]	; (8009a4c <tcp_pcb_remove+0x10c>)
 8009966:	f640 0284 	movw	r2, #2180	; 0x884
 800996a:	493b      	ldr	r1, [pc, #236]	; (8009a58 <tcp_pcb_remove+0x118>)
 800996c:	4839      	ldr	r0, [pc, #228]	; (8009a54 <tcp_pcb_remove+0x114>)
 800996e:	f006 fce7 	bl	8010340 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d105      	bne.n	8009988 <tcp_pcb_remove+0x48>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e013      	b.n	80099b0 <tcp_pcb_remove+0x70>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	e00c      	b.n	80099aa <tcp_pcb_remove+0x6a>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d104      	bne.n	80099a4 <tcp_pcb_remove+0x64>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	60da      	str	r2, [r3, #12]
 80099a2:	e005      	b.n	80099b0 <tcp_pcb_remove+0x70>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1ef      	bne.n	8009990 <tcp_pcb_remove+0x50>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80099b6:	6838      	ldr	r0, [r7, #0]
 80099b8:	f7ff ff72 	bl	80098a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	7d1b      	ldrb	r3, [r3, #20]
 80099c0:	2b0a      	cmp	r3, #10
 80099c2:	d013      	beq.n	80099ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d00f      	beq.n	80099ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	8b5b      	ldrh	r3, [r3, #26]
 80099d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d009      	beq.n	80099ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	8b5b      	ldrh	r3, [r3, #26]
 80099dc:	f043 0302 	orr.w	r3, r3, #2
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80099e6:	6838      	ldr	r0, [r7, #0]
 80099e8:	f002 ff6a 	bl	800c8c0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	7d1b      	ldrb	r3, [r3, #20]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d020      	beq.n	8009a36 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d006      	beq.n	8009a0a <tcp_pcb_remove+0xca>
 80099fc:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <tcp_pcb_remove+0x10c>)
 80099fe:	f640 0293 	movw	r2, #2195	; 0x893
 8009a02:	4916      	ldr	r1, [pc, #88]	; (8009a5c <tcp_pcb_remove+0x11c>)
 8009a04:	4813      	ldr	r0, [pc, #76]	; (8009a54 <tcp_pcb_remove+0x114>)
 8009a06:	f006 fc9b 	bl	8010340 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d006      	beq.n	8009a20 <tcp_pcb_remove+0xe0>
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <tcp_pcb_remove+0x10c>)
 8009a14:	f640 0294 	movw	r2, #2196	; 0x894
 8009a18:	4911      	ldr	r1, [pc, #68]	; (8009a60 <tcp_pcb_remove+0x120>)
 8009a1a:	480e      	ldr	r0, [pc, #56]	; (8009a54 <tcp_pcb_remove+0x114>)
 8009a1c:	f006 fc90 	bl	8010340 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <tcp_pcb_remove+0xf6>
 8009a28:	4b08      	ldr	r3, [pc, #32]	; (8009a4c <tcp_pcb_remove+0x10c>)
 8009a2a:	f640 0296 	movw	r2, #2198	; 0x896
 8009a2e:	490d      	ldr	r1, [pc, #52]	; (8009a64 <tcp_pcb_remove+0x124>)
 8009a30:	4808      	ldr	r0, [pc, #32]	; (8009a54 <tcp_pcb_remove+0x114>)
 8009a32:	f006 fc85 	bl	8010340 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	08011e58 	.word	0x08011e58
 8009a50:	080124c0 	.word	0x080124c0
 8009a54:	08011e9c 	.word	0x08011e9c
 8009a58:	080124dc 	.word	0x080124dc
 8009a5c:	080124fc 	.word	0x080124fc
 8009a60:	08012514 	.word	0x08012514
 8009a64:	08012530 	.word	0x08012530

08009a68 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <tcp_next_iss+0x1c>
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <tcp_next_iss+0x38>)
 8009a78:	f640 02af 	movw	r2, #2223	; 0x8af
 8009a7c:	4909      	ldr	r1, [pc, #36]	; (8009aa4 <tcp_next_iss+0x3c>)
 8009a7e:	480a      	ldr	r0, [pc, #40]	; (8009aa8 <tcp_next_iss+0x40>)
 8009a80:	f006 fc5e 	bl	8010340 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009a84:	4b09      	ldr	r3, [pc, #36]	; (8009aac <tcp_next_iss+0x44>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <tcp_next_iss+0x48>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	4a07      	ldr	r2, [pc, #28]	; (8009aac <tcp_next_iss+0x44>)
 8009a90:	6013      	str	r3, [r2, #0]
  return iss;
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <tcp_next_iss+0x44>)
 8009a94:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	08011e58 	.word	0x08011e58
 8009aa4:	08012548 	.word	0x08012548
 8009aa8:	08011e9c 	.word	0x08011e9c
 8009aac:	2000000c 	.word	0x2000000c
 8009ab0:	20005b58 	.word	0x20005b58

08009ab4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <tcp_eff_send_mss_netif+0x22>
 8009ac8:	4b14      	ldr	r3, [pc, #80]	; (8009b1c <tcp_eff_send_mss_netif+0x68>)
 8009aca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009ace:	4914      	ldr	r1, [pc, #80]	; (8009b20 <tcp_eff_send_mss_netif+0x6c>)
 8009ad0:	4814      	ldr	r0, [pc, #80]	; (8009b24 <tcp_eff_send_mss_netif+0x70>)
 8009ad2:	f006 fc35 	bl	8010340 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	e019      	b.n	8009b14 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ae4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009ae6:	8afb      	ldrh	r3, [r7, #22]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d012      	beq.n	8009b12 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009aec:	2328      	movs	r3, #40	; 0x28
 8009aee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009af0:	8afa      	ldrh	r2, [r7, #22]
 8009af2:	8abb      	ldrh	r3, [r7, #20]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d904      	bls.n	8009b02 <tcp_eff_send_mss_netif+0x4e>
 8009af8:	8afa      	ldrh	r2, [r7, #22]
 8009afa:	8abb      	ldrh	r3, [r7, #20]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	e000      	b.n	8009b04 <tcp_eff_send_mss_netif+0x50>
 8009b02:	2300      	movs	r3, #0
 8009b04:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009b06:	8a7a      	ldrh	r2, [r7, #18]
 8009b08:	89fb      	ldrh	r3, [r7, #14]
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	bf28      	it	cs
 8009b0e:	4613      	movcs	r3, r2
 8009b10:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009b12:	89fb      	ldrh	r3, [r7, #14]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	08011e58 	.word	0x08011e58
 8009b20:	08012564 	.word	0x08012564
 8009b24:	08011e9c 	.word	0x08011e9c

08009b28 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d119      	bne.n	8009b70 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009b3c:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009b3e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009b42:	4910      	ldr	r1, [pc, #64]	; (8009b84 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009b44:	4810      	ldr	r0, [pc, #64]	; (8009b88 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009b46:	f006 fbfb 	bl	8010340 <iprintf>

  while (pcb != NULL) {
 8009b4a:	e011      	b.n	8009b70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d108      	bne.n	8009b6a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7fe ffc6 	bl	8008af0 <tcp_abort>
      pcb = next;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e002      	b.n	8009b70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1ea      	bne.n	8009b4c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	08011e58 	.word	0x08011e58
 8009b84:	0801258c 	.word	0x0801258c
 8009b88:	08011e9c 	.word	0x08011e9c

08009b8c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d02a      	beq.n	8009bf2 <tcp_netif_ip_addr_changed+0x66>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d026      	beq.n	8009bf2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ba4:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <tcp_netif_ip_addr_changed+0x70>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ffbc 	bl	8009b28 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009bb0:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <tcp_netif_ip_addr_changed+0x74>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff ffb6 	bl	8009b28 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d017      	beq.n	8009bf2 <tcp_netif_ip_addr_changed+0x66>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d013      	beq.n	8009bf2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bca:	4b0e      	ldr	r3, [pc, #56]	; (8009c04 <tcp_netif_ip_addr_changed+0x78>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e00c      	b.n	8009bec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d103      	bne.n	8009be6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1ef      	bne.n	8009bd2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20005b54 	.word	0x20005b54
 8009c00:	20005b60 	.word	0x20005b60
 8009c04:	20005b5c 	.word	0x20005b5c

08009c08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff fc3d 	bl	800949c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009c30:	b590      	push	{r4, r7, lr}
 8009c32:	b08d      	sub	sp, #52	; 0x34
 8009c34:	af04      	add	r7, sp, #16
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <tcp_input+0x1c>
 8009c40:	4b9b      	ldr	r3, [pc, #620]	; (8009eb0 <tcp_input+0x280>)
 8009c42:	2283      	movs	r2, #131	; 0x83
 8009c44:	499b      	ldr	r1, [pc, #620]	; (8009eb4 <tcp_input+0x284>)
 8009c46:	489c      	ldr	r0, [pc, #624]	; (8009eb8 <tcp_input+0x288>)
 8009c48:	f006 fb7a 	bl	8010340 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	4a9a      	ldr	r2, [pc, #616]	; (8009ebc <tcp_input+0x28c>)
 8009c52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	895b      	ldrh	r3, [r3, #10]
 8009c58:	2b13      	cmp	r3, #19
 8009c5a:	f240 83c4 	bls.w	800a3e6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c5e:	4b98      	ldr	r3, [pc, #608]	; (8009ec0 <tcp_input+0x290>)
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	4a97      	ldr	r2, [pc, #604]	; (8009ec0 <tcp_input+0x290>)
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f005 fbd1 	bl	800f410 <ip4_addr_isbroadcast_u32>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f040 83ba 	bne.w	800a3ea <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009c76:	4b92      	ldr	r3, [pc, #584]	; (8009ec0 <tcp_input+0x290>)
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c7e:	2be0      	cmp	r3, #224	; 0xe0
 8009c80:	f000 83b3 	beq.w	800a3ea <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009c84:	4b8d      	ldr	r3, [pc, #564]	; (8009ebc <tcp_input+0x28c>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	899b      	ldrh	r3, [r3, #12]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fc ff13 	bl	8006ab8 <lwip_htons>
 8009c92:	4603      	mov	r3, r0
 8009c94:	0b1b      	lsrs	r3, r3, #12
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009c9e:	7cbb      	ldrb	r3, [r7, #18]
 8009ca0:	2b13      	cmp	r3, #19
 8009ca2:	f240 83a4 	bls.w	800a3ee <tcp_input+0x7be>
 8009ca6:	7cbb      	ldrb	r3, [r7, #18]
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	891b      	ldrh	r3, [r3, #8]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	f200 839d 	bhi.w	800a3ee <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009cb4:	7cbb      	ldrb	r3, [r7, #18]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b14      	subs	r3, #20
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	4b81      	ldr	r3, [pc, #516]	; (8009ec4 <tcp_input+0x294>)
 8009cbe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009cc0:	4b81      	ldr	r3, [pc, #516]	; (8009ec8 <tcp_input+0x298>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	895a      	ldrh	r2, [r3, #10]
 8009cca:	7cbb      	ldrb	r3, [r7, #18]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d309      	bcc.n	8009ce6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009cd2:	4b7c      	ldr	r3, [pc, #496]	; (8009ec4 <tcp_input+0x294>)
 8009cd4:	881a      	ldrh	r2, [r3, #0]
 8009cd6:	4b7d      	ldr	r3, [pc, #500]	; (8009ecc <tcp_input+0x29c>)
 8009cd8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009cda:	7cbb      	ldrb	r3, [r7, #18]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fe f8f8 	bl	8007ed4 <pbuf_remove_header>
 8009ce4:	e04e      	b.n	8009d84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <tcp_input+0xca>
 8009cee:	4b70      	ldr	r3, [pc, #448]	; (8009eb0 <tcp_input+0x280>)
 8009cf0:	22c2      	movs	r2, #194	; 0xc2
 8009cf2:	4977      	ldr	r1, [pc, #476]	; (8009ed0 <tcp_input+0x2a0>)
 8009cf4:	4870      	ldr	r0, [pc, #448]	; (8009eb8 <tcp_input+0x288>)
 8009cf6:	f006 fb23 	bl	8010340 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009cfa:	2114      	movs	r1, #20
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fe f8e9 	bl	8007ed4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	895a      	ldrh	r2, [r3, #10]
 8009d06:	4b71      	ldr	r3, [pc, #452]	; (8009ecc <tcp_input+0x29c>)
 8009d08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009d0a:	4b6e      	ldr	r3, [pc, #440]	; (8009ec4 <tcp_input+0x294>)
 8009d0c:	881a      	ldrh	r2, [r3, #0]
 8009d0e:	4b6f      	ldr	r3, [pc, #444]	; (8009ecc <tcp_input+0x29c>)
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009d16:	4b6d      	ldr	r3, [pc, #436]	; (8009ecc <tcp_input+0x29c>)
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe f8d9 	bl	8007ed4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	895b      	ldrh	r3, [r3, #10]
 8009d28:	8a3a      	ldrh	r2, [r7, #16]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	f200 8361 	bhi.w	800a3f2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	4a64      	ldr	r2, [pc, #400]	; (8009ec8 <tcp_input+0x298>)
 8009d38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	8a3a      	ldrh	r2, [r7, #16]
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe f8c6 	bl	8007ed4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	891a      	ldrh	r2, [r3, #8]
 8009d4c:	8a3b      	ldrh	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	895b      	ldrh	r3, [r3, #10]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <tcp_input+0x13a>
 8009d5e:	4b54      	ldr	r3, [pc, #336]	; (8009eb0 <tcp_input+0x280>)
 8009d60:	22df      	movs	r2, #223	; 0xdf
 8009d62:	495c      	ldr	r1, [pc, #368]	; (8009ed4 <tcp_input+0x2a4>)
 8009d64:	4854      	ldr	r0, [pc, #336]	; (8009eb8 <tcp_input+0x288>)
 8009d66:	f006 faeb 	bl	8010340 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	891a      	ldrh	r2, [r3, #8]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	891b      	ldrh	r3, [r3, #8]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d005      	beq.n	8009d84 <tcp_input+0x154>
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <tcp_input+0x280>)
 8009d7a:	22e0      	movs	r2, #224	; 0xe0
 8009d7c:	4956      	ldr	r1, [pc, #344]	; (8009ed8 <tcp_input+0x2a8>)
 8009d7e:	484e      	ldr	r0, [pc, #312]	; (8009eb8 <tcp_input+0x288>)
 8009d80:	f006 fade 	bl	8010340 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009d84:	4b4d      	ldr	r3, [pc, #308]	; (8009ebc <tcp_input+0x28c>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	4a4b      	ldr	r2, [pc, #300]	; (8009ebc <tcp_input+0x28c>)
 8009d8e:	6814      	ldr	r4, [r2, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fc fe91 	bl	8006ab8 <lwip_htons>
 8009d96:	4603      	mov	r3, r0
 8009d98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009d9a:	4b48      	ldr	r3, [pc, #288]	; (8009ebc <tcp_input+0x28c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	885b      	ldrh	r3, [r3, #2]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4a46      	ldr	r2, [pc, #280]	; (8009ebc <tcp_input+0x28c>)
 8009da4:	6814      	ldr	r4, [r2, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fc fe86 	bl	8006ab8 <lwip_htons>
 8009dac:	4603      	mov	r3, r0
 8009dae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009db0:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <tcp_input+0x28c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	4a41      	ldr	r2, [pc, #260]	; (8009ebc <tcp_input+0x28c>)
 8009db8:	6814      	ldr	r4, [r2, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fc fe91 	bl	8006ae2 <lwip_htonl>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	6063      	str	r3, [r4, #4]
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	4a45      	ldr	r2, [pc, #276]	; (8009edc <tcp_input+0x2ac>)
 8009dc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009dca:	4b3c      	ldr	r3, [pc, #240]	; (8009ebc <tcp_input+0x28c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4a3a      	ldr	r2, [pc, #232]	; (8009ebc <tcp_input+0x28c>)
 8009dd2:	6814      	ldr	r4, [r2, #0]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fc fe84 	bl	8006ae2 <lwip_htonl>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	68a3      	ldr	r3, [r4, #8]
 8009de0:	4a3f      	ldr	r2, [pc, #252]	; (8009ee0 <tcp_input+0x2b0>)
 8009de2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009de4:	4b35      	ldr	r3, [pc, #212]	; (8009ebc <tcp_input+0x28c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	89db      	ldrh	r3, [r3, #14]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4a33      	ldr	r2, [pc, #204]	; (8009ebc <tcp_input+0x28c>)
 8009dee:	6814      	ldr	r4, [r2, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fc fe61 	bl	8006ab8 <lwip_htons>
 8009df6:	4603      	mov	r3, r0
 8009df8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009dfa:	4b30      	ldr	r3, [pc, #192]	; (8009ebc <tcp_input+0x28c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	899b      	ldrh	r3, [r3, #12]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fc fe58 	bl	8006ab8 <lwip_htons>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	4b34      	ldr	r3, [pc, #208]	; (8009ee4 <tcp_input+0x2b4>)
 8009e14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	891a      	ldrh	r2, [r3, #8]
 8009e1a:	4b33      	ldr	r3, [pc, #204]	; (8009ee8 <tcp_input+0x2b8>)
 8009e1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009e1e:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <tcp_input+0x2b4>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	f003 0303 	and.w	r3, r3, #3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <tcp_input+0x214>
    tcplen++;
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <tcp_input+0x2b8>)
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	4b2d      	ldr	r3, [pc, #180]	; (8009ee8 <tcp_input+0x2b8>)
 8009e34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	891a      	ldrh	r2, [r3, #8]
 8009e3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ee8 <tcp_input+0x2b8>)
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	f200 82d9 	bhi.w	800a3f6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e48:	4b28      	ldr	r3, [pc, #160]	; (8009eec <tcp_input+0x2bc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e09d      	b.n	8009f8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	7d1b      	ldrb	r3, [r3, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d105      	bne.n	8009e64 <tcp_input+0x234>
 8009e58:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <tcp_input+0x280>)
 8009e5a:	22fb      	movs	r2, #251	; 0xfb
 8009e5c:	4924      	ldr	r1, [pc, #144]	; (8009ef0 <tcp_input+0x2c0>)
 8009e5e:	4816      	ldr	r0, [pc, #88]	; (8009eb8 <tcp_input+0x288>)
 8009e60:	f006 fa6e 	bl	8010340 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	7d1b      	ldrb	r3, [r3, #20]
 8009e68:	2b0a      	cmp	r3, #10
 8009e6a:	d105      	bne.n	8009e78 <tcp_input+0x248>
 8009e6c:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <tcp_input+0x280>)
 8009e6e:	22fc      	movs	r2, #252	; 0xfc
 8009e70:	4920      	ldr	r1, [pc, #128]	; (8009ef4 <tcp_input+0x2c4>)
 8009e72:	4811      	ldr	r0, [pc, #68]	; (8009eb8 <tcp_input+0x288>)
 8009e74:	f006 fa64 	bl	8010340 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	7d1b      	ldrb	r3, [r3, #20]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d105      	bne.n	8009e8c <tcp_input+0x25c>
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <tcp_input+0x280>)
 8009e82:	22fd      	movs	r2, #253	; 0xfd
 8009e84:	491c      	ldr	r1, [pc, #112]	; (8009ef8 <tcp_input+0x2c8>)
 8009e86:	480c      	ldr	r0, [pc, #48]	; (8009eb8 <tcp_input+0x288>)
 8009e88:	f006 fa5a 	bl	8010340 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	7a1b      	ldrb	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d033      	beq.n	8009efc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	7a1a      	ldrb	r2, [r3, #8]
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <tcp_input+0x290>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d029      	beq.n	8009efc <tcp_input+0x2cc>
      prev = pcb;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
      continue;
 8009eac:	e06b      	b.n	8009f86 <tcp_input+0x356>
 8009eae:	bf00      	nop
 8009eb0:	080125c0 	.word	0x080125c0
 8009eb4:	080125f4 	.word	0x080125f4
 8009eb8:	0801260c 	.word	0x0801260c
 8009ebc:	200000dc 	.word	0x200000dc
 8009ec0:	20000450 	.word	0x20000450
 8009ec4:	200000e0 	.word	0x200000e0
 8009ec8:	200000e4 	.word	0x200000e4
 8009ecc:	200000e2 	.word	0x200000e2
 8009ed0:	08012634 	.word	0x08012634
 8009ed4:	08012644 	.word	0x08012644
 8009ed8:	08012650 	.word	0x08012650
 8009edc:	200000ec 	.word	0x200000ec
 8009ee0:	200000f0 	.word	0x200000f0
 8009ee4:	200000f8 	.word	0x200000f8
 8009ee8:	200000f6 	.word	0x200000f6
 8009eec:	20005b54 	.word	0x20005b54
 8009ef0:	08012670 	.word	0x08012670
 8009ef4:	08012698 	.word	0x08012698
 8009ef8:	080126c4 	.word	0x080126c4
    }

    if (pcb->remote_port == tcphdr->src &&
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	8b1a      	ldrh	r2, [r3, #24]
 8009f00:	4b94      	ldr	r3, [pc, #592]	; (800a154 <tcp_input+0x524>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d13a      	bne.n	8009f82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	8ada      	ldrh	r2, [r3, #22]
 8009f10:	4b90      	ldr	r3, [pc, #576]	; (800a154 <tcp_input+0x524>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d132      	bne.n	8009f82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	4b8d      	ldr	r3, [pc, #564]	; (800a158 <tcp_input+0x528>)
 8009f22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d12c      	bne.n	8009f82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	4b8a      	ldr	r3, [pc, #552]	; (800a158 <tcp_input+0x528>)
 8009f2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d126      	bne.n	8009f82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d106      	bne.n	8009f4c <tcp_input+0x31c>
 8009f3e:	4b87      	ldr	r3, [pc, #540]	; (800a15c <tcp_input+0x52c>)
 8009f40:	f240 120d 	movw	r2, #269	; 0x10d
 8009f44:	4986      	ldr	r1, [pc, #536]	; (800a160 <tcp_input+0x530>)
 8009f46:	4887      	ldr	r0, [pc, #540]	; (800a164 <tcp_input+0x534>)
 8009f48:	f006 f9fa 	bl	8010340 <iprintf>
      if (prev != NULL) {
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <tcp_input+0x338>
        prev->next = pcb->next;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009f5a:	4b83      	ldr	r3, [pc, #524]	; (800a168 <tcp_input+0x538>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009f62:	4a81      	ldr	r2, [pc, #516]	; (800a168 <tcp_input+0x538>)
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d111      	bne.n	8009f96 <tcp_input+0x366>
 8009f72:	4b7a      	ldr	r3, [pc, #488]	; (800a15c <tcp_input+0x52c>)
 8009f74:	f240 1215 	movw	r2, #277	; 0x115
 8009f78:	497c      	ldr	r1, [pc, #496]	; (800a16c <tcp_input+0x53c>)
 8009f7a:	487a      	ldr	r0, [pc, #488]	; (800a164 <tcp_input+0x534>)
 8009f7c:	f006 f9e0 	bl	8010340 <iprintf>
      break;
 8009f80:	e009      	b.n	8009f96 <tcp_input+0x366>
    }
    prev = pcb;
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f47f af5e 	bne.w	8009e50 <tcp_input+0x220>
 8009f94:	e000      	b.n	8009f98 <tcp_input+0x368>
      break;
 8009f96:	bf00      	nop
  }

  if (pcb == NULL) {
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 8095 	bne.w	800a0ca <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fa0:	4b73      	ldr	r3, [pc, #460]	; (800a170 <tcp_input+0x540>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	e03f      	b.n	800a028 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	7d1b      	ldrb	r3, [r3, #20]
 8009fac:	2b0a      	cmp	r3, #10
 8009fae:	d006      	beq.n	8009fbe <tcp_input+0x38e>
 8009fb0:	4b6a      	ldr	r3, [pc, #424]	; (800a15c <tcp_input+0x52c>)
 8009fb2:	f240 121f 	movw	r2, #287	; 0x11f
 8009fb6:	496f      	ldr	r1, [pc, #444]	; (800a174 <tcp_input+0x544>)
 8009fb8:	486a      	ldr	r0, [pc, #424]	; (800a164 <tcp_input+0x534>)
 8009fba:	f006 f9c1 	bl	8010340 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	7a1b      	ldrb	r3, [r3, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	7a1a      	ldrb	r2, [r3, #8]
 8009fca:	4b63      	ldr	r3, [pc, #396]	; (800a158 <tcp_input+0x528>)
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d122      	bne.n	800a020 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	8b1a      	ldrh	r2, [r3, #24]
 8009fde:	4b5d      	ldr	r3, [pc, #372]	; (800a154 <tcp_input+0x524>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d11b      	bne.n	800a022 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	8ada      	ldrh	r2, [r3, #22]
 8009fee:	4b59      	ldr	r3, [pc, #356]	; (800a154 <tcp_input+0x524>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	885b      	ldrh	r3, [r3, #2]
 8009ff4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d113      	bne.n	800a022 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	4b56      	ldr	r3, [pc, #344]	; (800a158 <tcp_input+0x528>)
 800a000:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a002:	429a      	cmp	r2, r3
 800a004:	d10d      	bne.n	800a022 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b53      	ldr	r3, [pc, #332]	; (800a158 <tcp_input+0x528>)
 800a00c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a00e:	429a      	cmp	r2, r3
 800a010:	d107      	bne.n	800a022 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a012:	69f8      	ldr	r0, [r7, #28]
 800a014:	f000 fb54 	bl	800a6c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7fd ffe1 	bl	8007fe0 <pbuf_free>
        return;
 800a01e:	e1f0      	b.n	800a402 <tcp_input+0x7d2>
        continue;
 800a020:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1bc      	bne.n	8009fa8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a032:	4b51      	ldr	r3, [pc, #324]	; (800a178 <tcp_input+0x548>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	e02a      	b.n	800a090 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	7a1b      	ldrb	r3, [r3, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00c      	beq.n	800a05c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	7a1a      	ldrb	r2, [r3, #8]
 800a046:	4b44      	ldr	r3, [pc, #272]	; (800a158 <tcp_input+0x528>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a04e:	3301      	adds	r3, #1
 800a050:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a052:	429a      	cmp	r2, r3
 800a054:	d002      	beq.n	800a05c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	61bb      	str	r3, [r7, #24]
        continue;
 800a05a:	e016      	b.n	800a08a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	8ada      	ldrh	r2, [r3, #22]
 800a060:	4b3c      	ldr	r3, [pc, #240]	; (800a154 <tcp_input+0x524>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	885b      	ldrh	r3, [r3, #2]
 800a066:	b29b      	uxth	r3, r3
 800a068:	429a      	cmp	r2, r3
 800a06a:	d10c      	bne.n	800a086 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	4b39      	ldr	r3, [pc, #228]	; (800a158 <tcp_input+0x528>)
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d00f      	beq.n	800a098 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <tcp_input+0x46a>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1d1      	bne.n	800a03a <tcp_input+0x40a>
 800a096:	e000      	b.n	800a09a <tcp_input+0x46a>
            break;
 800a098:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d014      	beq.n	800a0ca <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a0ae:	4b32      	ldr	r3, [pc, #200]	; (800a178 <tcp_input+0x548>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a0b6:	4a30      	ldr	r2, [pc, #192]	; (800a178 <tcp_input+0x548>)
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a0bc:	6978      	ldr	r0, [r7, #20]
 800a0be:	f000 fa01 	bl	800a4c4 <tcp_listen_input>
      }
      pbuf_free(p);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fd ff8c 	bl	8007fe0 <pbuf_free>
      return;
 800a0c8:	e19b      	b.n	800a402 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8160 	beq.w	800a392 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a0d2:	4b2a      	ldr	r3, [pc, #168]	; (800a17c <tcp_input+0x54c>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	891a      	ldrh	r2, [r3, #8]
 800a0dc:	4b27      	ldr	r3, [pc, #156]	; (800a17c <tcp_input+0x54c>)
 800a0de:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a0e0:	4a26      	ldr	r2, [pc, #152]	; (800a17c <tcp_input+0x54c>)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a0e6:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <tcp_input+0x524>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a24      	ldr	r2, [pc, #144]	; (800a17c <tcp_input+0x54c>)
 800a0ec:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a0ee:	4b24      	ldr	r3, [pc, #144]	; (800a180 <tcp_input+0x550>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a0f4:	4b23      	ldr	r3, [pc, #140]	; (800a184 <tcp_input+0x554>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <tcp_input+0x558>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a100:	4b22      	ldr	r3, [pc, #136]	; (800a18c <tcp_input+0x55c>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	f003 0308 	and.w	r3, r3, #8
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d006      	beq.n	800a11a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7b5b      	ldrb	r3, [r3, #13]
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d038      	beq.n	800a194 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a122:	69f8      	ldr	r0, [r7, #28]
 800a124:	f7ff f93e 	bl	80093a4 <tcp_process_refused_data>
 800a128:	4603      	mov	r3, r0
 800a12a:	f113 0f0d 	cmn.w	r3, #13
 800a12e:	d007      	beq.n	800a140 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a134:	2b00      	cmp	r3, #0
 800a136:	d02d      	beq.n	800a194 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <tcp_input+0x560>)
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d029      	beq.n	800a194 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 8104 	bne.w	800a352 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a14a:	69f8      	ldr	r0, [r7, #28]
 800a14c:	f003 f9be 	bl	800d4cc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a150:	e0ff      	b.n	800a352 <tcp_input+0x722>
 800a152:	bf00      	nop
 800a154:	200000dc 	.word	0x200000dc
 800a158:	20000450 	.word	0x20000450
 800a15c:	080125c0 	.word	0x080125c0
 800a160:	080126ec 	.word	0x080126ec
 800a164:	0801260c 	.word	0x0801260c
 800a168:	20005b54 	.word	0x20005b54
 800a16c:	08012718 	.word	0x08012718
 800a170:	20005b64 	.word	0x20005b64
 800a174:	08012744 	.word	0x08012744
 800a178:	20005b5c 	.word	0x20005b5c
 800a17c:	200000cc 	.word	0x200000cc
 800a180:	200000fc 	.word	0x200000fc
 800a184:	200000f9 	.word	0x200000f9
 800a188:	200000f4 	.word	0x200000f4
 800a18c:	200000f8 	.word	0x200000f8
 800a190:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 800a194:	4a9c      	ldr	r2, [pc, #624]	; (800a408 <tcp_input+0x7d8>)
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a19a:	69f8      	ldr	r0, [r7, #28]
 800a19c:	f000 fb0a 	bl	800a7b4 <tcp_process>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a1a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1a8:	f113 0f0d 	cmn.w	r3, #13
 800a1ac:	f000 80d3 	beq.w	800a356 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800a1b0:	4b96      	ldr	r3, [pc, #600]	; (800a40c <tcp_input+0x7dc>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d015      	beq.n	800a1e8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <tcp_input+0x5a8>
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	6912      	ldr	r2, [r2, #16]
 800a1d0:	f06f 010d 	mvn.w	r1, #13
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1d8:	69f9      	ldr	r1, [r7, #28]
 800a1da:	488d      	ldr	r0, [pc, #564]	; (800a410 <tcp_input+0x7e0>)
 800a1dc:	f7ff fbb0 	bl	8009940 <tcp_pcb_remove>
        tcp_free(pcb);
 800a1e0:	69f8      	ldr	r0, [r7, #28]
 800a1e2:	f7fe f99d 	bl	8008520 <tcp_free>
 800a1e6:	e0c1      	b.n	800a36c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a1ec:	4b89      	ldr	r3, [pc, #548]	; (800a414 <tcp_input+0x7e4>)
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01d      	beq.n	800a230 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a1f4:	4b87      	ldr	r3, [pc, #540]	; (800a414 <tcp_input+0x7e4>)
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00a      	beq.n	800a21a <tcp_input+0x5ea>
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	6910      	ldr	r0, [r2, #16]
 800a20e:	89fa      	ldrh	r2, [r7, #14]
 800a210:	69f9      	ldr	r1, [r7, #28]
 800a212:	4798      	blx	r3
 800a214:	4603      	mov	r3, r0
 800a216:	74fb      	strb	r3, [r7, #19]
 800a218:	e001      	b.n	800a21e <tcp_input+0x5ee>
 800a21a:	2300      	movs	r3, #0
 800a21c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a21e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a222:	f113 0f0d 	cmn.w	r3, #13
 800a226:	f000 8098 	beq.w	800a35a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a22a:	4b7a      	ldr	r3, [pc, #488]	; (800a414 <tcp_input+0x7e4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a230:	69f8      	ldr	r0, [r7, #28]
 800a232:	f000 f907 	bl	800a444 <tcp_input_delayed_close>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 8090 	bne.w	800a35e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a23e:	4b76      	ldr	r3, [pc, #472]	; (800a418 <tcp_input+0x7e8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d041      	beq.n	800a2ca <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d006      	beq.n	800a25c <tcp_input+0x62c>
 800a24e:	4b73      	ldr	r3, [pc, #460]	; (800a41c <tcp_input+0x7ec>)
 800a250:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a254:	4972      	ldr	r1, [pc, #456]	; (800a420 <tcp_input+0x7f0>)
 800a256:	4873      	ldr	r0, [pc, #460]	; (800a424 <tcp_input+0x7f4>)
 800a258:	f006 f872 	bl	8010340 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	8b5b      	ldrh	r3, [r3, #26]
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a268:	4b6b      	ldr	r3, [pc, #428]	; (800a418 <tcp_input+0x7e8>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fd feb7 	bl	8007fe0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a272:	69f8      	ldr	r0, [r7, #28]
 800a274:	f7fe fc3c 	bl	8008af0 <tcp_abort>
            goto aborted;
 800a278:	e078      	b.n	800a36c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00c      	beq.n	800a29e <tcp_input+0x66e>
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	6918      	ldr	r0, [r3, #16]
 800a28e:	4b62      	ldr	r3, [pc, #392]	; (800a418 <tcp_input+0x7e8>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	47a0      	blx	r4
 800a298:	4603      	mov	r3, r0
 800a29a:	74fb      	strb	r3, [r7, #19]
 800a29c:	e008      	b.n	800a2b0 <tcp_input+0x680>
 800a29e:	4b5e      	ldr	r3, [pc, #376]	; (800a418 <tcp_input+0x7e8>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	69f9      	ldr	r1, [r7, #28]
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f7ff f952 	bl	8009550 <tcp_recv_null>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a2b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2b4:	f113 0f0d 	cmn.w	r3, #13
 800a2b8:	d053      	beq.n	800a362 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a2ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a2c2:	4b55      	ldr	r3, [pc, #340]	; (800a418 <tcp_input+0x7e8>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a2ca:	4b50      	ldr	r3, [pc, #320]	; (800a40c <tcp_input+0x7dc>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d030      	beq.n	800a338 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2e2:	7b5a      	ldrb	r2, [r3, #13]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2e8:	f042 0220 	orr.w	r2, r2, #32
 800a2ec:	b2d2      	uxtb	r2, r2
 800a2ee:	735a      	strb	r2, [r3, #13]
 800a2f0:	e022      	b.n	800a338 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a2fa:	d005      	beq.n	800a308 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a300:	3301      	adds	r3, #1
 800a302:	b29a      	uxth	r2, r3
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <tcp_input+0x6fa>
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	6918      	ldr	r0, [r3, #16]
 800a31c:	2300      	movs	r3, #0
 800a31e:	2200      	movs	r2, #0
 800a320:	69f9      	ldr	r1, [r7, #28]
 800a322:	47a0      	blx	r4
 800a324:	4603      	mov	r3, r0
 800a326:	74fb      	strb	r3, [r7, #19]
 800a328:	e001      	b.n	800a32e <tcp_input+0x6fe>
 800a32a:	2300      	movs	r3, #0
 800a32c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a32e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a332:	f113 0f0d 	cmn.w	r3, #13
 800a336:	d016      	beq.n	800a366 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a338:	4b33      	ldr	r3, [pc, #204]	; (800a408 <tcp_input+0x7d8>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a33e:	69f8      	ldr	r0, [r7, #28]
 800a340:	f000 f880 	bl	800a444 <tcp_input_delayed_close>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10f      	bne.n	800a36a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a34a:	69f8      	ldr	r0, [r7, #28]
 800a34c:	f002 fab8 	bl	800c8c0 <tcp_output>
 800a350:	e00c      	b.n	800a36c <tcp_input+0x73c>
        goto aborted;
 800a352:	bf00      	nop
 800a354:	e00a      	b.n	800a36c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a356:	bf00      	nop
 800a358:	e008      	b.n	800a36c <tcp_input+0x73c>
              goto aborted;
 800a35a:	bf00      	nop
 800a35c:	e006      	b.n	800a36c <tcp_input+0x73c>
          goto aborted;
 800a35e:	bf00      	nop
 800a360:	e004      	b.n	800a36c <tcp_input+0x73c>
            goto aborted;
 800a362:	bf00      	nop
 800a364:	e002      	b.n	800a36c <tcp_input+0x73c>
              goto aborted;
 800a366:	bf00      	nop
 800a368:	e000      	b.n	800a36c <tcp_input+0x73c>
          goto aborted;
 800a36a:	bf00      	nop
    tcp_input_pcb = NULL;
 800a36c:	4b26      	ldr	r3, [pc, #152]	; (800a408 <tcp_input+0x7d8>)
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a372:	4b29      	ldr	r3, [pc, #164]	; (800a418 <tcp_input+0x7e8>)
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a378:	4b2b      	ldr	r3, [pc, #172]	; (800a428 <tcp_input+0x7f8>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d03f      	beq.n	800a400 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a380:	4b29      	ldr	r3, [pc, #164]	; (800a428 <tcp_input+0x7f8>)
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	f7fd fe2b 	bl	8007fe0 <pbuf_free>
      inseg.p = NULL;
 800a38a:	4b27      	ldr	r3, [pc, #156]	; (800a428 <tcp_input+0x7f8>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a390:	e036      	b.n	800a400 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a392:	4b26      	ldr	r3, [pc, #152]	; (800a42c <tcp_input+0x7fc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	899b      	ldrh	r3, [r3, #12]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fc fb8c 	bl	8006ab8 <lwip_htons>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d118      	bne.n	800a3de <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3ac:	4b20      	ldr	r3, [pc, #128]	; (800a430 <tcp_input+0x800>)
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	4b20      	ldr	r3, [pc, #128]	; (800a434 <tcp_input+0x804>)
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4b20      	ldr	r3, [pc, #128]	; (800a438 <tcp_input+0x808>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3bc:	4b1b      	ldr	r3, [pc, #108]	; (800a42c <tcp_input+0x7fc>)
 800a3be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3c4:	4a19      	ldr	r2, [pc, #100]	; (800a42c <tcp_input+0x7fc>)
 800a3c6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3c8:	8812      	ldrh	r2, [r2, #0]
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	9202      	str	r2, [sp, #8]
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <tcp_input+0x80c>)
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <tcp_input+0x810>)
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f003 f825 	bl	800d428 <tcp_rst>
    pbuf_free(p);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7fd fdfe 	bl	8007fe0 <pbuf_free>
  return;
 800a3e4:	e00c      	b.n	800a400 <tcp_input+0x7d0>
    goto dropped;
 800a3e6:	bf00      	nop
 800a3e8:	e006      	b.n	800a3f8 <tcp_input+0x7c8>
    goto dropped;
 800a3ea:	bf00      	nop
 800a3ec:	e004      	b.n	800a3f8 <tcp_input+0x7c8>
    goto dropped;
 800a3ee:	bf00      	nop
 800a3f0:	e002      	b.n	800a3f8 <tcp_input+0x7c8>
      goto dropped;
 800a3f2:	bf00      	nop
 800a3f4:	e000      	b.n	800a3f8 <tcp_input+0x7c8>
      goto dropped;
 800a3f6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7fd fdf1 	bl	8007fe0 <pbuf_free>
 800a3fe:	e000      	b.n	800a402 <tcp_input+0x7d2>
  return;
 800a400:	bf00      	nop
}
 800a402:	3724      	adds	r7, #36	; 0x24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd90      	pop	{r4, r7, pc}
 800a408:	20005b68 	.word	0x20005b68
 800a40c:	200000f9 	.word	0x200000f9
 800a410:	20005b54 	.word	0x20005b54
 800a414:	200000f4 	.word	0x200000f4
 800a418:	200000fc 	.word	0x200000fc
 800a41c:	080125c0 	.word	0x080125c0
 800a420:	08012774 	.word	0x08012774
 800a424:	0801260c 	.word	0x0801260c
 800a428:	200000cc 	.word	0x200000cc
 800a42c:	200000dc 	.word	0x200000dc
 800a430:	200000f0 	.word	0x200000f0
 800a434:	200000f6 	.word	0x200000f6
 800a438:	200000ec 	.word	0x200000ec
 800a43c:	20000460 	.word	0x20000460
 800a440:	20000464 	.word	0x20000464

0800a444 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <tcp_input_delayed_close+0x1c>
 800a452:	4b17      	ldr	r3, [pc, #92]	; (800a4b0 <tcp_input_delayed_close+0x6c>)
 800a454:	f240 225a 	movw	r2, #602	; 0x25a
 800a458:	4916      	ldr	r1, [pc, #88]	; (800a4b4 <tcp_input_delayed_close+0x70>)
 800a45a:	4817      	ldr	r0, [pc, #92]	; (800a4b8 <tcp_input_delayed_close+0x74>)
 800a45c:	f005 ff70 	bl	8010340 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a460:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <tcp_input_delayed_close+0x78>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	f003 0310 	and.w	r3, r3, #16
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01c      	beq.n	800a4a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8b5b      	ldrh	r3, [r3, #26]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10d      	bne.n	800a494 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <tcp_input_delayed_close+0x50>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6912      	ldr	r2, [r2, #16]
 800a48c:	f06f 010e 	mvn.w	r1, #14
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	480a      	ldr	r0, [pc, #40]	; (800a4c0 <tcp_input_delayed_close+0x7c>)
 800a498:	f7ff fa52 	bl	8009940 <tcp_pcb_remove>
    tcp_free(pcb);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe f83f 	bl	8008520 <tcp_free>
    return 1;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e000      	b.n	800a4a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	080125c0 	.word	0x080125c0
 800a4b4:	08012790 	.word	0x08012790
 800a4b8:	0801260c 	.word	0x0801260c
 800a4bc:	200000f9 	.word	0x200000f9
 800a4c0:	20005b54 	.word	0x20005b54

0800a4c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a4c4:	b590      	push	{r4, r7, lr}
 800a4c6:	b08b      	sub	sp, #44	; 0x2c
 800a4c8:	af04      	add	r7, sp, #16
 800a4ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a4cc:	4b6f      	ldr	r3, [pc, #444]	; (800a68c <tcp_listen_input+0x1c8>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f040 80d2 	bne.w	800a67e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <tcp_listen_input+0x2a>
 800a4e0:	4b6b      	ldr	r3, [pc, #428]	; (800a690 <tcp_listen_input+0x1cc>)
 800a4e2:	f240 2281 	movw	r2, #641	; 0x281
 800a4e6:	496b      	ldr	r1, [pc, #428]	; (800a694 <tcp_listen_input+0x1d0>)
 800a4e8:	486b      	ldr	r0, [pc, #428]	; (800a698 <tcp_listen_input+0x1d4>)
 800a4ea:	f005 ff29 	bl	8010340 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a4ee:	4b67      	ldr	r3, [pc, #412]	; (800a68c <tcp_listen_input+0x1c8>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0310 	and.w	r3, r3, #16
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d019      	beq.n	800a52e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4fa:	4b68      	ldr	r3, [pc, #416]	; (800a69c <tcp_listen_input+0x1d8>)
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	4b68      	ldr	r3, [pc, #416]	; (800a6a0 <tcp_listen_input+0x1dc>)
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	4b67      	ldr	r3, [pc, #412]	; (800a6a4 <tcp_listen_input+0x1e0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a50a:	4b67      	ldr	r3, [pc, #412]	; (800a6a8 <tcp_listen_input+0x1e4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a50e:	885b      	ldrh	r3, [r3, #2]
 800a510:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a512:	4a65      	ldr	r2, [pc, #404]	; (800a6a8 <tcp_listen_input+0x1e4>)
 800a514:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a516:	8812      	ldrh	r2, [r2, #0]
 800a518:	b292      	uxth	r2, r2
 800a51a:	9202      	str	r2, [sp, #8]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	4b63      	ldr	r3, [pc, #396]	; (800a6ac <tcp_listen_input+0x1e8>)
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	4b63      	ldr	r3, [pc, #396]	; (800a6b0 <tcp_listen_input+0x1ec>)
 800a524:	4602      	mov	r2, r0
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f002 ff7e 	bl	800d428 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a52c:	e0a9      	b.n	800a682 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a52e:	4b57      	ldr	r3, [pc, #348]	; (800a68c <tcp_listen_input+0x1c8>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80a3 	beq.w	800a682 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7d5b      	ldrb	r3, [r3, #21]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff f929 	bl	8009798 <tcp_alloc>
 800a546:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d111      	bne.n	800a572 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <tcp_listen_input+0xa8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6910      	ldr	r0, [r2, #16]
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295
 800a562:	2100      	movs	r1, #0
 800a564:	4798      	blx	r3
 800a566:	4603      	mov	r3, r0
 800a568:	73bb      	strb	r3, [r7, #14]
      return;
 800a56a:	e08b      	b.n	800a684 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a56c:	23f0      	movs	r3, #240	; 0xf0
 800a56e:	73bb      	strb	r3, [r7, #14]
      return;
 800a570:	e088      	b.n	800a684 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a572:	4b50      	ldr	r3, [pc, #320]	; (800a6b4 <tcp_listen_input+0x1f0>)
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a57a:	4b4e      	ldr	r3, [pc, #312]	; (800a6b4 <tcp_listen_input+0x1f0>)
 800a57c:	691a      	ldr	r2, [r3, #16]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8ada      	ldrh	r2, [r3, #22]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a58a:	4b47      	ldr	r3, [pc, #284]	; (800a6a8 <tcp_listen_input+0x1e4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29a      	uxth	r2, r3
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2203      	movs	r2, #3
 800a59a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a59c:	4b41      	ldr	r3, [pc, #260]	; (800a6a4 <tcp_listen_input+0x1e0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a5ae:	6978      	ldr	r0, [r7, #20]
 800a5b0:	f7ff fa5a 	bl	8009a68 <tcp_next_iss>
 800a5b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5ce:	4b35      	ldr	r3, [pc, #212]	; (800a6a4 <tcp_listen_input+0x1e0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	1e5a      	subs	r2, r3, #1
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7a5b      	ldrb	r3, [r3, #9]
 800a5ea:	f003 030c 	and.w	r3, r3, #12
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7a1a      	ldrb	r2, [r3, #8]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a5fc:	4b2e      	ldr	r3, [pc, #184]	; (800a6b8 <tcp_listen_input+0x1f4>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	60da      	str	r2, [r3, #12]
 800a604:	4a2c      	ldr	r2, [pc, #176]	; (800a6b8 <tcp_listen_input+0x1f4>)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	f003 f8cf 	bl	800d7ac <tcp_timer_needed>
 800a60e:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <tcp_listen_input+0x1f8>)
 800a610:	2201      	movs	r2, #1
 800a612:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a614:	6978      	ldr	r0, [r7, #20]
 800a616:	f001 fd8d 	bl	800c134 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a61a:	4b23      	ldr	r3, [pc, #140]	; (800a6a8 <tcp_listen_input+0x1e4>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	89db      	ldrh	r3, [r3, #14]
 800a620:	b29a      	uxth	r2, r3
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4618      	mov	r0, r3
 800a63e:	f004 fc51 	bl	800eee4 <ip4_route>
 800a642:	4601      	mov	r1, r0
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	3304      	adds	r3, #4
 800a648:	461a      	mov	r2, r3
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff fa32 	bl	8009ab4 <tcp_eff_send_mss_netif>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a658:	2112      	movs	r1, #18
 800a65a:	6978      	ldr	r0, [r7, #20]
 800a65c:	f002 f842 	bl	800c6e4 <tcp_enqueue_flags>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a66c:	2100      	movs	r1, #0
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f7fe f980 	bl	8008974 <tcp_abandon>
      return;
 800a674:	e006      	b.n	800a684 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f002 f922 	bl	800c8c0 <tcp_output>
  return;
 800a67c:	e001      	b.n	800a682 <tcp_listen_input+0x1be>
    return;
 800a67e:	bf00      	nop
 800a680:	e000      	b.n	800a684 <tcp_listen_input+0x1c0>
  return;
 800a682:	bf00      	nop
}
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd90      	pop	{r4, r7, pc}
 800a68a:	bf00      	nop
 800a68c:	200000f8 	.word	0x200000f8
 800a690:	080125c0 	.word	0x080125c0
 800a694:	080127b8 	.word	0x080127b8
 800a698:	0801260c 	.word	0x0801260c
 800a69c:	200000f0 	.word	0x200000f0
 800a6a0:	200000f6 	.word	0x200000f6
 800a6a4:	200000ec 	.word	0x200000ec
 800a6a8:	200000dc 	.word	0x200000dc
 800a6ac:	20000460 	.word	0x20000460
 800a6b0:	20000464 	.word	0x20000464
 800a6b4:	20000450 	.word	0x20000450
 800a6b8:	20005b54 	.word	0x20005b54
 800a6bc:	20005b50 	.word	0x20005b50

0800a6c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af04      	add	r7, sp, #16
 800a6c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a6c8:	4b2f      	ldr	r3, [pc, #188]	; (800a788 <tcp_timewait_input+0xc8>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d153      	bne.n	800a77c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d106      	bne.n	800a6e8 <tcp_timewait_input+0x28>
 800a6da:	4b2c      	ldr	r3, [pc, #176]	; (800a78c <tcp_timewait_input+0xcc>)
 800a6dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a6e0:	492b      	ldr	r1, [pc, #172]	; (800a790 <tcp_timewait_input+0xd0>)
 800a6e2:	482c      	ldr	r0, [pc, #176]	; (800a794 <tcp_timewait_input+0xd4>)
 800a6e4:	f005 fe2c 	bl	8010340 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a6e8:	4b27      	ldr	r3, [pc, #156]	; (800a788 <tcp_timewait_input+0xc8>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02a      	beq.n	800a74a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a6f4:	4b28      	ldr	r3, [pc, #160]	; (800a798 <tcp_timewait_input+0xd8>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	db2d      	blt.n	800a75e <tcp_timewait_input+0x9e>
 800a702:	4b25      	ldr	r3, [pc, #148]	; (800a798 <tcp_timewait_input+0xd8>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a70e:	440b      	add	r3, r1
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	dc23      	bgt.n	800a75e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a716:	4b21      	ldr	r3, [pc, #132]	; (800a79c <tcp_timewait_input+0xdc>)
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	4b21      	ldr	r3, [pc, #132]	; (800a7a0 <tcp_timewait_input+0xe0>)
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	4b1d      	ldr	r3, [pc, #116]	; (800a798 <tcp_timewait_input+0xd8>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a726:	4b1f      	ldr	r3, [pc, #124]	; (800a7a4 <tcp_timewait_input+0xe4>)
 800a728:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a72a:	885b      	ldrh	r3, [r3, #2]
 800a72c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a72e:	4a1d      	ldr	r2, [pc, #116]	; (800a7a4 <tcp_timewait_input+0xe4>)
 800a730:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a732:	8812      	ldrh	r2, [r2, #0]
 800a734:	b292      	uxth	r2, r2
 800a736:	9202      	str	r2, [sp, #8]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	4b1b      	ldr	r3, [pc, #108]	; (800a7a8 <tcp_timewait_input+0xe8>)
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <tcp_timewait_input+0xec>)
 800a740:	4602      	mov	r2, r0
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f002 fe70 	bl	800d428 <tcp_rst>
      return;
 800a748:	e01b      	b.n	800a782 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a74a:	4b0f      	ldr	r3, [pc, #60]	; (800a788 <tcp_timewait_input+0xc8>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a756:	4b16      	ldr	r3, [pc, #88]	; (800a7b0 <tcp_timewait_input+0xf0>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a75e:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <tcp_timewait_input+0xe0>)
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00c      	beq.n	800a780 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	8b5b      	ldrh	r3, [r3, #26]
 800a76a:	f043 0302 	orr.w	r3, r3, #2
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 f8a3 	bl	800c8c0 <tcp_output>
  }
  return;
 800a77a:	e001      	b.n	800a780 <tcp_timewait_input+0xc0>
    return;
 800a77c:	bf00      	nop
 800a77e:	e000      	b.n	800a782 <tcp_timewait_input+0xc2>
  return;
 800a780:	bf00      	nop
}
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200000f8 	.word	0x200000f8
 800a78c:	080125c0 	.word	0x080125c0
 800a790:	080127d8 	.word	0x080127d8
 800a794:	0801260c 	.word	0x0801260c
 800a798:	200000ec 	.word	0x200000ec
 800a79c:	200000f0 	.word	0x200000f0
 800a7a0:	200000f6 	.word	0x200000f6
 800a7a4:	200000dc 	.word	0x200000dc
 800a7a8:	20000460 	.word	0x20000460
 800a7ac:	20000464 	.word	0x20000464
 800a7b0:	20005b58 	.word	0x20005b58

0800a7b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b08d      	sub	sp, #52	; 0x34
 800a7b8:	af04      	add	r7, sp, #16
 800a7ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <tcp_process+0x24>
 800a7ca:	4ba5      	ldr	r3, [pc, #660]	; (800aa60 <tcp_process+0x2ac>)
 800a7cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a7d0:	49a4      	ldr	r1, [pc, #656]	; (800aa64 <tcp_process+0x2b0>)
 800a7d2:	48a5      	ldr	r0, [pc, #660]	; (800aa68 <tcp_process+0x2b4>)
 800a7d4:	f005 fdb4 	bl	8010340 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a7d8:	4ba4      	ldr	r3, [pc, #656]	; (800aa6c <tcp_process+0x2b8>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d04e      	beq.n	800a882 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	7d1b      	ldrb	r3, [r3, #20]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d108      	bne.n	800a7fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7f0:	4b9f      	ldr	r3, [pc, #636]	; (800aa70 <tcp_process+0x2bc>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d123      	bne.n	800a840 <tcp_process+0x8c>
        acceptable = 1;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	76fb      	strb	r3, [r7, #27]
 800a7fc:	e020      	b.n	800a840 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a802:	4b9c      	ldr	r3, [pc, #624]	; (800aa74 <tcp_process+0x2c0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d102      	bne.n	800a810 <tcp_process+0x5c>
        acceptable = 1;
 800a80a:	2301      	movs	r3, #1
 800a80c:	76fb      	strb	r3, [r7, #27]
 800a80e:	e017      	b.n	800a840 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a810:	4b98      	ldr	r3, [pc, #608]	; (800aa74 <tcp_process+0x2c0>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	db10      	blt.n	800a840 <tcp_process+0x8c>
 800a81e:	4b95      	ldr	r3, [pc, #596]	; (800aa74 <tcp_process+0x2c0>)
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a82a:	440b      	add	r3, r1
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	dc06      	bgt.n	800a840 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	8b5b      	ldrh	r3, [r3, #26]
 800a836:	f043 0302 	orr.w	r3, r3, #2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a840:	7efb      	ldrb	r3, [r7, #27]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d01b      	beq.n	800a87e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	7d1b      	ldrb	r3, [r3, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <tcp_process+0xa8>
 800a84e:	4b84      	ldr	r3, [pc, #528]	; (800aa60 <tcp_process+0x2ac>)
 800a850:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a854:	4988      	ldr	r1, [pc, #544]	; (800aa78 <tcp_process+0x2c4>)
 800a856:	4884      	ldr	r0, [pc, #528]	; (800aa68 <tcp_process+0x2b4>)
 800a858:	f005 fd72 	bl	8010340 <iprintf>
      recv_flags |= TF_RESET;
 800a85c:	4b87      	ldr	r3, [pc, #540]	; (800aa7c <tcp_process+0x2c8>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f043 0308 	orr.w	r3, r3, #8
 800a864:	b2da      	uxtb	r2, r3
 800a866:	4b85      	ldr	r3, [pc, #532]	; (800aa7c <tcp_process+0x2c8>)
 800a868:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8b5b      	ldrh	r3, [r3, #26]
 800a86e:	f023 0301 	bic.w	r3, r3, #1
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a878:	f06f 030d 	mvn.w	r3, #13
 800a87c:	e37a      	b.n	800af74 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	e378      	b.n	800af74 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a882:	4b7a      	ldr	r3, [pc, #488]	; (800aa6c <tcp_process+0x2b8>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d010      	beq.n	800a8b0 <tcp_process+0xfc>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7d1b      	ldrb	r3, [r3, #20]
 800a892:	2b02      	cmp	r3, #2
 800a894:	d00c      	beq.n	800a8b0 <tcp_process+0xfc>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7d1b      	ldrb	r3, [r3, #20]
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d008      	beq.n	800a8b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	8b5b      	ldrh	r3, [r3, #26]
 800a8a2:	f043 0302 	orr.w	r3, r3, #2
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e361      	b.n	800af74 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	8b5b      	ldrh	r3, [r3, #26]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a8bc:	4b70      	ldr	r3, [pc, #448]	; (800aa80 <tcp_process+0x2cc>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fc2d 	bl	800c134 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7d1b      	ldrb	r3, [r3, #20]
 800a8de:	3b02      	subs	r3, #2
 800a8e0:	2b07      	cmp	r3, #7
 800a8e2:	f200 8337 	bhi.w	800af54 <tcp_process+0x7a0>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <tcp_process+0x138>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a90d 	.word	0x0800a90d
 800a8f0:	0800ab3d 	.word	0x0800ab3d
 800a8f4:	0800acb5 	.word	0x0800acb5
 800a8f8:	0800acdf 	.word	0x0800acdf
 800a8fc:	0800ae03 	.word	0x0800ae03
 800a900:	0800acb5 	.word	0x0800acb5
 800a904:	0800ae8f 	.word	0x0800ae8f
 800a908:	0800af1f 	.word	0x0800af1f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a90c:	4b57      	ldr	r3, [pc, #348]	; (800aa6c <tcp_process+0x2b8>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80e4 	beq.w	800aae2 <tcp_process+0x32e>
 800a91a:	4b54      	ldr	r3, [pc, #336]	; (800aa6c <tcp_process+0x2b8>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80dd 	beq.w	800aae2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a92c:	1c5a      	adds	r2, r3, #1
 800a92e:	4b50      	ldr	r3, [pc, #320]	; (800aa70 <tcp_process+0x2bc>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	f040 80d5 	bne.w	800aae2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a938:	4b4e      	ldr	r3, [pc, #312]	; (800aa74 <tcp_process+0x2c0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a94a:	4b49      	ldr	r3, [pc, #292]	; (800aa70 <tcp_process+0x2bc>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a952:	4b4c      	ldr	r3, [pc, #304]	; (800aa84 <tcp_process+0x2d0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	89db      	ldrh	r3, [r3, #14]
 800a958:	b29a      	uxth	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a96c:	4b41      	ldr	r3, [pc, #260]	; (800aa74 <tcp_process+0x2c0>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	1e5a      	subs	r2, r3, #1
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2204      	movs	r2, #4
 800a97a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	4618      	mov	r0, r3
 800a986:	f004 faad 	bl	800eee4 <ip4_route>
 800a98a:	4601      	mov	r1, r0
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3304      	adds	r3, #4
 800a990:	461a      	mov	r2, r3
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff f88e 	bl	8009ab4 <tcp_eff_send_mss_netif>
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9a4:	009a      	lsls	r2, r3, #2
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800a9b0:	428b      	cmp	r3, r1
 800a9b2:	bf38      	it	cc
 800a9b4:	460b      	movcc	r3, r1
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d204      	bcs.n	800a9c4 <tcp_process+0x210>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	e00d      	b.n	800a9e0 <tcp_process+0x22c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d904      	bls.n	800a9dc <tcp_process+0x228>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	e001      	b.n	800a9e0 <tcp_process+0x22c>
 800a9dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d106      	bne.n	800a9fe <tcp_process+0x24a>
 800a9f0:	4b1b      	ldr	r3, [pc, #108]	; (800aa60 <tcp_process+0x2ac>)
 800a9f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a9f6:	4924      	ldr	r1, [pc, #144]	; (800aa88 <tcp_process+0x2d4>)
 800a9f8:	481b      	ldr	r0, [pc, #108]	; (800aa68 <tcp_process+0x2b4>)
 800a9fa:	f005 fca1 	bl	8010340 <iprintf>
        --pcb->snd_queuelen;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d111      	bne.n	800aa3e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <tcp_process+0x280>
 800aa26:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <tcp_process+0x2ac>)
 800aa28:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aa2c:	4917      	ldr	r1, [pc, #92]	; (800aa8c <tcp_process+0x2d8>)
 800aa2e:	480e      	ldr	r0, [pc, #56]	; (800aa68 <tcp_process+0x2b4>)
 800aa30:	f005 fc86 	bl	8010340 <iprintf>
          pcb->unsent = rseg->next;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa3c:	e003      	b.n	800aa46 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800aa46:	69f8      	ldr	r0, [r7, #28]
 800aa48:	f7fe fd3d 	bl	80094c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11d      	bne.n	800aa90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa5a:	861a      	strh	r2, [r3, #48]	; 0x30
 800aa5c:	e01f      	b.n	800aa9e <tcp_process+0x2ea>
 800aa5e:	bf00      	nop
 800aa60:	080125c0 	.word	0x080125c0
 800aa64:	080127f8 	.word	0x080127f8
 800aa68:	0801260c 	.word	0x0801260c
 800aa6c:	200000f8 	.word	0x200000f8
 800aa70:	200000f0 	.word	0x200000f0
 800aa74:	200000ec 	.word	0x200000ec
 800aa78:	08012814 	.word	0x08012814
 800aa7c:	200000f9 	.word	0x200000f9
 800aa80:	20005b58 	.word	0x20005b58
 800aa84:	200000dc 	.word	0x200000dc
 800aa88:	08012834 	.word	0x08012834
 800aa8c:	0801284c 	.word	0x0801284c
        } else {
          pcb->rtime = 0;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00a      	beq.n	800aabe <tcp_process+0x30a>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6910      	ldr	r0, [r2, #16]
 800aab2:	2200      	movs	r2, #0
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4798      	blx	r3
 800aab8:	4603      	mov	r3, r0
 800aaba:	76bb      	strb	r3, [r7, #26]
 800aabc:	e001      	b.n	800aac2 <tcp_process+0x30e>
 800aabe:	2300      	movs	r3, #0
 800aac0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800aac2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aac6:	f113 0f0d 	cmn.w	r3, #13
 800aaca:	d102      	bne.n	800aad2 <tcp_process+0x31e>
          return ERR_ABRT;
 800aacc:	f06f 030c 	mvn.w	r3, #12
 800aad0:	e250      	b.n	800af74 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	8b5b      	ldrh	r3, [r3, #26]
 800aad6:	f043 0302 	orr.w	r3, r3, #2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800aae0:	e23a      	b.n	800af58 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800aae2:	4b9d      	ldr	r3, [pc, #628]	; (800ad58 <tcp_process+0x5a4>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f003 0310 	and.w	r3, r3, #16
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 8234 	beq.w	800af58 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aaf0:	4b9a      	ldr	r3, [pc, #616]	; (800ad5c <tcp_process+0x5a8>)
 800aaf2:	6819      	ldr	r1, [r3, #0]
 800aaf4:	4b9a      	ldr	r3, [pc, #616]	; (800ad60 <tcp_process+0x5ac>)
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4b9a      	ldr	r3, [pc, #616]	; (800ad64 <tcp_process+0x5b0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab00:	4b99      	ldr	r3, [pc, #612]	; (800ad68 <tcp_process+0x5b4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab08:	4a97      	ldr	r2, [pc, #604]	; (800ad68 <tcp_process+0x5b4>)
 800ab0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab0c:	8812      	ldrh	r2, [r2, #0]
 800ab0e:	b292      	uxth	r2, r2
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	4b95      	ldr	r3, [pc, #596]	; (800ad6c <tcp_process+0x5b8>)
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	4b95      	ldr	r3, [pc, #596]	; (800ad70 <tcp_process+0x5bc>)
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f002 fc83 	bl	800d428 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab28:	2b05      	cmp	r3, #5
 800ab2a:	f200 8215 	bhi.w	800af58 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f002 fa4d 	bl	800cfd4 <tcp_rexmit_rto>
      break;
 800ab3a:	e20d      	b.n	800af58 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ab3c:	4b86      	ldr	r3, [pc, #536]	; (800ad58 <tcp_process+0x5a4>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f003 0310 	and.w	r3, r3, #16
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80a1 	beq.w	800ac8c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab4a:	4b84      	ldr	r3, [pc, #528]	; (800ad5c <tcp_process+0x5a8>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	3b01      	subs	r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	db7e      	blt.n	800ac58 <tcp_process+0x4a4>
 800ab5a:	4b80      	ldr	r3, [pc, #512]	; (800ad5c <tcp_process+0x5a8>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dc77      	bgt.n	800ac58 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2204      	movs	r2, #4
 800ab6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ab76:	23fa      	movs	r3, #250	; 0xfa
 800ab78:	76bb      	strb	r3, [r7, #26]
 800ab7a:	e01d      	b.n	800abb8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d106      	bne.n	800ab94 <tcp_process+0x3e0>
 800ab86:	4b7b      	ldr	r3, [pc, #492]	; (800ad74 <tcp_process+0x5c0>)
 800ab88:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ab8c:	497a      	ldr	r1, [pc, #488]	; (800ad78 <tcp_process+0x5c4>)
 800ab8e:	487b      	ldr	r0, [pc, #492]	; (800ad7c <tcp_process+0x5c8>)
 800ab90:	f005 fbd6 	bl	8010340 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <tcp_process+0x400>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	6910      	ldr	r0, [r2, #16]
 800aba8:	2200      	movs	r2, #0
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4798      	blx	r3
 800abae:	4603      	mov	r3, r0
 800abb0:	76bb      	strb	r3, [r7, #26]
 800abb2:	e001      	b.n	800abb8 <tcp_process+0x404>
 800abb4:	23f0      	movs	r3, #240	; 0xf0
 800abb6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800abb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00a      	beq.n	800abd6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800abc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abc4:	f113 0f0d 	cmn.w	r3, #13
 800abc8:	d002      	beq.n	800abd0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7fd ff90 	bl	8008af0 <tcp_abort>
            }
            return ERR_ABRT;
 800abd0:	f06f 030c 	mvn.w	r3, #12
 800abd4:	e1ce      	b.n	800af74 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fae0 	bl	800b19c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800abdc:	4b68      	ldr	r3, [pc, #416]	; (800ad80 <tcp_process+0x5cc>)
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <tcp_process+0x43c>
            recv_acked--;
 800abe4:	4b66      	ldr	r3, [pc, #408]	; (800ad80 <tcp_process+0x5cc>)
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	3b01      	subs	r3, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	4b64      	ldr	r3, [pc, #400]	; (800ad80 <tcp_process+0x5cc>)
 800abee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abf4:	009a      	lsls	r2, r3, #2
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac00:	428b      	cmp	r3, r1
 800ac02:	bf38      	it	cc
 800ac04:	460b      	movcc	r3, r1
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d204      	bcs.n	800ac14 <tcp_process+0x460>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	e00d      	b.n	800ac30 <tcp_process+0x47c>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d904      	bls.n	800ac2c <tcp_process+0x478>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	e001      	b.n	800ac30 <tcp_process+0x47c>
 800ac2c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ac36:	4b53      	ldr	r3, [pc, #332]	; (800ad84 <tcp_process+0x5d0>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d037      	beq.n	800acb2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	8b5b      	ldrh	r3, [r3, #26]
 800ac46:	f043 0302 	orr.w	r3, r3, #2
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2207      	movs	r2, #7
 800ac54:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ac56:	e02c      	b.n	800acb2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac58:	4b40      	ldr	r3, [pc, #256]	; (800ad5c <tcp_process+0x5a8>)
 800ac5a:	6819      	ldr	r1, [r3, #0]
 800ac5c:	4b40      	ldr	r3, [pc, #256]	; (800ad60 <tcp_process+0x5ac>)
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	4b40      	ldr	r3, [pc, #256]	; (800ad64 <tcp_process+0x5b0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac68:	4b3f      	ldr	r3, [pc, #252]	; (800ad68 <tcp_process+0x5b4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac70:	4a3d      	ldr	r2, [pc, #244]	; (800ad68 <tcp_process+0x5b4>)
 800ac72:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac74:	8812      	ldrh	r2, [r2, #0]
 800ac76:	b292      	uxth	r2, r2
 800ac78:	9202      	str	r2, [sp, #8]
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <tcp_process+0x5b8>)
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	4b3b      	ldr	r3, [pc, #236]	; (800ad70 <tcp_process+0x5bc>)
 800ac82:	4602      	mov	r2, r0
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f002 fbcf 	bl	800d428 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ac8a:	e167      	b.n	800af5c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ac8c:	4b32      	ldr	r3, [pc, #200]	; (800ad58 <tcp_process+0x5a4>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8161 	beq.w	800af5c <tcp_process+0x7a8>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	1e5a      	subs	r2, r3, #1
 800aca0:	4b30      	ldr	r3, [pc, #192]	; (800ad64 <tcp_process+0x5b0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f040 8159 	bne.w	800af5c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f002 f9b4 	bl	800d018 <tcp_rexmit>
      break;
 800acb0:	e154      	b.n	800af5c <tcp_process+0x7a8>
 800acb2:	e153      	b.n	800af5c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fa71 	bl	800b19c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800acba:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <tcp_process+0x5d0>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 814c 	beq.w	800af60 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	8b5b      	ldrh	r3, [r3, #26]
 800accc:	f043 0302 	orr.w	r3, r3, #2
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2207      	movs	r2, #7
 800acda:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acdc:	e140      	b.n	800af60 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa5c 	bl	800b19c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ace4:	4b27      	ldr	r3, [pc, #156]	; (800ad84 <tcp_process+0x5d0>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b00      	cmp	r3, #0
 800acee:	d071      	beq.n	800add4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <tcp_process+0x5a4>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d060      	beq.n	800adbe <tcp_process+0x60a>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad00:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <tcp_process+0x5a8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d15a      	bne.n	800adbe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d156      	bne.n	800adbe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8b5b      	ldrh	r3, [r3, #26]
 800ad14:	f043 0302 	orr.w	r3, r3, #2
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe fdbe 	bl	80098a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ad24:	4b18      	ldr	r3, [pc, #96]	; (800ad88 <tcp_process+0x5d4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d105      	bne.n	800ad3a <tcp_process+0x586>
 800ad2e:	4b16      	ldr	r3, [pc, #88]	; (800ad88 <tcp_process+0x5d4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <tcp_process+0x5d4>)
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e02e      	b.n	800ad98 <tcp_process+0x5e4>
 800ad3a:	4b13      	ldr	r3, [pc, #76]	; (800ad88 <tcp_process+0x5d4>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	e027      	b.n	800ad92 <tcp_process+0x5de>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d11f      	bne.n	800ad8c <tcp_process+0x5d8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	60da      	str	r2, [r3, #12]
 800ad54:	e020      	b.n	800ad98 <tcp_process+0x5e4>
 800ad56:	bf00      	nop
 800ad58:	200000f8 	.word	0x200000f8
 800ad5c:	200000f0 	.word	0x200000f0
 800ad60:	200000f6 	.word	0x200000f6
 800ad64:	200000ec 	.word	0x200000ec
 800ad68:	200000dc 	.word	0x200000dc
 800ad6c:	20000460 	.word	0x20000460
 800ad70:	20000464 	.word	0x20000464
 800ad74:	080125c0 	.word	0x080125c0
 800ad78:	08012860 	.word	0x08012860
 800ad7c:	0801260c 	.word	0x0801260c
 800ad80:	200000f4 	.word	0x200000f4
 800ad84:	200000f9 	.word	0x200000f9
 800ad88:	20005b54 	.word	0x20005b54
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	617b      	str	r3, [r7, #20]
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1d4      	bne.n	800ad42 <tcp_process+0x58e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	60da      	str	r2, [r3, #12]
 800ad9e:	4b77      	ldr	r3, [pc, #476]	; (800af7c <tcp_process+0x7c8>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	220a      	movs	r2, #10
 800ada8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800adaa:	4b75      	ldr	r3, [pc, #468]	; (800af80 <tcp_process+0x7cc>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60da      	str	r2, [r3, #12]
 800adb2:	4a73      	ldr	r2, [pc, #460]	; (800af80 <tcp_process+0x7cc>)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	f002 fcf8 	bl	800d7ac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800adbc:	e0d2      	b.n	800af64 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	8b5b      	ldrh	r3, [r3, #26]
 800adc2:	f043 0302 	orr.w	r3, r3, #2
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2208      	movs	r2, #8
 800add0:	751a      	strb	r2, [r3, #20]
      break;
 800add2:	e0c7      	b.n	800af64 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800add4:	4b6b      	ldr	r3, [pc, #428]	; (800af84 <tcp_process+0x7d0>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 0310 	and.w	r3, r3, #16
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 80c1 	beq.w	800af64 <tcp_process+0x7b0>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ade6:	4b68      	ldr	r3, [pc, #416]	; (800af88 <tcp_process+0x7d4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	f040 80ba 	bne.w	800af64 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f040 80b5 	bne.w	800af64 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2206      	movs	r2, #6
 800adfe:	751a      	strb	r2, [r3, #20]
      break;
 800ae00:	e0b0      	b.n	800af64 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f9ca 	bl	800b19c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae08:	4b60      	ldr	r3, [pc, #384]	; (800af8c <tcp_process+0x7d8>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f003 0320 	and.w	r3, r3, #32
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80a9 	beq.w	800af68 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	8b5b      	ldrh	r3, [r3, #26]
 800ae1a:	f043 0302 	orr.w	r3, r3, #2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7fe fd3b 	bl	80098a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae2a:	4b59      	ldr	r3, [pc, #356]	; (800af90 <tcp_process+0x7dc>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d105      	bne.n	800ae40 <tcp_process+0x68c>
 800ae34:	4b56      	ldr	r3, [pc, #344]	; (800af90 <tcp_process+0x7dc>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	4a55      	ldr	r2, [pc, #340]	; (800af90 <tcp_process+0x7dc>)
 800ae3c:	6013      	str	r3, [r2, #0]
 800ae3e:	e013      	b.n	800ae68 <tcp_process+0x6b4>
 800ae40:	4b53      	ldr	r3, [pc, #332]	; (800af90 <tcp_process+0x7dc>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e00c      	b.n	800ae62 <tcp_process+0x6ae>
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d104      	bne.n	800ae5c <tcp_process+0x6a8>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	60da      	str	r2, [r3, #12]
 800ae5a:	e005      	b.n	800ae68 <tcp_process+0x6b4>
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1ef      	bne.n	800ae48 <tcp_process+0x694>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	60da      	str	r2, [r3, #12]
 800ae6e:	4b43      	ldr	r3, [pc, #268]	; (800af7c <tcp_process+0x7c8>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	220a      	movs	r2, #10
 800ae78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae7a:	4b41      	ldr	r3, [pc, #260]	; (800af80 <tcp_process+0x7cc>)
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	60da      	str	r2, [r3, #12]
 800ae82:	4a3f      	ldr	r2, [pc, #252]	; (800af80 <tcp_process+0x7cc>)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	f002 fc90 	bl	800d7ac <tcp_timer_needed>
      }
      break;
 800ae8c:	e06c      	b.n	800af68 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f984 	bl	800b19c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae94:	4b3b      	ldr	r3, [pc, #236]	; (800af84 <tcp_process+0x7d0>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d065      	beq.n	800af6c <tcp_process+0x7b8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aea4:	4b38      	ldr	r3, [pc, #224]	; (800af88 <tcp_process+0x7d4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d15f      	bne.n	800af6c <tcp_process+0x7b8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d15b      	bne.n	800af6c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fe fcf3 	bl	80098a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aeba:	4b35      	ldr	r3, [pc, #212]	; (800af90 <tcp_process+0x7dc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d105      	bne.n	800aed0 <tcp_process+0x71c>
 800aec4:	4b32      	ldr	r3, [pc, #200]	; (800af90 <tcp_process+0x7dc>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	4a31      	ldr	r2, [pc, #196]	; (800af90 <tcp_process+0x7dc>)
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	e013      	b.n	800aef8 <tcp_process+0x744>
 800aed0:	4b2f      	ldr	r3, [pc, #188]	; (800af90 <tcp_process+0x7dc>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	e00c      	b.n	800aef2 <tcp_process+0x73e>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d104      	bne.n	800aeec <tcp_process+0x738>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	60da      	str	r2, [r3, #12]
 800aeea:	e005      	b.n	800aef8 <tcp_process+0x744>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1ef      	bne.n	800aed8 <tcp_process+0x724>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	60da      	str	r2, [r3, #12]
 800aefe:	4b1f      	ldr	r3, [pc, #124]	; (800af7c <tcp_process+0x7c8>)
 800af00:	2201      	movs	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	220a      	movs	r2, #10
 800af08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <tcp_process+0x7cc>)
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	4a1b      	ldr	r2, [pc, #108]	; (800af80 <tcp_process+0x7cc>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	f002 fc48 	bl	800d7ac <tcp_timer_needed>
      }
      break;
 800af1c:	e026      	b.n	800af6c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f93c 	bl	800b19c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af24:	4b17      	ldr	r3, [pc, #92]	; (800af84 <tcp_process+0x7d0>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	f003 0310 	and.w	r3, r3, #16
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01f      	beq.n	800af70 <tcp_process+0x7bc>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af34:	4b14      	ldr	r3, [pc, #80]	; (800af88 <tcp_process+0x7d4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d119      	bne.n	800af70 <tcp_process+0x7bc>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d115      	bne.n	800af70 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800af44:	4b11      	ldr	r3, [pc, #68]	; (800af8c <tcp_process+0x7d8>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f043 0310 	orr.w	r3, r3, #16
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <tcp_process+0x7d8>)
 800af50:	701a      	strb	r2, [r3, #0]
      }
      break;
 800af52:	e00d      	b.n	800af70 <tcp_process+0x7bc>
    default:
      break;
 800af54:	bf00      	nop
 800af56:	e00c      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af58:	bf00      	nop
 800af5a:	e00a      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af5c:	bf00      	nop
 800af5e:	e008      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af60:	bf00      	nop
 800af62:	e006      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af64:	bf00      	nop
 800af66:	e004      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af68:	bf00      	nop
 800af6a:	e002      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af6c:	bf00      	nop
 800af6e:	e000      	b.n	800af72 <tcp_process+0x7be>
      break;
 800af70:	bf00      	nop
  }
  return ERR_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3724      	adds	r7, #36	; 0x24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd90      	pop	{r4, r7, pc}
 800af7c:	20005b50 	.word	0x20005b50
 800af80:	20005b64 	.word	0x20005b64
 800af84:	200000f8 	.word	0x200000f8
 800af88:	200000f0 	.word	0x200000f0
 800af8c:	200000f9 	.word	0x200000f9
 800af90:	20005b54 	.word	0x20005b54

0800af94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <tcp_oos_insert_segment+0x1e>
 800afa4:	4b3b      	ldr	r3, [pc, #236]	; (800b094 <tcp_oos_insert_segment+0x100>)
 800afa6:	f240 421f 	movw	r2, #1055	; 0x41f
 800afaa:	493b      	ldr	r1, [pc, #236]	; (800b098 <tcp_oos_insert_segment+0x104>)
 800afac:	483b      	ldr	r0, [pc, #236]	; (800b09c <tcp_oos_insert_segment+0x108>)
 800afae:	f005 f9c7 	bl	8010340 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	899b      	ldrh	r3, [r3, #12]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fb fd7c 	bl	8006ab8 <lwip_htons>
 800afc0:	4603      	mov	r3, r0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d028      	beq.n	800b01e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800afcc:	6838      	ldr	r0, [r7, #0]
 800afce:	f7fe fa65 	bl	800949c <tcp_segs_free>
    next = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	603b      	str	r3, [r7, #0]
 800afd6:	e056      	b.n	800b086 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	899b      	ldrh	r3, [r3, #12]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fb fd69 	bl	8006ab8 <lwip_htons>
 800afe6:	4603      	mov	r3, r0
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	899b      	ldrh	r3, [r3, #12]
 800aff8:	b29c      	uxth	r4, r3
 800affa:	2001      	movs	r0, #1
 800affc:	f7fb fd5c 	bl	8006ab8 <lwip_htons>
 800b000:	4603      	mov	r3, r0
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	4322      	orrs	r2, r4
 800b00a:	b292      	uxth	r2, r2
 800b00c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7fe fa54 	bl	80094c6 <tcp_seg_free>
    while (next &&
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00e      	beq.n	800b042 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	891b      	ldrh	r3, [r3, #8]
 800b028:	461a      	mov	r2, r3
 800b02a:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <tcp_oos_insert_segment+0x10c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	441a      	add	r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	8909      	ldrh	r1, [r1, #8]
 800b03a:	440b      	add	r3, r1
 800b03c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b03e:	2b00      	cmp	r3, #0
 800b040:	daca      	bge.n	800afd8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01e      	beq.n	800b086 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	891b      	ldrh	r3, [r3, #8]
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b14      	ldr	r3, [pc, #80]	; (800b0a0 <tcp_oos_insert_segment+0x10c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	441a      	add	r2, r3
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dd12      	ble.n	800b086 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	b29a      	uxth	r2, r3
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <tcp_oos_insert_segment+0x10c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	891b      	ldrh	r3, [r3, #8]
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7fc fe27 	bl	8007cd4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	601a      	str	r2, [r3, #0]
}
 800b08c:	bf00      	nop
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	bd90      	pop	{r4, r7, pc}
 800b094:	080125c0 	.word	0x080125c0
 800b098:	08012880 	.word	0x08012880
 800b09c:	0801260c 	.word	0x0801260c
 800b0a0:	200000ec 	.word	0x200000ec

0800b0a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b0a4:	b5b0      	push	{r4, r5, r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b0b2:	e03e      	b.n	800b132 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fd f814 	bl	80080f0 <pbuf_clen>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0d2:	8a7a      	ldrh	r2, [r7, #18]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d906      	bls.n	800b0e6 <tcp_free_acked_segments+0x42>
 800b0d8:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <tcp_free_acked_segments+0xe0>)
 800b0da:	f240 4257 	movw	r2, #1111	; 0x457
 800b0de:	492a      	ldr	r1, [pc, #168]	; (800b188 <tcp_free_acked_segments+0xe4>)
 800b0e0:	482a      	ldr	r0, [pc, #168]	; (800b18c <tcp_free_acked_segments+0xe8>)
 800b0e2:	f005 f92d 	bl	8010340 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b0ec:	8a7b      	ldrh	r3, [r7, #18]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	891a      	ldrh	r2, [r3, #8]
 800b0fc:	4b24      	ldr	r3, [pc, #144]	; (800b190 <tcp_free_acked_segments+0xec>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	4413      	add	r3, r2
 800b102:	b29a      	uxth	r2, r3
 800b104:	4b22      	ldr	r3, [pc, #136]	; (800b190 <tcp_free_acked_segments+0xec>)
 800b106:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b108:	6978      	ldr	r0, [r7, #20]
 800b10a:	f7fe f9dc 	bl	80094c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00c      	beq.n	800b132 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <tcp_free_acked_segments+0x8e>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <tcp_free_acked_segments+0x8e>
 800b124:	4b17      	ldr	r3, [pc, #92]	; (800b184 <tcp_free_acked_segments+0xe0>)
 800b126:	f240 4261 	movw	r2, #1121	; 0x461
 800b12a:	491a      	ldr	r1, [pc, #104]	; (800b194 <tcp_free_acked_segments+0xf0>)
 800b12c:	4817      	ldr	r0, [pc, #92]	; (800b18c <tcp_free_acked_segments+0xe8>)
 800b12e:	f005 f907 	bl	8010340 <iprintf>
  while (seg_list != NULL &&
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d020      	beq.n	800b17a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fb fccf 	bl	8006ae2 <lwip_htonl>
 800b144:	4604      	mov	r4, r0
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	891b      	ldrh	r3, [r3, #8]
 800b14a:	461d      	mov	r5, r3
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	899b      	ldrh	r3, [r3, #12]
 800b152:	b29b      	uxth	r3, r3
 800b154:	4618      	mov	r0, r3
 800b156:	f7fb fcaf 	bl	8006ab8 <lwip_htons>
 800b15a:	4603      	mov	r3, r0
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <tcp_free_acked_segments+0xc6>
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <tcp_free_acked_segments+0xc8>
 800b16a:	2300      	movs	r3, #0
 800b16c:	442b      	add	r3, r5
 800b16e:	18e2      	adds	r2, r4, r3
 800b170:	4b09      	ldr	r3, [pc, #36]	; (800b198 <tcp_free_acked_segments+0xf4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b176:	2b00      	cmp	r3, #0
 800b178:	dd9c      	ble.n	800b0b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b17a:	68bb      	ldr	r3, [r7, #8]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bdb0      	pop	{r4, r5, r7, pc}
 800b184:	080125c0 	.word	0x080125c0
 800b188:	080128a8 	.word	0x080128a8
 800b18c:	0801260c 	.word	0x0801260c
 800b190:	200000f4 	.word	0x200000f4
 800b194:	080128d0 	.word	0x080128d0
 800b198:	200000f0 	.word	0x200000f0

0800b19c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b19c:	b5b0      	push	{r4, r5, r7, lr}
 800b19e:	b094      	sub	sp, #80	; 0x50
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d106      	bne.n	800b1bc <tcp_receive+0x20>
 800b1ae:	4ba6      	ldr	r3, [pc, #664]	; (800b448 <tcp_receive+0x2ac>)
 800b1b0:	f240 427b 	movw	r2, #1147	; 0x47b
 800b1b4:	49a5      	ldr	r1, [pc, #660]	; (800b44c <tcp_receive+0x2b0>)
 800b1b6:	48a6      	ldr	r0, [pc, #664]	; (800b450 <tcp_receive+0x2b4>)
 800b1b8:	f005 f8c2 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7d1b      	ldrb	r3, [r3, #20]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d806      	bhi.n	800b1d2 <tcp_receive+0x36>
 800b1c4:	4ba0      	ldr	r3, [pc, #640]	; (800b448 <tcp_receive+0x2ac>)
 800b1c6:	f240 427c 	movw	r2, #1148	; 0x47c
 800b1ca:	49a2      	ldr	r1, [pc, #648]	; (800b454 <tcp_receive+0x2b8>)
 800b1cc:	48a0      	ldr	r0, [pc, #640]	; (800b450 <tcp_receive+0x2b4>)
 800b1ce:	f005 f8b7 	bl	8010340 <iprintf>

  if (flags & TCP_ACK) {
 800b1d2:	4ba1      	ldr	r3, [pc, #644]	; (800b458 <tcp_receive+0x2bc>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	f003 0310 	and.w	r3, r3, #16
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 8263 	beq.w	800b6a6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ec:	4413      	add	r3, r2
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1f4:	4b99      	ldr	r3, [pc, #612]	; (800b45c <tcp_receive+0x2c0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	db1b      	blt.n	800b236 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b202:	4b96      	ldr	r3, [pc, #600]	; (800b45c <tcp_receive+0x2c0>)
 800b204:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b206:	429a      	cmp	r2, r3
 800b208:	d106      	bne.n	800b218 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b20e:	4b94      	ldr	r3, [pc, #592]	; (800b460 <tcp_receive+0x2c4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	db0e      	blt.n	800b236 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b21c:	4b90      	ldr	r3, [pc, #576]	; (800b460 <tcp_receive+0x2c4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b220:	429a      	cmp	r2, r3
 800b222:	d125      	bne.n	800b270 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b224:	4b8f      	ldr	r3, [pc, #572]	; (800b464 <tcp_receive+0x2c8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	89db      	ldrh	r3, [r3, #14]
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b232:	429a      	cmp	r2, r3
 800b234:	d91c      	bls.n	800b270 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b236:	4b8b      	ldr	r3, [pc, #556]	; (800b464 <tcp_receive+0x2c8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	89db      	ldrh	r3, [r3, #14]
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b250:	429a      	cmp	r2, r3
 800b252:	d205      	bcs.n	800b260 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b260:	4b7e      	ldr	r3, [pc, #504]	; (800b45c <tcp_receive+0x2c0>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b268:	4b7d      	ldr	r3, [pc, #500]	; (800b460 <tcp_receive+0x2c4>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b270:	4b7b      	ldr	r3, [pc, #492]	; (800b460 <tcp_receive+0x2c4>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc58      	bgt.n	800b330 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b27e:	4b7a      	ldr	r3, [pc, #488]	; (800b468 <tcp_receive+0x2cc>)
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d14b      	bne.n	800b31e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b290:	4413      	add	r3, r2
 800b292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b294:	429a      	cmp	r2, r3
 800b296:	d142      	bne.n	800b31e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	db3d      	blt.n	800b31e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2a6:	4b6e      	ldr	r3, [pc, #440]	; (800b460 <tcp_receive+0x2c4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d137      	bne.n	800b31e <tcp_receive+0x182>
              found_dupack = 1;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2b8:	2bff      	cmp	r3, #255	; 0xff
 800b2ba:	d007      	beq.n	800b2cc <tcp_receive+0x130>
                ++pcb->dupacks;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d91b      	bls.n	800b30e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2e0:	4413      	add	r3, r2
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d30a      	bcc.n	800b304 <tcp_receive+0x168>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2f8:	4413      	add	r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b302:	e004      	b.n	800b30e <tcp_receive+0x172>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b30a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b314:	2b02      	cmp	r3, #2
 800b316:	d902      	bls.n	800b31e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f001 fee9 	bl	800d0f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b320:	2b00      	cmp	r3, #0
 800b322:	f040 8160 	bne.w	800b5e6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b32e:	e15a      	b.n	800b5e6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b330:	4b4b      	ldr	r3, [pc, #300]	; (800b460 <tcp_receive+0x2c4>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f2c0 814d 	blt.w	800b5dc <tcp_receive+0x440>
 800b342:	4b47      	ldr	r3, [pc, #284]	; (800b460 <tcp_receive+0x2c4>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f300 8145 	bgt.w	800b5dc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	8b5b      	ldrh	r3, [r3, #26]
 800b356:	f003 0304 	and.w	r3, r3, #4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d010      	beq.n	800b380 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	8b5b      	ldrh	r3, [r3, #26]
 800b362:	f023 0304 	bic.w	r3, r3, #4
 800b366:	b29a      	uxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b38e:	10db      	asrs	r3, r3, #3
 800b390:	b21b      	sxth	r3, r3
 800b392:	b29a      	uxth	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4413      	add	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	b21a      	sxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <tcp_receive+0x2c4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b3c0:	4b27      	ldr	r3, [pc, #156]	; (800b460 <tcp_receive+0x2c4>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	7d1b      	ldrb	r3, [r3, #20]
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	f240 8096 	bls.w	800b4fe <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d244      	bcs.n	800b46c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	8b5b      	ldrh	r3, [r3, #26]
 800b3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <tcp_receive+0x256>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <tcp_receive+0x258>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b3f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b402:	fb12 f303 	smulbb	r3, r2, r3
 800b406:	b29b      	uxth	r3, r3
 800b408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b40a:	4293      	cmp	r3, r2
 800b40c:	bf28      	it	cs
 800b40e:	4613      	movcs	r3, r2
 800b410:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b41a:	4413      	add	r3, r2
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b424:	429a      	cmp	r2, r3
 800b426:	d309      	bcc.n	800b43c <tcp_receive+0x2a0>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b42e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b430:	4413      	add	r3, r2
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b43a:	e060      	b.n	800b4fe <tcp_receive+0x362>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b442:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b446:	e05a      	b.n	800b4fe <tcp_receive+0x362>
 800b448:	080125c0 	.word	0x080125c0
 800b44c:	080128f0 	.word	0x080128f0
 800b450:	0801260c 	.word	0x0801260c
 800b454:	0801290c 	.word	0x0801290c
 800b458:	200000f8 	.word	0x200000f8
 800b45c:	200000ec 	.word	0x200000ec
 800b460:	200000f0 	.word	0x200000f0
 800b464:	200000dc 	.word	0x200000dc
 800b468:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b474:	4413      	add	r3, r2
 800b476:	b29a      	uxth	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b47e:	429a      	cmp	r2, r3
 800b480:	d309      	bcc.n	800b496 <tcp_receive+0x2fa>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b488:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b48a:	4413      	add	r3, r2
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b494:	e004      	b.n	800b4a0 <tcp_receive+0x304>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d326      	bcc.n	800b4fe <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d30a      	bcc.n	800b4f4 <tcp_receive+0x358>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e8:	4413      	add	r3, r2
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4f2:	e004      	b.n	800b4fe <tcp_receive+0x362>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b506:	4a98      	ldr	r2, [pc, #608]	; (800b768 <tcp_receive+0x5cc>)
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff fdcb 	bl	800b0a4 <tcp_free_acked_segments>
 800b50e:	4602      	mov	r2, r0
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b51c:	4a93      	ldr	r2, [pc, #588]	; (800b76c <tcp_receive+0x5d0>)
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff fdc0 	bl	800b0a4 <tcp_free_acked_segments>
 800b524:	4602      	mov	r2, r0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b538:	861a      	strh	r2, [r3, #48]	; 0x30
 800b53a:	e002      	b.n	800b542 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b55e:	4b84      	ldr	r3, [pc, #528]	; (800b770 <tcp_receive+0x5d4>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	4413      	add	r3, r2
 800b564:	b29a      	uxth	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8b5b      	ldrh	r3, [r3, #26]
 800b570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b574:	2b00      	cmp	r3, #0
 800b576:	d035      	beq.n	800b5e4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d118      	bne.n	800b5b2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00c      	beq.n	800b5a2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	f7fb faa4 	bl	8006ae2 <lwip_htonl>
 800b59a:	4603      	mov	r3, r0
 800b59c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dc20      	bgt.n	800b5e4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	8b5b      	ldrh	r3, [r3, #26]
 800b5a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5b0:	e018      	b.n	800b5e4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fb fa8f 	bl	8006ae2 <lwip_htonl>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	1ae3      	subs	r3, r4, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dc0b      	bgt.n	800b5e4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8b5b      	ldrh	r3, [r3, #26]
 800b5d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5da:	e003      	b.n	800b5e4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 ff75 	bl	800d4cc <tcp_send_empty_ack>
 800b5e2:	e000      	b.n	800b5e6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5e4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d05b      	beq.n	800b6a6 <tcp_receive+0x50a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f2:	4b60      	ldr	r3, [pc, #384]	; (800b774 <tcp_receive+0x5d8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da54      	bge.n	800b6a6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b5fc:	4b5e      	ldr	r3, [pc, #376]	; (800b778 <tcp_receive+0x5dc>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	b29a      	uxth	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b606:	b29b      	uxth	r3, r3
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b610:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b61a:	10db      	asrs	r3, r3, #3
 800b61c:	b21b      	sxth	r3, r3
 800b61e:	b29b      	uxth	r3, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b29b      	uxth	r3, r3
 800b624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b62e:	b29a      	uxth	r2, r3
 800b630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b634:	4413      	add	r3, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	b21a      	sxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b63e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b642:	2b00      	cmp	r3, #0
 800b644:	da05      	bge.n	800b652 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b646:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b64a:	425b      	negs	r3, r3
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b652:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b65c:	109b      	asrs	r3, r3, #2
 800b65e:	b21b      	sxth	r3, r3
 800b660:	b29b      	uxth	r3, r3
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	b29b      	uxth	r3, r3
 800b666:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b670:	b29a      	uxth	r2, r3
 800b672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b676:	4413      	add	r3, r2
 800b678:	b29b      	uxth	r3, r3
 800b67a:	b21a      	sxth	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b686:	10db      	asrs	r3, r3, #3
 800b688:	b21b      	sxth	r3, r3
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b692:	b29b      	uxth	r3, r3
 800b694:	4413      	add	r3, r2
 800b696:	b29b      	uxth	r3, r3
 800b698:	b21a      	sxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b6a6:	4b35      	ldr	r3, [pc, #212]	; (800b77c <tcp_receive+0x5e0>)
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 84e1 	beq.w	800c072 <tcp_receive+0xed6>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	7d1b      	ldrb	r3, [r3, #20]
 800b6b4:	2b06      	cmp	r3, #6
 800b6b6:	f200 84dc 	bhi.w	800c072 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6be:	4b30      	ldr	r3, [pc, #192]	; (800b780 <tcp_receive+0x5e4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f2c0 808e 	blt.w	800b7e8 <tcp_receive+0x64c>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	; (800b77c <tcp_receive+0x5e0>)
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <tcp_receive+0x5e4>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	440b      	add	r3, r1
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	3301      	adds	r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f300 8081 	bgt.w	800b7e8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b6e6:	4b27      	ldr	r3, [pc, #156]	; (800b784 <tcp_receive+0x5e8>)
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f0:	4b23      	ldr	r3, [pc, #140]	; (800b780 <tcp_receive+0x5e4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b6f8:	4b22      	ldr	r3, [pc, #136]	; (800b784 <tcp_receive+0x5e8>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d106      	bne.n	800b70e <tcp_receive+0x572>
 800b700:	4b21      	ldr	r3, [pc, #132]	; (800b788 <tcp_receive+0x5ec>)
 800b702:	f240 5294 	movw	r2, #1428	; 0x594
 800b706:	4921      	ldr	r1, [pc, #132]	; (800b78c <tcp_receive+0x5f0>)
 800b708:	4821      	ldr	r0, [pc, #132]	; (800b790 <tcp_receive+0x5f4>)
 800b70a:	f004 fe19 	bl	8010340 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b714:	4293      	cmp	r3, r2
 800b716:	d906      	bls.n	800b726 <tcp_receive+0x58a>
 800b718:	4b1b      	ldr	r3, [pc, #108]	; (800b788 <tcp_receive+0x5ec>)
 800b71a:	f240 5295 	movw	r2, #1429	; 0x595
 800b71e:	491d      	ldr	r1, [pc, #116]	; (800b794 <tcp_receive+0x5f8>)
 800b720:	481b      	ldr	r0, [pc, #108]	; (800b790 <tcp_receive+0x5f4>)
 800b722:	f004 fe0d 	bl	8010340 <iprintf>
      off = (u16_t)off32;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b72c:	4b15      	ldr	r3, [pc, #84]	; (800b784 <tcp_receive+0x5e8>)
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	891b      	ldrh	r3, [r3, #8]
 800b732:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b736:	429a      	cmp	r2, r3
 800b738:	d906      	bls.n	800b748 <tcp_receive+0x5ac>
 800b73a:	4b13      	ldr	r3, [pc, #76]	; (800b788 <tcp_receive+0x5ec>)
 800b73c:	f240 5297 	movw	r2, #1431	; 0x597
 800b740:	4915      	ldr	r1, [pc, #84]	; (800b798 <tcp_receive+0x5fc>)
 800b742:	4813      	ldr	r0, [pc, #76]	; (800b790 <tcp_receive+0x5f4>)
 800b744:	f004 fdfc 	bl	8010340 <iprintf>
      inseg.len -= off;
 800b748:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <tcp_receive+0x5e8>)
 800b74a:	891a      	ldrh	r2, [r3, #8]
 800b74c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	b29a      	uxth	r2, r3
 800b754:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <tcp_receive+0x5e8>)
 800b756:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <tcp_receive+0x5e8>)
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	891a      	ldrh	r2, [r3, #8]
 800b75e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b766:	e029      	b.n	800b7bc <tcp_receive+0x620>
 800b768:	08012928 	.word	0x08012928
 800b76c:	08012930 	.word	0x08012930
 800b770:	200000f4 	.word	0x200000f4
 800b774:	200000f0 	.word	0x200000f0
 800b778:	20005b58 	.word	0x20005b58
 800b77c:	200000f6 	.word	0x200000f6
 800b780:	200000ec 	.word	0x200000ec
 800b784:	200000cc 	.word	0x200000cc
 800b788:	080125c0 	.word	0x080125c0
 800b78c:	08012938 	.word	0x08012938
 800b790:	0801260c 	.word	0x0801260c
 800b794:	08012948 	.word	0x08012948
 800b798:	08012958 	.word	0x08012958
        off -= p->len;
 800b79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b79e:	895b      	ldrh	r3, [r3, #10]
 800b7a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7be:	895b      	ldrh	r3, [r3, #10]
 800b7c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d8e9      	bhi.n	800b79c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b7c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b7d0:	f7fc fb80 	bl	8007ed4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	4a91      	ldr	r2, [pc, #580]	; (800ba20 <tcp_receive+0x884>)
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	4b91      	ldr	r3, [pc, #580]	; (800ba24 <tcp_receive+0x888>)
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	4a8f      	ldr	r2, [pc, #572]	; (800ba20 <tcp_receive+0x884>)
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7e6:	e00d      	b.n	800b804 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b7e8:	4b8d      	ldr	r3, [pc, #564]	; (800ba20 <tcp_receive+0x884>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da06      	bge.n	800b804 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8b5b      	ldrh	r3, [r3, #26]
 800b7fa:	f043 0302 	orr.w	r3, r3, #2
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b804:	4b86      	ldr	r3, [pc, #536]	; (800ba20 <tcp_receive+0x884>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f2c0 842a 	blt.w	800c068 <tcp_receive+0xecc>
 800b814:	4b82      	ldr	r3, [pc, #520]	; (800ba20 <tcp_receive+0x884>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	6879      	ldr	r1, [r7, #4]
 800b81e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b820:	440b      	add	r3, r1
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	3301      	adds	r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	f300 841e 	bgt.w	800c068 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b830:	4b7b      	ldr	r3, [pc, #492]	; (800ba20 <tcp_receive+0x884>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	f040 829a 	bne.w	800bd6e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b83a:	4b7a      	ldr	r3, [pc, #488]	; (800ba24 <tcp_receive+0x888>)
 800b83c:	891c      	ldrh	r4, [r3, #8]
 800b83e:	4b79      	ldr	r3, [pc, #484]	; (800ba24 <tcp_receive+0x888>)
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	899b      	ldrh	r3, [r3, #12]
 800b844:	b29b      	uxth	r3, r3
 800b846:	4618      	mov	r0, r3
 800b848:	f7fb f936 	bl	8006ab8 <lwip_htons>
 800b84c:	4603      	mov	r3, r0
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	f003 0303 	and.w	r3, r3, #3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <tcp_receive+0x6c0>
 800b858:	2301      	movs	r3, #1
 800b85a:	e000      	b.n	800b85e <tcp_receive+0x6c2>
 800b85c:	2300      	movs	r3, #0
 800b85e:	4423      	add	r3, r4
 800b860:	b29a      	uxth	r2, r3
 800b862:	4b71      	ldr	r3, [pc, #452]	; (800ba28 <tcp_receive+0x88c>)
 800b864:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b86a:	4b6f      	ldr	r3, [pc, #444]	; (800ba28 <tcp_receive+0x88c>)
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d275      	bcs.n	800b95e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b872:	4b6c      	ldr	r3, [pc, #432]	; (800ba24 <tcp_receive+0x888>)
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	899b      	ldrh	r3, [r3, #12]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fb f91c 	bl	8006ab8 <lwip_htons>
 800b880:	4603      	mov	r3, r0
 800b882:	b2db      	uxtb	r3, r3
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01f      	beq.n	800b8cc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b88c:	4b65      	ldr	r3, [pc, #404]	; (800ba24 <tcp_receive+0x888>)
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	899b      	ldrh	r3, [r3, #12]
 800b892:	b29b      	uxth	r3, r3
 800b894:	b21b      	sxth	r3, r3
 800b896:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b89a:	b21c      	sxth	r4, r3
 800b89c:	4b61      	ldr	r3, [pc, #388]	; (800ba24 <tcp_receive+0x888>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	899b      	ldrh	r3, [r3, #12]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fb f907 	bl	8006ab8 <lwip_htons>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fb f8fe 	bl	8006ab8 <lwip_htons>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	b21b      	sxth	r3, r3
 800b8c0:	4323      	orrs	r3, r4
 800b8c2:	b21a      	sxth	r2, r3
 800b8c4:	4b57      	ldr	r3, [pc, #348]	; (800ba24 <tcp_receive+0x888>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8d0:	4b54      	ldr	r3, [pc, #336]	; (800ba24 <tcp_receive+0x888>)
 800b8d2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b8d4:	4b53      	ldr	r3, [pc, #332]	; (800ba24 <tcp_receive+0x888>)
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	899b      	ldrh	r3, [r3, #12]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fb f8eb 	bl	8006ab8 <lwip_htons>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	f003 0302 	and.w	r3, r3, #2
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d005      	beq.n	800b8fa <tcp_receive+0x75e>
            inseg.len -= 1;
 800b8ee:	4b4d      	ldr	r3, [pc, #308]	; (800ba24 <tcp_receive+0x888>)
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	4b4b      	ldr	r3, [pc, #300]	; (800ba24 <tcp_receive+0x888>)
 800b8f8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b8fa:	4b4a      	ldr	r3, [pc, #296]	; (800ba24 <tcp_receive+0x888>)
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	4a49      	ldr	r2, [pc, #292]	; (800ba24 <tcp_receive+0x888>)
 800b900:	8912      	ldrh	r2, [r2, #8]
 800b902:	4611      	mov	r1, r2
 800b904:	4618      	mov	r0, r3
 800b906:	f7fc f9e5 	bl	8007cd4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b90a:	4b46      	ldr	r3, [pc, #280]	; (800ba24 <tcp_receive+0x888>)
 800b90c:	891c      	ldrh	r4, [r3, #8]
 800b90e:	4b45      	ldr	r3, [pc, #276]	; (800ba24 <tcp_receive+0x888>)
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	899b      	ldrh	r3, [r3, #12]
 800b914:	b29b      	uxth	r3, r3
 800b916:	4618      	mov	r0, r3
 800b918:	f7fb f8ce 	bl	8006ab8 <lwip_htons>
 800b91c:	4603      	mov	r3, r0
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <tcp_receive+0x790>
 800b928:	2301      	movs	r3, #1
 800b92a:	e000      	b.n	800b92e <tcp_receive+0x792>
 800b92c:	2300      	movs	r3, #0
 800b92e:	4423      	add	r3, r4
 800b930:	b29a      	uxth	r2, r3
 800b932:	4b3d      	ldr	r3, [pc, #244]	; (800ba28 <tcp_receive+0x88c>)
 800b934:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b936:	4b3c      	ldr	r3, [pc, #240]	; (800ba28 <tcp_receive+0x88c>)
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	4b38      	ldr	r3, [pc, #224]	; (800ba20 <tcp_receive+0x884>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	441a      	add	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b94a:	440b      	add	r3, r1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d006      	beq.n	800b95e <tcp_receive+0x7c2>
 800b950:	4b36      	ldr	r3, [pc, #216]	; (800ba2c <tcp_receive+0x890>)
 800b952:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b956:	4936      	ldr	r1, [pc, #216]	; (800ba30 <tcp_receive+0x894>)
 800b958:	4836      	ldr	r0, [pc, #216]	; (800ba34 <tcp_receive+0x898>)
 800b95a:	f004 fcf1 	bl	8010340 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80e7 	beq.w	800bb36 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b968:	4b2e      	ldr	r3, [pc, #184]	; (800ba24 <tcp_receive+0x888>)
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	899b      	ldrh	r3, [r3, #12]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4618      	mov	r0, r3
 800b972:	f7fb f8a1 	bl	8006ab8 <lwip_htons>
 800b976:	4603      	mov	r3, r0
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d010      	beq.n	800b9a4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b982:	e00a      	b.n	800b99a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b988:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7fd fd96 	bl	80094c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1f0      	bne.n	800b984 <tcp_receive+0x7e8>
 800b9a2:	e0c8      	b.n	800bb36 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b9aa:	e052      	b.n	800ba52 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	899b      	ldrh	r3, [r3, #12]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fb f87f 	bl	8006ab8 <lwip_htons>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d03d      	beq.n	800ba42 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b9c6:	4b17      	ldr	r3, [pc, #92]	; (800ba24 <tcp_receive+0x888>)
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	899b      	ldrh	r3, [r3, #12]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fb f872 	bl	8006ab8 <lwip_htons>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d130      	bne.n	800ba42 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b9e0:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <tcp_receive+0x888>)
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	899b      	ldrh	r3, [r3, #12]
 800b9e6:	b29c      	uxth	r4, r3
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f7fb f865 	bl	8006ab8 <lwip_htons>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <tcp_receive+0x888>)
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	4322      	orrs	r2, r4
 800b9f8:	b292      	uxth	r2, r2
 800b9fa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b9fc:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <tcp_receive+0x888>)
 800b9fe:	891c      	ldrh	r4, [r3, #8]
 800ba00:	4b08      	ldr	r3, [pc, #32]	; (800ba24 <tcp_receive+0x888>)
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fb f855 	bl	8006ab8 <lwip_htons>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00e      	beq.n	800ba38 <tcp_receive+0x89c>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e00d      	b.n	800ba3a <tcp_receive+0x89e>
 800ba1e:	bf00      	nop
 800ba20:	200000ec 	.word	0x200000ec
 800ba24:	200000cc 	.word	0x200000cc
 800ba28:	200000f6 	.word	0x200000f6
 800ba2c:	080125c0 	.word	0x080125c0
 800ba30:	08012968 	.word	0x08012968
 800ba34:	0801260c 	.word	0x0801260c
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4423      	add	r3, r4
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	4b98      	ldr	r3, [pc, #608]	; (800bca0 <tcp_receive+0xb04>)
 800ba40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ba42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba44:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ba46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ba4c:	6938      	ldr	r0, [r7, #16]
 800ba4e:	f7fd fd3a 	bl	80094c6 <tcp_seg_free>
            while (next &&
 800ba52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00e      	beq.n	800ba76 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ba58:	4b91      	ldr	r3, [pc, #580]	; (800bca0 <tcp_receive+0xb04>)
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b91      	ldr	r3, [pc, #580]	; (800bca4 <tcp_receive+0xb08>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	441a      	add	r2, r3
 800ba64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba6c:	8909      	ldrh	r1, [r1, #8]
 800ba6e:	440b      	add	r3, r1
 800ba70:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da9a      	bge.n	800b9ac <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ba76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d059      	beq.n	800bb30 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ba7c:	4b88      	ldr	r3, [pc, #544]	; (800bca0 <tcp_receive+0xb04>)
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	4b88      	ldr	r3, [pc, #544]	; (800bca4 <tcp_receive+0xb08>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	441a      	add	r2, r3
 800ba88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dd4d      	ble.n	800bb30 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	4b81      	ldr	r3, [pc, #516]	; (800bca4 <tcp_receive+0xb08>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	4b80      	ldr	r3, [pc, #512]	; (800bca8 <tcp_receive+0xb0c>)
 800baa8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800baaa:	4b7f      	ldr	r3, [pc, #508]	; (800bca8 <tcp_receive+0xb0c>)
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	899b      	ldrh	r3, [r3, #12]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fb f800 	bl	8006ab8 <lwip_htons>
 800bab8:	4603      	mov	r3, r0
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d005      	beq.n	800bad0 <tcp_receive+0x934>
                inseg.len -= 1;
 800bac4:	4b78      	ldr	r3, [pc, #480]	; (800bca8 <tcp_receive+0xb0c>)
 800bac6:	891b      	ldrh	r3, [r3, #8]
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	4b76      	ldr	r3, [pc, #472]	; (800bca8 <tcp_receive+0xb0c>)
 800bace:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bad0:	4b75      	ldr	r3, [pc, #468]	; (800bca8 <tcp_receive+0xb0c>)
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	4a74      	ldr	r2, [pc, #464]	; (800bca8 <tcp_receive+0xb0c>)
 800bad6:	8912      	ldrh	r2, [r2, #8]
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f7fc f8fa 	bl	8007cd4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bae0:	4b71      	ldr	r3, [pc, #452]	; (800bca8 <tcp_receive+0xb0c>)
 800bae2:	891c      	ldrh	r4, [r3, #8]
 800bae4:	4b70      	ldr	r3, [pc, #448]	; (800bca8 <tcp_receive+0xb0c>)
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	899b      	ldrh	r3, [r3, #12]
 800baea:	b29b      	uxth	r3, r3
 800baec:	4618      	mov	r0, r3
 800baee:	f7fa ffe3 	bl	8006ab8 <lwip_htons>
 800baf2:	4603      	mov	r3, r0
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <tcp_receive+0x966>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <tcp_receive+0x968>
 800bb02:	2300      	movs	r3, #0
 800bb04:	4423      	add	r3, r4
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	4b65      	ldr	r3, [pc, #404]	; (800bca0 <tcp_receive+0xb04>)
 800bb0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bb0c:	4b64      	ldr	r3, [pc, #400]	; (800bca0 <tcp_receive+0xb04>)
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	461a      	mov	r2, r3
 800bb12:	4b64      	ldr	r3, [pc, #400]	; (800bca4 <tcp_receive+0xb08>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	441a      	add	r2, r3
 800bb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d006      	beq.n	800bb30 <tcp_receive+0x994>
 800bb22:	4b62      	ldr	r3, [pc, #392]	; (800bcac <tcp_receive+0xb10>)
 800bb24:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bb28:	4961      	ldr	r1, [pc, #388]	; (800bcb0 <tcp_receive+0xb14>)
 800bb2a:	4862      	ldr	r0, [pc, #392]	; (800bcb4 <tcp_receive+0xb18>)
 800bb2c:	f004 fc08 	bl	8010340 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb34:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bb36:	4b5a      	ldr	r3, [pc, #360]	; (800bca0 <tcp_receive+0xb04>)
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4b59      	ldr	r3, [pc, #356]	; (800bca4 <tcp_receive+0xb08>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	441a      	add	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb4a:	4b55      	ldr	r3, [pc, #340]	; (800bca0 <tcp_receive+0xb04>)
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d206      	bcs.n	800bb60 <tcp_receive+0x9c4>
 800bb52:	4b56      	ldr	r3, [pc, #344]	; (800bcac <tcp_receive+0xb10>)
 800bb54:	f240 6207 	movw	r2, #1543	; 0x607
 800bb58:	4957      	ldr	r1, [pc, #348]	; (800bcb8 <tcp_receive+0xb1c>)
 800bb5a:	4856      	ldr	r0, [pc, #344]	; (800bcb4 <tcp_receive+0xb18>)
 800bb5c:	f004 fbf0 	bl	8010340 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb64:	4b4e      	ldr	r3, [pc, #312]	; (800bca0 <tcp_receive+0xb04>)
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7fc ffc9 	bl	8008b08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bb76:	4b4c      	ldr	r3, [pc, #304]	; (800bca8 <tcp_receive+0xb0c>)
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d006      	beq.n	800bb8e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800bb80:	4b49      	ldr	r3, [pc, #292]	; (800bca8 <tcp_receive+0xb0c>)
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	4a4d      	ldr	r2, [pc, #308]	; (800bcbc <tcp_receive+0xb20>)
 800bb86:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bb88:	4b47      	ldr	r3, [pc, #284]	; (800bca8 <tcp_receive+0xb0c>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb8e:	4b46      	ldr	r3, [pc, #280]	; (800bca8 <tcp_receive+0xb0c>)
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	899b      	ldrh	r3, [r3, #12]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fa ff8e 	bl	8006ab8 <lwip_htons>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80b8 	beq.w	800bd1a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bbaa:	4b45      	ldr	r3, [pc, #276]	; (800bcc0 <tcp_receive+0xb24>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f043 0320 	orr.w	r3, r3, #32
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	4b42      	ldr	r3, [pc, #264]	; (800bcc0 <tcp_receive+0xb24>)
 800bbb6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bbb8:	e0af      	b.n	800bd1a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbbe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4a36      	ldr	r2, [pc, #216]	; (800bca4 <tcp_receive+0xb08>)
 800bbca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	891b      	ldrh	r3, [r3, #8]
 800bbd0:	461c      	mov	r4, r3
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	899b      	ldrh	r3, [r3, #12]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fa ff6c 	bl	8006ab8 <lwip_htons>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <tcp_receive+0xa54>
 800bbec:	2301      	movs	r3, #1
 800bbee:	e000      	b.n	800bbf2 <tcp_receive+0xa56>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	191a      	adds	r2, r3, r4
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	441a      	add	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc02:	461c      	mov	r4, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	891b      	ldrh	r3, [r3, #8]
 800bc08:	461d      	mov	r5, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	899b      	ldrh	r3, [r3, #12]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fa ff50 	bl	8006ab8 <lwip_htons>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f003 0303 	and.w	r3, r3, #3
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <tcp_receive+0xa8c>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <tcp_receive+0xa8e>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	442b      	add	r3, r5
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d206      	bcs.n	800bc3e <tcp_receive+0xaa2>
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <tcp_receive+0xb10>)
 800bc32:	f240 622b 	movw	r2, #1579	; 0x62b
 800bc36:	4923      	ldr	r1, [pc, #140]	; (800bcc4 <tcp_receive+0xb28>)
 800bc38:	481e      	ldr	r0, [pc, #120]	; (800bcb4 <tcp_receive+0xb18>)
 800bc3a:	f004 fb81 	bl	8010340 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	891b      	ldrh	r3, [r3, #8]
 800bc42:	461c      	mov	r4, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	899b      	ldrh	r3, [r3, #12]
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fa ff33 	bl	8006ab8 <lwip_htons>
 800bc52:	4603      	mov	r3, r0
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	f003 0303 	and.w	r3, r3, #3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <tcp_receive+0xac6>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <tcp_receive+0xac8>
 800bc62:	2300      	movs	r3, #0
 800bc64:	1919      	adds	r1, r3, r4
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc6a:	b28b      	uxth	r3, r1
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7fc ff47 	bl	8008b08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	891b      	ldrh	r3, [r3, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d028      	beq.n	800bcd6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <tcp_receive+0xb20>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01d      	beq.n	800bcc8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <tcp_receive+0xb20>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fc fa64 	bl	8008164 <pbuf_cat>
 800bc9c:	e018      	b.n	800bcd0 <tcp_receive+0xb34>
 800bc9e:	bf00      	nop
 800bca0:	200000f6 	.word	0x200000f6
 800bca4:	200000ec 	.word	0x200000ec
 800bca8:	200000cc 	.word	0x200000cc
 800bcac:	080125c0 	.word	0x080125c0
 800bcb0:	080129a0 	.word	0x080129a0
 800bcb4:	0801260c 	.word	0x0801260c
 800bcb8:	080129dc 	.word	0x080129dc
 800bcbc:	200000fc 	.word	0x200000fc
 800bcc0:	200000f9 	.word	0x200000f9
 800bcc4:	080129fc 	.word	0x080129fc
            } else {
              recv_data = cseg->p;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	4a70      	ldr	r2, [pc, #448]	; (800be90 <tcp_receive+0xcf4>)
 800bcce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	899b      	ldrh	r3, [r3, #12]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fa feea 	bl	8006ab8 <lwip_htons>
 800bce4:	4603      	mov	r3, r0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00d      	beq.n	800bd0c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bcf0:	4b68      	ldr	r3, [pc, #416]	; (800be94 <tcp_receive+0xcf8>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	f043 0320 	orr.w	r3, r3, #32
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b66      	ldr	r3, [pc, #408]	; (800be94 <tcp_receive+0xcf8>)
 800bcfc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d102      	bne.n	800bd0c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2207      	movs	r2, #7
 800bd0a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bd14:	68b8      	ldr	r0, [r7, #8]
 800bd16:	f7fd fbd6 	bl	80094c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d008      	beq.n	800bd34 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	f43f af43 	beq.w	800bbba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	8b5b      	ldrh	r3, [r3, #26]
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00e      	beq.n	800bd5e <tcp_receive+0xbc2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	8b5b      	ldrh	r3, [r3, #26]
 800bd44:	f023 0301 	bic.w	r3, r3, #1
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	835a      	strh	r2, [r3, #26]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	8b5b      	ldrh	r3, [r3, #26]
 800bd52:	f043 0302 	orr.w	r3, r3, #2
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd5c:	e188      	b.n	800c070 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	8b5b      	ldrh	r3, [r3, #26]
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd6c:	e180      	b.n	800c070 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bd76:	4848      	ldr	r0, [pc, #288]	; (800be98 <tcp_receive+0xcfc>)
 800bd78:	f7fd fbbe 	bl	80094f8 <tcp_seg_copy>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	675a      	str	r2, [r3, #116]	; 0x74
 800bd82:	e16d      	b.n	800c060 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd8e:	e157      	b.n	800c040 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	4b41      	ldr	r3, [pc, #260]	; (800be9c <tcp_receive+0xd00>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d11d      	bne.n	800bdda <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bd9e:	4b3e      	ldr	r3, [pc, #248]	; (800be98 <tcp_receive+0xcfc>)
 800bda0:	891a      	ldrh	r2, [r3, #8]
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	891b      	ldrh	r3, [r3, #8]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	f240 814f 	bls.w	800c04a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdac:	483a      	ldr	r0, [pc, #232]	; (800be98 <tcp_receive+0xcfc>)
 800bdae:	f7fd fba3 	bl	80094f8 <tcp_seg_copy>
 800bdb2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8149 	beq.w	800c04e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	e002      	b.n	800bdd0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bdd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdd2:	6978      	ldr	r0, [r7, #20]
 800bdd4:	f7ff f8de 	bl	800af94 <tcp_oos_insert_segment>
                }
                break;
 800bdd8:	e139      	b.n	800c04e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d117      	bne.n	800be10 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bde0:	4b2e      	ldr	r3, [pc, #184]	; (800be9c <tcp_receive+0xd00>)
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da57      	bge.n	800bea0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdf0:	4829      	ldr	r0, [pc, #164]	; (800be98 <tcp_receive+0xcfc>)
 800bdf2:	f7fd fb81 	bl	80094f8 <tcp_seg_copy>
 800bdf6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 8129 	beq.w	800c052 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800be06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be08:	69b8      	ldr	r0, [r7, #24]
 800be0a:	f7ff f8c3 	bl	800af94 <tcp_oos_insert_segment>
                  }
                  break;
 800be0e:	e120      	b.n	800c052 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800be10:	4b22      	ldr	r3, [pc, #136]	; (800be9c <tcp_receive+0xd00>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	db3e      	blt.n	800bea0 <tcp_receive+0xd04>
 800be22:	4b1e      	ldr	r3, [pc, #120]	; (800be9c <tcp_receive+0xd00>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	3301      	adds	r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	dc35      	bgt.n	800bea0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800be34:	4818      	ldr	r0, [pc, #96]	; (800be98 <tcp_receive+0xcfc>)
 800be36:	f7fd fb5f 	bl	80094f8 <tcp_seg_copy>
 800be3a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 8109 	beq.w	800c056 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800be44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be4c:	8912      	ldrh	r2, [r2, #8]
 800be4e:	441a      	add	r2, r3
 800be50:	4b12      	ldr	r3, [pc, #72]	; (800be9c <tcp_receive+0xd00>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	dd12      	ble.n	800be80 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800be5a:	4b10      	ldr	r3, [pc, #64]	; (800be9c <tcp_receive+0xd00>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	b29b      	uxth	r3, r3
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be76:	891b      	ldrh	r3, [r3, #8]
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f7fb ff2a 	bl	8007cd4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800be86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be88:	69f8      	ldr	r0, [r7, #28]
 800be8a:	f7ff f883 	bl	800af94 <tcp_oos_insert_segment>
                  }
                  break;
 800be8e:	e0e2      	b.n	800c056 <tcp_receive+0xeba>
 800be90:	200000fc 	.word	0x200000fc
 800be94:	200000f9 	.word	0x200000f9
 800be98:	200000cc 	.word	0x200000cc
 800be9c:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f040 80c6 	bne.w	800c03a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800beae:	4b80      	ldr	r3, [pc, #512]	; (800c0b0 <tcp_receive+0xf14>)
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f340 80bd 	ble.w	800c03a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	899b      	ldrh	r3, [r3, #12]
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fa fdf5 	bl	8006ab8 <lwip_htons>
 800bece:	4603      	mov	r3, r0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f040 80bf 	bne.w	800c05a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bedc:	4875      	ldr	r0, [pc, #468]	; (800c0b4 <tcp_receive+0xf18>)
 800bede:	f7fd fb0b 	bl	80094f8 <tcp_seg_copy>
 800bee2:	4602      	mov	r2, r0
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 80b6 	beq.w	800c05e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800befa:	8912      	ldrh	r2, [r2, #8]
 800befc:	441a      	add	r2, r3
 800befe:	4b6c      	ldr	r3, [pc, #432]	; (800c0b0 <tcp_receive+0xf14>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dd12      	ble.n	800bf2e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bf08:	4b69      	ldr	r3, [pc, #420]	; (800c0b0 <tcp_receive+0xf14>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	891b      	ldrh	r3, [r3, #8]
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f7fb fed3 	bl	8007cd4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bf2e:	4b62      	ldr	r3, [pc, #392]	; (800c0b8 <tcp_receive+0xf1c>)
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	461a      	mov	r2, r3
 800bf34:	4b5e      	ldr	r3, [pc, #376]	; (800c0b0 <tcp_receive+0xf14>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	441a      	add	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf42:	440b      	add	r3, r1
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f340 8089 	ble.w	800c05e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	899b      	ldrh	r3, [r3, #12]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fa fdae 	bl	8006ab8 <lwip_htons>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 0301 	and.w	r3, r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d022      	beq.n	800bfae <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	899b      	ldrh	r3, [r3, #12]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	b21b      	sxth	r3, r3
 800bf74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf78:	b21c      	sxth	r4, r3
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	899b      	ldrh	r3, [r3, #12]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fa fd97 	bl	8006ab8 <lwip_htons>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fa fd8e 	bl	8006ab8 <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	b21b      	sxth	r3, r3
 800bfa0:	4323      	orrs	r3, r4
 800bfa2:	b21a      	sxth	r2, r3
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	b292      	uxth	r2, r2
 800bfac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb8:	4413      	add	r3, r2
 800bfba:	b299      	uxth	r1, r3
 800bfbc:	4b3c      	ldr	r3, [pc, #240]	; (800c0b0 <tcp_receive+0xf14>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	1a8a      	subs	r2, r1, r2
 800bfc8:	b292      	uxth	r2, r2
 800bfca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	891b      	ldrh	r3, [r3, #8]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fb fe7a 	bl	8007cd4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	891c      	ldrh	r4, [r3, #8]
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	899b      	ldrh	r3, [r3, #12]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fa fd61 	bl	8006ab8 <lwip_htons>
 800bff6:	4603      	mov	r3, r0
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <tcp_receive+0xe6a>
 800c002:	2301      	movs	r3, #1
 800c004:	e000      	b.n	800c008 <tcp_receive+0xe6c>
 800c006:	2300      	movs	r3, #0
 800c008:	4423      	add	r3, r4
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	4b2a      	ldr	r3, [pc, #168]	; (800c0b8 <tcp_receive+0xf1c>)
 800c00e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c010:	4b29      	ldr	r3, [pc, #164]	; (800c0b8 <tcp_receive+0xf1c>)
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	4b26      	ldr	r3, [pc, #152]	; (800c0b0 <tcp_receive+0xf14>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	441a      	add	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c024:	440b      	add	r3, r1
 800c026:	429a      	cmp	r2, r3
 800c028:	d019      	beq.n	800c05e <tcp_receive+0xec2>
 800c02a:	4b24      	ldr	r3, [pc, #144]	; (800c0bc <tcp_receive+0xf20>)
 800c02c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c030:	4923      	ldr	r1, [pc, #140]	; (800c0c0 <tcp_receive+0xf24>)
 800c032:	4824      	ldr	r0, [pc, #144]	; (800c0c4 <tcp_receive+0xf28>)
 800c034:	f004 f984 	bl	8010340 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c038:	e011      	b.n	800c05e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	2b00      	cmp	r3, #0
 800c044:	f47f aea4 	bne.w	800bd90 <tcp_receive+0xbf4>
 800c048:	e00a      	b.n	800c060 <tcp_receive+0xec4>
                break;
 800c04a:	bf00      	nop
 800c04c:	e008      	b.n	800c060 <tcp_receive+0xec4>
                break;
 800c04e:	bf00      	nop
 800c050:	e006      	b.n	800c060 <tcp_receive+0xec4>
                  break;
 800c052:	bf00      	nop
 800c054:	e004      	b.n	800c060 <tcp_receive+0xec4>
                  break;
 800c056:	bf00      	nop
 800c058:	e002      	b.n	800c060 <tcp_receive+0xec4>
                  break;
 800c05a:	bf00      	nop
 800c05c:	e000      	b.n	800c060 <tcp_receive+0xec4>
                break;
 800c05e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f001 fa33 	bl	800d4cc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c066:	e003      	b.n	800c070 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 fa2f 	bl	800d4cc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c06e:	e01a      	b.n	800c0a6 <tcp_receive+0xf0a>
 800c070:	e019      	b.n	800c0a6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c072:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <tcp_receive+0xf14>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	db0a      	blt.n	800c096 <tcp_receive+0xefa>
 800c080:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <tcp_receive+0xf14>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	6879      	ldr	r1, [r7, #4]
 800c08a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c08c:	440b      	add	r3, r1
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	3301      	adds	r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd07      	ble.n	800c0a6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	8b5b      	ldrh	r3, [r3, #26]
 800c09a:	f043 0302 	orr.w	r3, r3, #2
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c0a4:	e7ff      	b.n	800c0a6 <tcp_receive+0xf0a>
 800c0a6:	bf00      	nop
 800c0a8:	3750      	adds	r7, #80	; 0x50
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	200000ec 	.word	0x200000ec
 800c0b4:	200000cc 	.word	0x200000cc
 800c0b8:	200000f6 	.word	0x200000f6
 800c0bc:	080125c0 	.word	0x080125c0
 800c0c0:	08012968 	.word	0x08012968
 800c0c4:	0801260c 	.word	0x0801260c

0800c0c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c0ce:	4b15      	ldr	r3, [pc, #84]	; (800c124 <tcp_get_next_optbyte+0x5c>)
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	b291      	uxth	r1, r2
 800c0d6:	4a13      	ldr	r2, [pc, #76]	; (800c124 <tcp_get_next_optbyte+0x5c>)
 800c0d8:	8011      	strh	r1, [r2, #0]
 800c0da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c0dc:	4b12      	ldr	r3, [pc, #72]	; (800c128 <tcp_get_next_optbyte+0x60>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <tcp_get_next_optbyte+0x26>
 800c0e4:	4b11      	ldr	r3, [pc, #68]	; (800c12c <tcp_get_next_optbyte+0x64>)
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	88fa      	ldrh	r2, [r7, #6]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d208      	bcs.n	800c100 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c0ee:	4b10      	ldr	r3, [pc, #64]	; (800c130 <tcp_get_next_optbyte+0x68>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3314      	adds	r3, #20
 800c0f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c0f6:	88fb      	ldrh	r3, [r7, #6]
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	e00b      	b.n	800c118 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c100:	88fb      	ldrh	r3, [r7, #6]
 800c102:	b2da      	uxtb	r2, r3
 800c104:	4b09      	ldr	r3, [pc, #36]	; (800c12c <tcp_get_next_optbyte+0x64>)
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c10e:	4b06      	ldr	r3, [pc, #24]	; (800c128 <tcp_get_next_optbyte+0x60>)
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	797b      	ldrb	r3, [r7, #5]
 800c114:	4413      	add	r3, r2
 800c116:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	200000e8 	.word	0x200000e8
 800c128:	200000e4 	.word	0x200000e4
 800c12c:	200000e2 	.word	0x200000e2
 800c130:	200000dc 	.word	0x200000dc

0800c134 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d106      	bne.n	800c150 <tcp_parseopt+0x1c>
 800c142:	4b32      	ldr	r3, [pc, #200]	; (800c20c <tcp_parseopt+0xd8>)
 800c144:	f240 727d 	movw	r2, #1917	; 0x77d
 800c148:	4931      	ldr	r1, [pc, #196]	; (800c210 <tcp_parseopt+0xdc>)
 800c14a:	4832      	ldr	r0, [pc, #200]	; (800c214 <tcp_parseopt+0xe0>)
 800c14c:	f004 f8f8 	bl	8010340 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c150:	4b31      	ldr	r3, [pc, #196]	; (800c218 <tcp_parseopt+0xe4>)
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d055      	beq.n	800c204 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c158:	4b30      	ldr	r3, [pc, #192]	; (800c21c <tcp_parseopt+0xe8>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	e045      	b.n	800c1ec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c160:	f7ff ffb2 	bl	800c0c8 <tcp_get_next_optbyte>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d006      	beq.n	800c17c <tcp_parseopt+0x48>
 800c16e:	2b02      	cmp	r3, #2
 800c170:	dc2b      	bgt.n	800c1ca <tcp_parseopt+0x96>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d041      	beq.n	800c1fa <tcp_parseopt+0xc6>
 800c176:	2b01      	cmp	r3, #1
 800c178:	d127      	bne.n	800c1ca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c17a:	e037      	b.n	800c1ec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c17c:	f7ff ffa4 	bl	800c0c8 <tcp_get_next_optbyte>
 800c180:	4603      	mov	r3, r0
 800c182:	2b04      	cmp	r3, #4
 800c184:	d13b      	bne.n	800c1fe <tcp_parseopt+0xca>
 800c186:	4b25      	ldr	r3, [pc, #148]	; (800c21c <tcp_parseopt+0xe8>)
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	3301      	adds	r3, #1
 800c18c:	4a22      	ldr	r2, [pc, #136]	; (800c218 <tcp_parseopt+0xe4>)
 800c18e:	8812      	ldrh	r2, [r2, #0]
 800c190:	4293      	cmp	r3, r2
 800c192:	da34      	bge.n	800c1fe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c194:	f7ff ff98 	bl	800c0c8 <tcp_get_next_optbyte>
 800c198:	4603      	mov	r3, r0
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	021b      	lsls	r3, r3, #8
 800c19e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c1a0:	f7ff ff92 	bl	800c0c8 <tcp_get_next_optbyte>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	89bb      	ldrh	r3, [r7, #12]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c1ae:	89bb      	ldrh	r3, [r7, #12]
 800c1b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c1b4:	d804      	bhi.n	800c1c0 <tcp_parseopt+0x8c>
 800c1b6:	89bb      	ldrh	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <tcp_parseopt+0x8c>
 800c1bc:	89ba      	ldrh	r2, [r7, #12]
 800c1be:	e001      	b.n	800c1c4 <tcp_parseopt+0x90>
 800c1c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c1c8:	e010      	b.n	800c1ec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c1ca:	f7ff ff7d 	bl	800c0c8 <tcp_get_next_optbyte>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d914      	bls.n	800c202 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <tcp_parseopt+0xe8>)
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	3b02      	subs	r3, #2
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <tcp_parseopt+0xe8>)
 800c1ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c1ec:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <tcp_parseopt+0xe8>)
 800c1ee:	881a      	ldrh	r2, [r3, #0]
 800c1f0:	4b09      	ldr	r3, [pc, #36]	; (800c218 <tcp_parseopt+0xe4>)
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d3b3      	bcc.n	800c160 <tcp_parseopt+0x2c>
 800c1f8:	e004      	b.n	800c204 <tcp_parseopt+0xd0>
          return;
 800c1fa:	bf00      	nop
 800c1fc:	e002      	b.n	800c204 <tcp_parseopt+0xd0>
            return;
 800c1fe:	bf00      	nop
 800c200:	e000      	b.n	800c204 <tcp_parseopt+0xd0>
            return;
 800c202:	bf00      	nop
      }
    }
  }
}
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	080125c0 	.word	0x080125c0
 800c210:	08012a24 	.word	0x08012a24
 800c214:	0801260c 	.word	0x0801260c
 800c218:	200000e0 	.word	0x200000e0
 800c21c:	200000e8 	.word	0x200000e8

0800c220 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <tcp_trigger_input_pcb_close+0x1c>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	f043 0310 	orr.w	r3, r3, #16
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	4b03      	ldr	r3, [pc, #12]	; (800c23c <tcp_trigger_input_pcb_close+0x1c>)
 800c230:	701a      	strb	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	200000f9 	.word	0x200000f9

0800c240 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <tcp_route+0x28>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	7a1b      	ldrb	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	7a1b      	ldrb	r3, [r3, #8]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb fb7e 	bl	8007960 <netif_get_by_index>
 800c264:	4603      	mov	r3, r0
 800c266:	e003      	b.n	800c270 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f002 fe3b 	bl	800eee4 <ip4_route>
 800c26e:	4603      	mov	r3, r0
  }
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c278:	b590      	push	{r4, r7, lr}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	4613      	mov	r3, r2
 800c286:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <tcp_create_segment+0x22>
 800c28e:	4b44      	ldr	r3, [pc, #272]	; (800c3a0 <tcp_create_segment+0x128>)
 800c290:	22a3      	movs	r2, #163	; 0xa3
 800c292:	4944      	ldr	r1, [pc, #272]	; (800c3a4 <tcp_create_segment+0x12c>)
 800c294:	4844      	ldr	r0, [pc, #272]	; (800c3a8 <tcp_create_segment+0x130>)
 800c296:	f004 f853 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d105      	bne.n	800c2ac <tcp_create_segment+0x34>
 800c2a0:	4b3f      	ldr	r3, [pc, #252]	; (800c3a0 <tcp_create_segment+0x128>)
 800c2a2:	22a4      	movs	r2, #164	; 0xa4
 800c2a4:	4941      	ldr	r1, [pc, #260]	; (800c3ac <tcp_create_segment+0x134>)
 800c2a6:	4840      	ldr	r0, [pc, #256]	; (800c3a8 <tcp_create_segment+0x130>)
 800c2a8:	f004 f84a 	bl	8010340 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c2ba:	2003      	movs	r0, #3
 800c2bc:	f7fb f852 	bl	8007364 <memp_malloc>
 800c2c0:	6138      	str	r0, [r7, #16]
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c2c8:	68b8      	ldr	r0, [r7, #8]
 800c2ca:	f7fb fe89 	bl	8007fe0 <pbuf_free>
    return NULL;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e061      	b.n	800c396 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c2d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	891a      	ldrh	r2, [r3, #8]
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d205      	bcs.n	800c2fe <tcp_create_segment+0x86>
 800c2f2:	4b2b      	ldr	r3, [pc, #172]	; (800c3a0 <tcp_create_segment+0x128>)
 800c2f4:	22b0      	movs	r2, #176	; 0xb0
 800c2f6:	492e      	ldr	r1, [pc, #184]	; (800c3b0 <tcp_create_segment+0x138>)
 800c2f8:	482b      	ldr	r0, [pc, #172]	; (800c3a8 <tcp_create_segment+0x130>)
 800c2fa:	f004 f821 	bl	8010340 <iprintf>
  seg->len = p->tot_len - optlen;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	891a      	ldrh	r2, [r3, #8]
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	b29b      	uxth	r3, r3
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	b29a      	uxth	r2, r3
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c30e:	2114      	movs	r1, #20
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f7fb fdcf 	bl	8007eb4 <pbuf_add_header>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c31c:	6938      	ldr	r0, [r7, #16]
 800c31e:	f7fd f8d2 	bl	80094c6 <tcp_seg_free>
    return NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	e037      	b.n	800c396 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	8ada      	ldrh	r2, [r3, #22]
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	68dc      	ldr	r4, [r3, #12]
 800c338:	4610      	mov	r0, r2
 800c33a:	f7fa fbbd 	bl	8006ab8 <lwip_htons>
 800c33e:	4603      	mov	r3, r0
 800c340:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	8b1a      	ldrh	r2, [r3, #24]
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	68dc      	ldr	r4, [r3, #12]
 800c34a:	4610      	mov	r0, r2
 800c34c:	f7fa fbb4 	bl	8006ab8 <lwip_htons>
 800c350:	4603      	mov	r3, r0
 800c352:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	68dc      	ldr	r4, [r3, #12]
 800c358:	6838      	ldr	r0, [r7, #0]
 800c35a:	f7fa fbc2 	bl	8006ae2 <lwip_htonl>
 800c35e:	4603      	mov	r3, r0
 800c360:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	089b      	lsrs	r3, r3, #2
 800c366:	b2db      	uxtb	r3, r3
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3305      	adds	r3, #5
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	031b      	lsls	r3, r3, #12
 800c370:	b29a      	uxth	r2, r3
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	b29b      	uxth	r3, r3
 800c376:	4313      	orrs	r3, r2
 800c378:	b29a      	uxth	r2, r3
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	68dc      	ldr	r4, [r3, #12]
 800c37e:	4610      	mov	r0, r2
 800c380:	f7fa fb9a 	bl	8006ab8 <lwip_htons>
 800c384:	4603      	mov	r3, r0
 800c386:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	749a      	strb	r2, [r3, #18]
 800c390:	2200      	movs	r2, #0
 800c392:	74da      	strb	r2, [r3, #19]
  return seg;
 800c394:	693b      	ldr	r3, [r7, #16]
}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd90      	pop	{r4, r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	08012a40 	.word	0x08012a40
 800c3a4:	08012a74 	.word	0x08012a74
 800c3a8:	08012a94 	.word	0x08012a94
 800c3ac:	08012abc 	.word	0x08012abc
 800c3b0:	08012ae0 	.word	0x08012ae0

0800c3b4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b08b      	sub	sp, #44	; 0x2c
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61fb      	str	r3, [r7, #28]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <tcp_split_unsent_seg+0x2c>
 800c3d2:	4b95      	ldr	r3, [pc, #596]	; (800c628 <tcp_split_unsent_seg+0x274>)
 800c3d4:	f240 324b 	movw	r2, #843	; 0x34b
 800c3d8:	4994      	ldr	r1, [pc, #592]	; (800c62c <tcp_split_unsent_seg+0x278>)
 800c3da:	4895      	ldr	r0, [pc, #596]	; (800c630 <tcp_split_unsent_seg+0x27c>)
 800c3dc:	f003 ffb0 	bl	8010340 <iprintf>

  useg = pcb->unsent;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f0:	e116      	b.n	800c620 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c3f2:	887b      	ldrh	r3, [r7, #2]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c3f8:	4b8b      	ldr	r3, [pc, #556]	; (800c628 <tcp_split_unsent_seg+0x274>)
 800c3fa:	f240 3253 	movw	r2, #851	; 0x353
 800c3fe:	498d      	ldr	r1, [pc, #564]	; (800c634 <tcp_split_unsent_seg+0x280>)
 800c400:	488b      	ldr	r0, [pc, #556]	; (800c630 <tcp_split_unsent_seg+0x27c>)
 800c402:	f003 ff9d 	bl	8010340 <iprintf>
    return ERR_VAL;
 800c406:	f06f 0305 	mvn.w	r3, #5
 800c40a:	e109      	b.n	800c620 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	891b      	ldrh	r3, [r3, #8]
 800c410:	887a      	ldrh	r2, [r7, #2]
 800c412:	429a      	cmp	r2, r3
 800c414:	d301      	bcc.n	800c41a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	e102      	b.n	800c620 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c41e:	887a      	ldrh	r2, [r7, #2]
 800c420:	429a      	cmp	r2, r3
 800c422:	d906      	bls.n	800c432 <tcp_split_unsent_seg+0x7e>
 800c424:	4b80      	ldr	r3, [pc, #512]	; (800c628 <tcp_split_unsent_seg+0x274>)
 800c426:	f240 325b 	movw	r2, #859	; 0x35b
 800c42a:	4983      	ldr	r1, [pc, #524]	; (800c638 <tcp_split_unsent_seg+0x284>)
 800c42c:	4880      	ldr	r0, [pc, #512]	; (800c630 <tcp_split_unsent_seg+0x27c>)
 800c42e:	f003 ff87 	bl	8010340 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	891b      	ldrh	r3, [r3, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <tcp_split_unsent_seg+0x94>
 800c43a:	4b7b      	ldr	r3, [pc, #492]	; (800c628 <tcp_split_unsent_seg+0x274>)
 800c43c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c440:	497e      	ldr	r1, [pc, #504]	; (800c63c <tcp_split_unsent_seg+0x288>)
 800c442:	487b      	ldr	r0, [pc, #492]	; (800c630 <tcp_split_unsent_seg+0x27c>)
 800c444:	f003 ff7c 	bl	8010340 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	7a9b      	ldrb	r3, [r3, #10]
 800c44c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	891a      	ldrh	r2, [r3, #8]
 800c45e:	887b      	ldrh	r3, [r7, #2]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	b29a      	uxth	r2, r3
 800c468:	89bb      	ldrh	r3, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c472:	4619      	mov	r1, r3
 800c474:	2036      	movs	r0, #54	; 0x36
 800c476:	f7fb facf 	bl	8007a18 <pbuf_alloc>
 800c47a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 80b7 	beq.w	800c5f2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	891a      	ldrh	r2, [r3, #8]
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	891b      	ldrh	r3, [r3, #8]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	b29a      	uxth	r2, r3
 800c492:	887b      	ldrh	r3, [r7, #2]
 800c494:	4413      	add	r3, r2
 800c496:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	6858      	ldr	r0, [r3, #4]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	18d1      	adds	r1, r2, r3
 800c4a4:	897b      	ldrh	r3, [r7, #10]
 800c4a6:	89ba      	ldrh	r2, [r7, #12]
 800c4a8:	f7fb ff84 	bl	80083b4 <pbuf_copy_partial>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	89bb      	ldrh	r3, [r7, #12]
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	f040 809f 	bne.w	800c5f6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	899b      	ldrh	r3, [r3, #12]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fa faf9 	bl	8006ab8 <lwip_htons>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ce:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c4d4:	7efb      	ldrb	r3, [r7, #27]
 800c4d6:	f003 0308 	and.w	r3, r3, #8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d007      	beq.n	800c4ee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c4de:	7efb      	ldrb	r3, [r7, #27]
 800c4e0:	f023 0308 	bic.w	r3, r3, #8
 800c4e4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c4e6:	7ebb      	ldrb	r3, [r7, #26]
 800c4e8:	f043 0308 	orr.w	r3, r3, #8
 800c4ec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c4ee:	7efb      	ldrb	r3, [r7, #27]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c4f8:	7efb      	ldrb	r3, [r7, #27]
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c500:	7ebb      	ldrb	r3, [r7, #26]
 800c502:	f043 0301 	orr.w	r3, r3, #1
 800c506:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fa fae7 	bl	8006ae2 <lwip_htonl>
 800c514:	4602      	mov	r2, r0
 800c516:	887b      	ldrh	r3, [r7, #2]
 800c518:	18d1      	adds	r1, r2, r3
 800c51a:	7eba      	ldrb	r2, [r7, #26]
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	460b      	mov	r3, r1
 800c522:	6939      	ldr	r1, [r7, #16]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff fea7 	bl	800c278 <tcp_create_segment>
 800c52a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d063      	beq.n	800c5fa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	f7fb fdda 	bl	80080f0 <pbuf_clen>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461a      	mov	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c546:	1a9b      	subs	r3, r3, r2
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	6858      	ldr	r0, [r3, #4]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	891a      	ldrh	r2, [r3, #8]
 800c55a:	89bb      	ldrh	r3, [r7, #12]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	b29b      	uxth	r3, r3
 800c560:	4619      	mov	r1, r3
 800c562:	f7fb fbb7 	bl	8007cd4 <pbuf_realloc>
  useg->len -= remainder;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	891a      	ldrh	r2, [r3, #8]
 800c56a:	89bb      	ldrh	r3, [r7, #12]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	b29a      	uxth	r2, r3
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	899b      	ldrh	r3, [r3, #12]
 800c57a:	b29c      	uxth	r4, r3
 800c57c:	7efb      	ldrb	r3, [r7, #27]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	4618      	mov	r0, r3
 800c582:	f7fa fa99 	bl	8006ab8 <lwip_htons>
 800c586:	4603      	mov	r3, r0
 800c588:	461a      	mov	r2, r3
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	4322      	orrs	r2, r4
 800c590:	b292      	uxth	r2, r2
 800c592:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fb fda9 	bl	80080f0 <pbuf_clen>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5a8:	4413      	add	r3, r2
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fb fd9a 	bl	80080f0 <pbuf_clen>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5c6:	4413      	add	r3, r2
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d103      	bne.n	800c5ee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e016      	b.n	800c620 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c5f2:	bf00      	nop
 800c5f4:	e002      	b.n	800c5fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c5f6:	bf00      	nop
 800c5f8:	e000      	b.n	800c5fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c5fa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <tcp_split_unsent_seg+0x25c>
 800c602:	4b09      	ldr	r3, [pc, #36]	; (800c628 <tcp_split_unsent_seg+0x274>)
 800c604:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c608:	490d      	ldr	r1, [pc, #52]	; (800c640 <tcp_split_unsent_seg+0x28c>)
 800c60a:	4809      	ldr	r0, [pc, #36]	; (800c630 <tcp_split_unsent_seg+0x27c>)
 800c60c:	f003 fe98 	bl	8010340 <iprintf>
  if (p != NULL) {
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c616:	6938      	ldr	r0, [r7, #16]
 800c618:	f7fb fce2 	bl	8007fe0 <pbuf_free>
  }

  return ERR_MEM;
 800c61c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c620:	4618      	mov	r0, r3
 800c622:	3724      	adds	r7, #36	; 0x24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd90      	pop	{r4, r7, pc}
 800c628:	08012a40 	.word	0x08012a40
 800c62c:	08012dd4 	.word	0x08012dd4
 800c630:	08012a94 	.word	0x08012a94
 800c634:	08012df8 	.word	0x08012df8
 800c638:	08012e1c 	.word	0x08012e1c
 800c63c:	08012e2c 	.word	0x08012e2c
 800c640:	08012e3c 	.word	0x08012e3c

0800c644 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <tcp_send_fin+0x1c>
 800c652:	4b21      	ldr	r3, [pc, #132]	; (800c6d8 <tcp_send_fin+0x94>)
 800c654:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c658:	4920      	ldr	r1, [pc, #128]	; (800c6dc <tcp_send_fin+0x98>)
 800c65a:	4821      	ldr	r0, [pc, #132]	; (800c6e0 <tcp_send_fin+0x9c>)
 800c65c:	f003 fe70 	bl	8010340 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d02e      	beq.n	800c6c6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	e002      	b.n	800c676 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1f8      	bne.n	800c670 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	899b      	ldrh	r3, [r3, #12]
 800c684:	b29b      	uxth	r3, r3
 800c686:	4618      	mov	r0, r3
 800c688:	f7fa fa16 	bl	8006ab8 <lwip_htons>
 800c68c:	4603      	mov	r3, r0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	f003 0307 	and.w	r3, r3, #7
 800c694:	2b00      	cmp	r3, #0
 800c696:	d116      	bne.n	800c6c6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	899b      	ldrh	r3, [r3, #12]
 800c69e:	b29c      	uxth	r4, r3
 800c6a0:	2001      	movs	r0, #1
 800c6a2:	f7fa fa09 	bl	8006ab8 <lwip_htons>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	4322      	orrs	r2, r4
 800c6b0:	b292      	uxth	r2, r2
 800c6b2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8b5b      	ldrh	r3, [r3, #26]
 800c6b8:	f043 0320 	orr.w	r3, r3, #32
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e004      	b.n	800c6d0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f80b 	bl	800c6e4 <tcp_enqueue_flags>
 800c6ce:	4603      	mov	r3, r0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd90      	pop	{r4, r7, pc}
 800c6d8:	08012a40 	.word	0x08012a40
 800c6dc:	08012e48 	.word	0x08012e48
 800c6e0:	08012a94 	.word	0x08012a94

0800c6e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	; 0x28
 800c6e8:	af02      	add	r7, sp, #8
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <tcp_enqueue_flags+0x2c>
 800c702:	4b67      	ldr	r3, [pc, #412]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c704:	f240 4211 	movw	r2, #1041	; 0x411
 800c708:	4966      	ldr	r1, [pc, #408]	; (800c8a4 <tcp_enqueue_flags+0x1c0>)
 800c70a:	4867      	ldr	r0, [pc, #412]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c70c:	f003 fe18 	bl	8010340 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <tcp_enqueue_flags+0x40>
 800c716:	4b62      	ldr	r3, [pc, #392]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c718:	f240 4213 	movw	r2, #1043	; 0x413
 800c71c:	4963      	ldr	r1, [pc, #396]	; (800c8ac <tcp_enqueue_flags+0x1c8>)
 800c71e:	4862      	ldr	r0, [pc, #392]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c720:	f003 fe0e 	bl	8010340 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c72e:	2301      	movs	r3, #1
 800c730:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c732:	7ffb      	ldrb	r3, [r7, #31]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	b29b      	uxth	r3, r3
 800c742:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c746:	4619      	mov	r1, r3
 800c748:	2036      	movs	r0, #54	; 0x36
 800c74a:	f7fb f965 	bl	8007a18 <pbuf_alloc>
 800c74e:	6138      	str	r0, [r7, #16]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	8b5b      	ldrh	r3, [r3, #26]
 800c75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c764:	f04f 33ff 	mov.w	r3, #4294967295
 800c768:	e095      	b.n	800c896 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	895a      	ldrh	r2, [r3, #10]
 800c76e:	7dfb      	ldrb	r3, [r7, #23]
 800c770:	b29b      	uxth	r3, r3
 800c772:	429a      	cmp	r2, r3
 800c774:	d206      	bcs.n	800c784 <tcp_enqueue_flags+0xa0>
 800c776:	4b4a      	ldr	r3, [pc, #296]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c778:	f240 4239 	movw	r2, #1081	; 0x439
 800c77c:	494c      	ldr	r1, [pc, #304]	; (800c8b0 <tcp_enqueue_flags+0x1cc>)
 800c77e:	484a      	ldr	r0, [pc, #296]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c780:	f003 fdde 	bl	8010340 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c788:	78fa      	ldrb	r2, [r7, #3]
 800c78a:	7ffb      	ldrb	r3, [r7, #31]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	460b      	mov	r3, r1
 800c790:	6939      	ldr	r1, [r7, #16]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff fd70 	bl	800c278 <tcp_create_segment>
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d109      	bne.n	800c7b4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8b5b      	ldrh	r3, [r3, #26]
 800c7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	e070      	b.n	800c896 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	f003 0303 	and.w	r3, r3, #3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d006      	beq.n	800c7ce <tcp_enqueue_flags+0xea>
 800c7c0:	4b37      	ldr	r3, [pc, #220]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c7c2:	f240 4242 	movw	r2, #1090	; 0x442
 800c7c6:	493b      	ldr	r1, [pc, #236]	; (800c8b4 <tcp_enqueue_flags+0x1d0>)
 800c7c8:	4837      	ldr	r0, [pc, #220]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c7ca:	f003 fdb9 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	891b      	ldrh	r3, [r3, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d006      	beq.n	800c7e4 <tcp_enqueue_flags+0x100>
 800c7d6:	4b32      	ldr	r3, [pc, #200]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c7d8:	f240 4243 	movw	r2, #1091	; 0x443
 800c7dc:	4936      	ldr	r1, [pc, #216]	; (800c8b8 <tcp_enqueue_flags+0x1d4>)
 800c7de:	4832      	ldr	r0, [pc, #200]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c7e0:	f003 fdae 	bl	8010340 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d103      	bne.n	800c7f4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c7f2:	e00d      	b.n	800c810 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7f8:	61bb      	str	r3, [r7, #24]
 800c7fa:	e002      	b.n	800c802 <tcp_enqueue_flags+0x11e>
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f8      	bne.n	800c7fc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	f003 0302 	and.w	r3, r3, #2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d104      	bne.n	800c82c <tcp_enqueue_flags+0x148>
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c836:	78fb      	ldrb	r3, [r7, #3]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d006      	beq.n	800c84e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8b5b      	ldrh	r3, [r3, #26]
 800c844:	f043 0320 	orr.w	r3, r3, #32
 800c848:	b29a      	uxth	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	f7fb fc4c 	bl	80080f0 <pbuf_clen>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c862:	4413      	add	r3, r2
 800c864:	b29a      	uxth	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00e      	beq.n	800c894 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10a      	bne.n	800c894 <tcp_enqueue_flags+0x1b0>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <tcp_enqueue_flags+0x1b0>
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <tcp_enqueue_flags+0x1bc>)
 800c888:	f240 4265 	movw	r2, #1125	; 0x465
 800c88c:	490b      	ldr	r1, [pc, #44]	; (800c8bc <tcp_enqueue_flags+0x1d8>)
 800c88e:	4806      	ldr	r0, [pc, #24]	; (800c8a8 <tcp_enqueue_flags+0x1c4>)
 800c890:	f003 fd56 	bl	8010340 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	08012a40 	.word	0x08012a40
 800c8a4:	08012e64 	.word	0x08012e64
 800c8a8:	08012a94 	.word	0x08012a94
 800c8ac:	08012ebc 	.word	0x08012ebc
 800c8b0:	08012edc 	.word	0x08012edc
 800c8b4:	08012f18 	.word	0x08012f18
 800c8b8:	08012f30 	.word	0x08012f30
 800c8bc:	08012f5c 	.word	0x08012f5c

0800c8c0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c8c0:	b5b0      	push	{r4, r5, r7, lr}
 800c8c2:	b08a      	sub	sp, #40	; 0x28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <tcp_output+0x1c>
 800c8ce:	4b9e      	ldr	r3, [pc, #632]	; (800cb48 <tcp_output+0x288>)
 800c8d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c8d4:	499d      	ldr	r1, [pc, #628]	; (800cb4c <tcp_output+0x28c>)
 800c8d6:	489e      	ldr	r0, [pc, #632]	; (800cb50 <tcp_output+0x290>)
 800c8d8:	f003 fd32 	bl	8010340 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	7d1b      	ldrb	r3, [r3, #20]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d106      	bne.n	800c8f2 <tcp_output+0x32>
 800c8e4:	4b98      	ldr	r3, [pc, #608]	; (800cb48 <tcp_output+0x288>)
 800c8e6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c8ea:	499a      	ldr	r1, [pc, #616]	; (800cb54 <tcp_output+0x294>)
 800c8ec:	4898      	ldr	r0, [pc, #608]	; (800cb50 <tcp_output+0x290>)
 800c8ee:	f003 fd27 	bl	8010340 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c8f2:	4b99      	ldr	r3, [pc, #612]	; (800cb58 <tcp_output+0x298>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d101      	bne.n	800c900 <tcp_output+0x40>
    return ERR_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	e1ce      	b.n	800cc9e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c90c:	4293      	cmp	r3, r2
 800c90e:	bf28      	it	cs
 800c910:	4613      	movcs	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10b      	bne.n	800c93a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	8b5b      	ldrh	r3, [r3, #26]
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 81aa 	beq.w	800cc84 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fdcb 	bl	800d4cc <tcp_send_empty_ack>
 800c936:	4603      	mov	r3, r0
 800c938:	e1b1      	b.n	800cc9e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c93a:	6879      	ldr	r1, [r7, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3304      	adds	r3, #4
 800c940:	461a      	mov	r2, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fc7c 	bl	800c240 <tcp_route>
 800c948:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <tcp_output+0x96>
    return ERR_RTE;
 800c950:	f06f 0303 	mvn.w	r3, #3
 800c954:	e1a3      	b.n	800cc9e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <tcp_output+0xa4>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d111      	bne.n	800c988 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <tcp_output+0xb0>
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	3304      	adds	r3, #4
 800c96e:	e000      	b.n	800c972 <tcp_output+0xb2>
 800c970:	2300      	movs	r3, #0
 800c972:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <tcp_output+0xc0>
      return ERR_RTE;
 800c97a:	f06f 0303 	mvn.w	r3, #3
 800c97e:	e18e      	b.n	800cc9e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fa f8a7 	bl	8006ae2 <lwip_htonl>
 800c994:	4602      	mov	r2, r0
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c99e:	8912      	ldrh	r2, [r2, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d227      	bcs.n	800c9f8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d114      	bne.n	800c9e0 <tcp_output+0x120>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d110      	bne.n	800c9e0 <tcp_output+0x120>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10b      	bne.n	800c9e0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	8b5b      	ldrh	r3, [r3, #26]
 800c9e4:	f003 0302 	and.w	r3, r3, #2
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 814d 	beq.w	800cc88 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fd6c 	bl	800d4cc <tcp_send_empty_ack>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e152      	b.n	800cc9e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca04:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 811c 	beq.w	800cc46 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ca0e:	e002      	b.n	800ca16 <tcp_output+0x156>
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	623b      	str	r3, [r7, #32]
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1f8      	bne.n	800ca10 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ca1e:	e112      	b.n	800cc46 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	899b      	ldrh	r3, [r3, #12]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fa f845 	bl	8006ab8 <lwip_htons>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d006      	beq.n	800ca48 <tcp_output+0x188>
 800ca3a:	4b43      	ldr	r3, [pc, #268]	; (800cb48 <tcp_output+0x288>)
 800ca3c:	f240 5236 	movw	r2, #1334	; 0x536
 800ca40:	4946      	ldr	r1, [pc, #280]	; (800cb5c <tcp_output+0x29c>)
 800ca42:	4843      	ldr	r0, [pc, #268]	; (800cb50 <tcp_output+0x290>)
 800ca44:	f003 fc7c 	bl	8010340 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d01f      	beq.n	800ca90 <tcp_output+0x1d0>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8b5b      	ldrh	r3, [r3, #26]
 800ca54:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d119      	bne.n	800ca90 <tcp_output+0x1d0>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00b      	beq.n	800ca7c <tcp_output+0x1bc>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d110      	bne.n	800ca90 <tcp_output+0x1d0>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca72:	891a      	ldrh	r2, [r3, #8]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d209      	bcs.n	800ca90 <tcp_output+0x1d0>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d004      	beq.n	800ca90 <tcp_output+0x1d0>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d901      	bls.n	800ca94 <tcp_output+0x1d4>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <tcp_output+0x1d6>
 800ca94:	2300      	movs	r3, #0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	8b5b      	ldrh	r3, [r3, #26]
 800ca9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 80e4 	beq.w	800cc70 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	7d1b      	ldrb	r3, [r3, #20]
 800caac:	2b02      	cmp	r3, #2
 800caae:	d00d      	beq.n	800cacc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	899b      	ldrh	r3, [r3, #12]
 800cab6:	b29c      	uxth	r4, r3
 800cab8:	2010      	movs	r0, #16
 800caba:	f7f9 fffd 	bl	8006ab8 <lwip_htons>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	4322      	orrs	r2, r4
 800cac8:	b292      	uxth	r2, r2
 800caca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	6879      	ldr	r1, [r7, #4]
 800cad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cad2:	f000 f909 	bl	800cce8 <tcp_output_segment>
 800cad6:	4603      	mov	r3, r0
 800cad8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d009      	beq.n	800caf6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	8b5b      	ldrh	r3, [r3, #26]
 800cae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	835a      	strh	r2, [r3, #26]
      return err;
 800caf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf4:	e0d3      	b.n	800cc9e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	7d1b      	ldrb	r3, [r3, #20]
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	d006      	beq.n	800cb14 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	8b5b      	ldrh	r3, [r3, #26]
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f9 ffe1 	bl	8006ae2 <lwip_htonl>
 800cb20:	4604      	mov	r4, r0
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	891b      	ldrh	r3, [r3, #8]
 800cb26:	461d      	mov	r5, r3
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	899b      	ldrh	r3, [r3, #12]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f9 ffc1 	bl	8006ab8 <lwip_htons>
 800cb36:	4603      	mov	r3, r0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0303 	and.w	r3, r3, #3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00e      	beq.n	800cb60 <tcp_output+0x2a0>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e00d      	b.n	800cb62 <tcp_output+0x2a2>
 800cb46:	bf00      	nop
 800cb48:	08012a40 	.word	0x08012a40
 800cb4c:	08012f84 	.word	0x08012f84
 800cb50:	08012a94 	.word	0x08012a94
 800cb54:	08012f9c 	.word	0x08012f9c
 800cb58:	20005b68 	.word	0x20005b68
 800cb5c:	08012fc4 	.word	0x08012fc4
 800cb60:	2300      	movs	r3, #0
 800cb62:	442b      	add	r3, r5
 800cb64:	4423      	add	r3, r4
 800cb66:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	da02      	bge.n	800cb7a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	891b      	ldrh	r3, [r3, #8]
 800cb7e:	461c      	mov	r4, r3
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	899b      	ldrh	r3, [r3, #12]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f9 ff95 	bl	8006ab8 <lwip_htons>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <tcp_output+0x2de>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e000      	b.n	800cba0 <tcp_output+0x2e0>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4423      	add	r3, r4
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d049      	beq.n	800cc3a <tcp_output+0x37a>
      seg->next = NULL;
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d105      	bne.n	800cbc0 <tcp_output+0x300>
        pcb->unacked = seg;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	623b      	str	r3, [r7, #32]
 800cbbe:	e03f      	b.n	800cc40 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f9 ff8b 	bl	8006ae2 <lwip_htonl>
 800cbcc:	4604      	mov	r4, r0
 800cbce:	6a3b      	ldr	r3, [r7, #32]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7f9 ff84 	bl	8006ae2 <lwip_htonl>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	1ae3      	subs	r3, r4, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da24      	bge.n	800cc2c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3370      	adds	r3, #112	; 0x70
 800cbe6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cbe8:	e002      	b.n	800cbf0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d011      	beq.n	800cc1c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7f9 ff6e 	bl	8006ae2 <lwip_htonl>
 800cc06:	4604      	mov	r4, r0
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f9 ff67 	bl	8006ae2 <lwip_htonl>
 800cc14:	4603      	mov	r3, r0
 800cc16:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dbe6      	blt.n	800cbea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	e009      	b.n	800cc40 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc30:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	623b      	str	r3, [r7, #32]
 800cc38:	e002      	b.n	800cc40 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cc3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc3c:	f7fc fc43 	bl	80094c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d012      	beq.n	800cc72 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f9 ff45 	bl	8006ae2 <lwip_htonl>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc62:	8912      	ldrh	r2, [r2, #8]
 800cc64:	4413      	add	r3, r2
  while (seg != NULL &&
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	f4bf aed9 	bcs.w	800ca20 <tcp_output+0x160>
 800cc6e:	e000      	b.n	800cc72 <tcp_output+0x3b2>
      break;
 800cc70:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d108      	bne.n	800cc8c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cc82:	e004      	b.n	800cc8e <tcp_output+0x3ce>
    goto output_done;
 800cc84:	bf00      	nop
 800cc86:	e002      	b.n	800cc8e <tcp_output+0x3ce>
    goto output_done;
 800cc88:	bf00      	nop
 800cc8a:	e000      	b.n	800cc8e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cc8c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	8b5b      	ldrh	r3, [r3, #26]
 800cc92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bdb0      	pop	{r4, r5, r7, pc}
 800cca6:	bf00      	nop

0800cca8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d106      	bne.n	800ccc4 <tcp_output_segment_busy+0x1c>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <tcp_output_segment_busy+0x34>)
 800ccb8:	f240 529a 	movw	r2, #1434	; 0x59a
 800ccbc:	4908      	ldr	r1, [pc, #32]	; (800cce0 <tcp_output_segment_busy+0x38>)
 800ccbe:	4809      	ldr	r0, [pc, #36]	; (800cce4 <tcp_output_segment_busy+0x3c>)
 800ccc0:	f003 fb3e 	bl	8010340 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	7b9b      	ldrb	r3, [r3, #14]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d001      	beq.n	800ccd2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e000      	b.n	800ccd4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	08012a40 	.word	0x08012a40
 800cce0:	08012fdc 	.word	0x08012fdc
 800cce4:	08012a94 	.word	0x08012a94

0800cce8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cce8:	b5b0      	push	{r4, r5, r7, lr}
 800ccea:	b08c      	sub	sp, #48	; 0x30
 800ccec:	af04      	add	r7, sp, #16
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <tcp_output_segment+0x20>
 800ccfa:	4b63      	ldr	r3, [pc, #396]	; (800ce88 <tcp_output_segment+0x1a0>)
 800ccfc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cd00:	4962      	ldr	r1, [pc, #392]	; (800ce8c <tcp_output_segment+0x1a4>)
 800cd02:	4863      	ldr	r0, [pc, #396]	; (800ce90 <tcp_output_segment+0x1a8>)
 800cd04:	f003 fb1c 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <tcp_output_segment+0x34>
 800cd0e:	4b5e      	ldr	r3, [pc, #376]	; (800ce88 <tcp_output_segment+0x1a0>)
 800cd10:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cd14:	495f      	ldr	r1, [pc, #380]	; (800ce94 <tcp_output_segment+0x1ac>)
 800cd16:	485e      	ldr	r0, [pc, #376]	; (800ce90 <tcp_output_segment+0x1a8>)
 800cd18:	f003 fb12 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d106      	bne.n	800cd30 <tcp_output_segment+0x48>
 800cd22:	4b59      	ldr	r3, [pc, #356]	; (800ce88 <tcp_output_segment+0x1a0>)
 800cd24:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cd28:	495b      	ldr	r1, [pc, #364]	; (800ce98 <tcp_output_segment+0x1b0>)
 800cd2a:	4859      	ldr	r0, [pc, #356]	; (800ce90 <tcp_output_segment+0x1a8>)
 800cd2c:	f003 fb08 	bl	8010340 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff ffb9 	bl	800cca8 <tcp_output_segment_busy>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e09f      	b.n	800ce80 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	68dc      	ldr	r4, [r3, #12]
 800cd48:	4610      	mov	r0, r2
 800cd4a:	f7f9 feca 	bl	8006ae2 <lwip_htonl>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	68dc      	ldr	r4, [r3, #12]
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	f7f9 feac 	bl	8006ab8 <lwip_htons>
 800cd60:	4603      	mov	r3, r0
 800cd62:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cd6c:	441a      	add	r2, r3
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	3314      	adds	r3, #20
 800cd78:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	7a9b      	ldrb	r3, [r3, #10]
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d015      	beq.n	800cdb2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	3304      	adds	r3, #4
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cd92:	f7fc fe8f 	bl	8009ab4 <tcp_eff_send_mss_netif>
 800cd96:	4603      	mov	r3, r0
 800cd98:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cd9a:	8b7b      	ldrh	r3, [r7, #26]
 800cd9c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7f9 fe9e 	bl	8006ae2 <lwip_htonl>
 800cda6:	4602      	mov	r2, r0
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	da02      	bge.n	800cdc2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10c      	bne.n	800cde4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cdca:	4b34      	ldr	r3, [pc, #208]	; (800ce9c <tcp_output_segment+0x1b4>)
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f9 fe82 	bl	8006ae2 <lwip_htonl>
 800cdde:	4602      	mov	r2, r0
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68da      	ldr	r2, [r3, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	8959      	ldrh	r1, [r3, #10]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	8b3a      	ldrh	r2, [r7, #24]
 800cdfe:	1a8a      	subs	r2, r1, r2
 800ce00:	b292      	uxth	r2, r2
 800ce02:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	8919      	ldrh	r1, [r3, #8]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	8b3a      	ldrh	r2, [r7, #24]
 800ce10:	1a8a      	subs	r2, r1, r2
 800ce12:	b292      	uxth	r2, r2
 800ce14:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	68d2      	ldr	r2, [r2, #12]
 800ce1e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	741a      	strb	r2, [r3, #16]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f103 0214 	add.w	r2, r3, #20
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	7a9b      	ldrb	r3, [r3, #10]
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	f003 0304 	and.w	r3, r3, #4
 800ce3e:	4413      	add	r3, r2
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d006      	beq.n	800ce54 <tcp_output_segment+0x16c>
 800ce46:	4b10      	ldr	r3, [pc, #64]	; (800ce88 <tcp_output_segment+0x1a0>)
 800ce48:	f240 621c 	movw	r2, #1564	; 0x61c
 800ce4c:	4914      	ldr	r1, [pc, #80]	; (800cea0 <tcp_output_segment+0x1b8>)
 800ce4e:	4810      	ldr	r0, [pc, #64]	; (800ce90 <tcp_output_segment+0x1a8>)
 800ce50:	f003 fa76 	bl	8010340 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6858      	ldr	r0, [r3, #4]
 800ce58:	68b9      	ldr	r1, [r7, #8]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	1d1c      	adds	r4, r3, #4
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	7add      	ldrb	r5, [r3, #11]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	7a9b      	ldrb	r3, [r3, #10]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	9202      	str	r2, [sp, #8]
 800ce6a:	2206      	movs	r2, #6
 800ce6c:	9201      	str	r2, [sp, #4]
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	462b      	mov	r3, r5
 800ce72:	4622      	mov	r2, r4
 800ce74:	f002 f9f4 	bl	800f260 <ip4_output_if>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ce7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bdb0      	pop	{r4, r5, r7, pc}
 800ce88:	08012a40 	.word	0x08012a40
 800ce8c:	08013004 	.word	0x08013004
 800ce90:	08012a94 	.word	0x08012a94
 800ce94:	08013024 	.word	0x08013024
 800ce98:	08013044 	.word	0x08013044
 800ce9c:	20005b58 	.word	0x20005b58
 800cea0:	08013068 	.word	0x08013068

0800cea4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cea4:	b5b0      	push	{r4, r5, r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <tcp_rexmit_rto_prepare+0x1c>
 800ceb2:	4b31      	ldr	r3, [pc, #196]	; (800cf78 <tcp_rexmit_rto_prepare+0xd4>)
 800ceb4:	f240 6263 	movw	r2, #1635	; 0x663
 800ceb8:	4930      	ldr	r1, [pc, #192]	; (800cf7c <tcp_rexmit_rto_prepare+0xd8>)
 800ceba:	4831      	ldr	r0, [pc, #196]	; (800cf80 <tcp_rexmit_rto_prepare+0xdc>)
 800cebc:	f003 fa40 	bl	8010340 <iprintf>

  if (pcb->unacked == NULL) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cec8:	f06f 0305 	mvn.w	r3, #5
 800cecc:	e050      	b.n	800cf70 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e00b      	b.n	800ceee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fee6 	bl	800cca8 <tcp_output_segment_busy>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cee2:	f06f 0305 	mvn.w	r3, #5
 800cee6:	e043      	b.n	800cf70 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1ef      	bne.n	800ced6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f7ff fed6 	bl	800cca8 <tcp_output_segment_busy>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cf02:	f06f 0305 	mvn.w	r3, #5
 800cf06:	e033      	b.n	800cf70 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	8b5b      	ldrh	r3, [r3, #26]
 800cf22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f9 fdd5 	bl	8006ae2 <lwip_htonl>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	891b      	ldrh	r3, [r3, #8]
 800cf3e:	461d      	mov	r5, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	899b      	ldrh	r3, [r3, #12]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7f9 fdb5 	bl	8006ab8 <lwip_htons>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	f003 0303 	and.w	r3, r3, #3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <tcp_rexmit_rto_prepare+0xba>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <tcp_rexmit_rto_prepare+0xbc>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	442b      	add	r3, r5
 800cf62:	18e2      	adds	r2, r4, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bdb0      	pop	{r4, r5, r7, pc}
 800cf78:	08012a40 	.word	0x08012a40
 800cf7c:	0801307c 	.word	0x0801307c
 800cf80:	08012a94 	.word	0x08012a94

0800cf84 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <tcp_rexmit_rto_commit+0x1c>
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <tcp_rexmit_rto_commit+0x44>)
 800cf94:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf98:	490c      	ldr	r1, [pc, #48]	; (800cfcc <tcp_rexmit_rto_commit+0x48>)
 800cf9a:	480d      	ldr	r0, [pc, #52]	; (800cfd0 <tcp_rexmit_rto_commit+0x4c>)
 800cf9c:	f003 f9d0 	bl	8010340 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfa6:	2bff      	cmp	r3, #255	; 0xff
 800cfa8:	d007      	beq.n	800cfba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff fc80 	bl	800c8c0 <tcp_output>
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	08012a40 	.word	0x08012a40
 800cfcc:	080130a0 	.word	0x080130a0
 800cfd0:	08012a94 	.word	0x08012a94

0800cfd4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <tcp_rexmit_rto+0x1c>
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <tcp_rexmit_rto+0x38>)
 800cfe4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cfe8:	4909      	ldr	r1, [pc, #36]	; (800d010 <tcp_rexmit_rto+0x3c>)
 800cfea:	480a      	ldr	r0, [pc, #40]	; (800d014 <tcp_rexmit_rto+0x40>)
 800cfec:	f003 f9a8 	bl	8010340 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff ff57 	bl	800cea4 <tcp_rexmit_rto_prepare>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff ffc1 	bl	800cf84 <tcp_rexmit_rto_commit>
  }
}
 800d002:	bf00      	nop
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	08012a40 	.word	0x08012a40
 800d010:	080130c4 	.word	0x080130c4
 800d014:	08012a94 	.word	0x08012a94

0800d018 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d018:	b590      	push	{r4, r7, lr}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <tcp_rexmit+0x1c>
 800d026:	4b2f      	ldr	r3, [pc, #188]	; (800d0e4 <tcp_rexmit+0xcc>)
 800d028:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d02c:	492e      	ldr	r1, [pc, #184]	; (800d0e8 <tcp_rexmit+0xd0>)
 800d02e:	482f      	ldr	r0, [pc, #188]	; (800d0ec <tcp_rexmit+0xd4>)
 800d030:	f003 f986 	bl	8010340 <iprintf>

  if (pcb->unacked == NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d03c:	f06f 0305 	mvn.w	r3, #5
 800d040:	e04c      	b.n	800d0dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d046:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d048:	68b8      	ldr	r0, [r7, #8]
 800d04a:	f7ff fe2d 	bl	800cca8 <tcp_output_segment_busy>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d054:	f06f 0305 	mvn.w	r3, #5
 800d058:	e040      	b.n	800d0dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	336c      	adds	r3, #108	; 0x6c
 800d066:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d068:	e002      	b.n	800d070 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d011      	beq.n	800d09c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	f7f9 fd2e 	bl	8006ae2 <lwip_htonl>
 800d086:	4604      	mov	r4, r0
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f9 fd27 	bl	8006ae2 <lwip_htonl>
 800d094:	4603      	mov	r3, r0
 800d096:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d098:	2b00      	cmp	r3, #0
 800d09a:	dbe6      	blt.n	800d06a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d103      	bne.n	800d0ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0c0:	2bff      	cmp	r3, #255	; 0xff
 800d0c2:	d007      	beq.n	800d0d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd90      	pop	{r4, r7, pc}
 800d0e4:	08012a40 	.word	0x08012a40
 800d0e8:	080130e0 	.word	0x080130e0
 800d0ec:	08012a94 	.word	0x08012a94

0800d0f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d106      	bne.n	800d10c <tcp_rexmit_fast+0x1c>
 800d0fe:	4b2a      	ldr	r3, [pc, #168]	; (800d1a8 <tcp_rexmit_fast+0xb8>)
 800d100:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d104:	4929      	ldr	r1, [pc, #164]	; (800d1ac <tcp_rexmit_fast+0xbc>)
 800d106:	482a      	ldr	r0, [pc, #168]	; (800d1b0 <tcp_rexmit_fast+0xc0>)
 800d108:	f003 f91a 	bl	8010340 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d110:	2b00      	cmp	r3, #0
 800d112:	d044      	beq.n	800d19e <tcp_rexmit_fast+0xae>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8b5b      	ldrh	r3, [r3, #26]
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d13e      	bne.n	800d19e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7ff ff79 	bl	800d018 <tcp_rexmit>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d138      	bne.n	800d19e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d138:	4293      	cmp	r3, r2
 800d13a:	bf28      	it	cs
 800d13c:	4613      	movcs	r3, r2
 800d13e:	b29b      	uxth	r3, r3
 800d140:	0fda      	lsrs	r2, r3, #31
 800d142:	4413      	add	r3, r2
 800d144:	105b      	asrs	r3, r3, #1
 800d146:	b29a      	uxth	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d154:	461a      	mov	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d206      	bcs.n	800d16e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	b29a      	uxth	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d178:	4619      	mov	r1, r3
 800d17a:	0049      	lsls	r1, r1, #1
 800d17c:	440b      	add	r3, r1
 800d17e:	b29b      	uxth	r3, r3
 800d180:	4413      	add	r3, r2
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	8b5b      	ldrh	r3, [r3, #26]
 800d18e:	f043 0304 	orr.w	r3, r3, #4
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08012a40 	.word	0x08012a40
 800d1ac:	080130f8 	.word	0x080130f8
 800d1b0:	08012a94 	.word	0x08012a94

0800d1b4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	607b      	str	r3, [r7, #4]
 800d1be:	460b      	mov	r3, r1
 800d1c0:	817b      	strh	r3, [r7, #10]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d1c6:	897a      	ldrh	r2, [r7, #10]
 800d1c8:	893b      	ldrh	r3, [r7, #8]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	3314      	adds	r3, #20
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	2022      	movs	r0, #34	; 0x22
 800d1da:	f7fa fc1d 	bl	8007a18 <pbuf_alloc>
 800d1de:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d04d      	beq.n	800d282 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d1e6:	897b      	ldrh	r3, [r7, #10]
 800d1e8:	3313      	adds	r3, #19
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	8952      	ldrh	r2, [r2, #10]
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	db06      	blt.n	800d200 <tcp_output_alloc_header_common+0x4c>
 800d1f2:	4b26      	ldr	r3, [pc, #152]	; (800d28c <tcp_output_alloc_header_common+0xd8>)
 800d1f4:	f240 7223 	movw	r2, #1827	; 0x723
 800d1f8:	4925      	ldr	r1, [pc, #148]	; (800d290 <tcp_output_alloc_header_common+0xdc>)
 800d1fa:	4826      	ldr	r0, [pc, #152]	; (800d294 <tcp_output_alloc_header_common+0xe0>)
 800d1fc:	f003 f8a0 	bl	8010340 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d206:	8c3b      	ldrh	r3, [r7, #32]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f9 fc55 	bl	8006ab8 <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	461a      	mov	r2, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f9 fc4d 	bl	8006ab8 <lwip_htons>
 800d21e:	4603      	mov	r3, r0
 800d220:	461a      	mov	r2, r3
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7f9 fc58 	bl	8006ae2 <lwip_htonl>
 800d232:	4602      	mov	r2, r0
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d238:	897b      	ldrh	r3, [r7, #10]
 800d23a:	089b      	lsrs	r3, r3, #2
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3305      	adds	r3, #5
 800d240:	b29b      	uxth	r3, r3
 800d242:	031b      	lsls	r3, r3, #12
 800d244:	b29a      	uxth	r2, r3
 800d246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4313      	orrs	r3, r2
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4618      	mov	r0, r3
 800d252:	f7f9 fc31 	bl	8006ab8 <lwip_htons>
 800d256:	4603      	mov	r3, r0
 800d258:	461a      	mov	r2, r3
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d25e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d260:	4618      	mov	r0, r3
 800d262:	f7f9 fc29 	bl	8006ab8 <lwip_htons>
 800d266:	4603      	mov	r3, r0
 800d268:	461a      	mov	r2, r3
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2200      	movs	r2, #0
 800d272:	741a      	strb	r2, [r3, #16]
 800d274:	2200      	movs	r2, #0
 800d276:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2200      	movs	r2, #0
 800d27c:	749a      	strb	r2, [r3, #18]
 800d27e:	2200      	movs	r2, #0
 800d280:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d282:	697b      	ldr	r3, [r7, #20]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08012a40 	.word	0x08012a40
 800d290:	08013118 	.word	0x08013118
 800d294:	08012a94 	.word	0x08012a94

0800d298 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d298:	b5b0      	push	{r4, r5, r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	607b      	str	r3, [r7, #4]
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	817b      	strh	r3, [r7, #10]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <tcp_output_alloc_header+0x26>
 800d2b0:	4b15      	ldr	r3, [pc, #84]	; (800d308 <tcp_output_alloc_header+0x70>)
 800d2b2:	f240 7242 	movw	r2, #1858	; 0x742
 800d2b6:	4915      	ldr	r1, [pc, #84]	; (800d30c <tcp_output_alloc_header+0x74>)
 800d2b8:	4815      	ldr	r0, [pc, #84]	; (800d310 <tcp_output_alloc_header+0x78>)
 800d2ba:	f003 f841 	bl	8010340 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8adb      	ldrh	r3, [r3, #22]
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	8b12      	ldrh	r2, [r2, #24]
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d2ce:	893d      	ldrh	r5, [r7, #8]
 800d2d0:	897c      	ldrh	r4, [r7, #10]
 800d2d2:	9103      	str	r1, [sp, #12]
 800d2d4:	2110      	movs	r1, #16
 800d2d6:	9102      	str	r1, [sp, #8]
 800d2d8:	9201      	str	r2, [sp, #4]
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	462a      	mov	r2, r5
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	f7ff ff67 	bl	800d1b4 <tcp_output_alloc_header_common>
 800d2e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d006      	beq.n	800d2fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d2f6:	441a      	add	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d2fc:	697b      	ldr	r3, [r7, #20]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bdb0      	pop	{r4, r5, r7, pc}
 800d306:	bf00      	nop
 800d308:	08012a40 	.word	0x08012a40
 800d30c:	08013148 	.word	0x08013148
 800d310:	08012a94 	.word	0x08012a94

0800d314 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4611      	mov	r1, r2
 800d320:	461a      	mov	r2, r3
 800d322:	460b      	mov	r3, r1
 800d324:	71fb      	strb	r3, [r7, #7]
 800d326:	4613      	mov	r3, r2
 800d328:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d106      	bne.n	800d342 <tcp_output_fill_options+0x2e>
 800d334:	4b13      	ldr	r3, [pc, #76]	; (800d384 <tcp_output_fill_options+0x70>)
 800d336:	f240 7256 	movw	r2, #1878	; 0x756
 800d33a:	4913      	ldr	r1, [pc, #76]	; (800d388 <tcp_output_fill_options+0x74>)
 800d33c:	4813      	ldr	r0, [pc, #76]	; (800d38c <tcp_output_fill_options+0x78>)
 800d33e:	f002 ffff 	bl	8010340 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	3314      	adds	r3, #20
 800d34c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	f103 0214 	add.w	r2, r3, #20
 800d354:	8bfb      	ldrh	r3, [r7, #30]
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4619      	mov	r1, r3
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	f003 0304 	and.w	r3, r3, #4
 800d362:	440b      	add	r3, r1
 800d364:	4413      	add	r3, r2
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d006      	beq.n	800d37a <tcp_output_fill_options+0x66>
 800d36c:	4b05      	ldr	r3, [pc, #20]	; (800d384 <tcp_output_fill_options+0x70>)
 800d36e:	f240 7275 	movw	r2, #1909	; 0x775
 800d372:	4907      	ldr	r1, [pc, #28]	; (800d390 <tcp_output_fill_options+0x7c>)
 800d374:	4805      	ldr	r0, [pc, #20]	; (800d38c <tcp_output_fill_options+0x78>)
 800d376:	f002 ffe3 	bl	8010340 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d37a:	bf00      	nop
 800d37c:	3720      	adds	r7, #32
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	08012a40 	.word	0x08012a40
 800d388:	08013170 	.word	0x08013170
 800d38c:	08012a94 	.word	0x08012a94
 800d390:	08013068 	.word	0x08013068

0800d394 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b08a      	sub	sp, #40	; 0x28
 800d398:	af04      	add	r7, sp, #16
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <tcp_output_control_segment+0x22>
 800d3a8:	4b1c      	ldr	r3, [pc, #112]	; (800d41c <tcp_output_control_segment+0x88>)
 800d3aa:	f240 7287 	movw	r2, #1927	; 0x787
 800d3ae:	491c      	ldr	r1, [pc, #112]	; (800d420 <tcp_output_control_segment+0x8c>)
 800d3b0:	481c      	ldr	r0, [pc, #112]	; (800d424 <tcp_output_control_segment+0x90>)
 800d3b2:	f002 ffc5 	bl	8010340 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d3b6:	683a      	ldr	r2, [r7, #0]
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f7fe ff40 	bl	800c240 <tcp_route>
 800d3c0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d3c8:	23fc      	movs	r3, #252	; 0xfc
 800d3ca:	75fb      	strb	r3, [r7, #23]
 800d3cc:	e01c      	b.n	800d408 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d006      	beq.n	800d3e2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	7adb      	ldrb	r3, [r3, #11]
 800d3d8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7a9b      	ldrb	r3, [r3, #10]
 800d3de:	757b      	strb	r3, [r7, #21]
 800d3e0:	e003      	b.n	800d3ea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d3e2:	23ff      	movs	r3, #255	; 0xff
 800d3e4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d3ea:	7dba      	ldrb	r2, [r7, #22]
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	9302      	str	r3, [sp, #8]
 800d3f0:	2306      	movs	r3, #6
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	7d7b      	ldrb	r3, [r7, #21]
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	68b8      	ldr	r0, [r7, #8]
 800d400:	f001 ff2e 	bl	800f260 <ip4_output_if>
 800d404:	4603      	mov	r3, r0
 800d406:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d408:	68b8      	ldr	r0, [r7, #8]
 800d40a:	f7fa fde9 	bl	8007fe0 <pbuf_free>
  return err;
 800d40e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	08012a40 	.word	0x08012a40
 800d420:	08013198 	.word	0x08013198
 800d424:	08012a94 	.word	0x08012a94

0800d428 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d428:	b590      	push	{r4, r7, lr}
 800d42a:	b08b      	sub	sp, #44	; 0x2c
 800d42c:	af04      	add	r7, sp, #16
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <tcp_rst+0x22>
 800d43c:	4b1f      	ldr	r3, [pc, #124]	; (800d4bc <tcp_rst+0x94>)
 800d43e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d442:	491f      	ldr	r1, [pc, #124]	; (800d4c0 <tcp_rst+0x98>)
 800d444:	481f      	ldr	r0, [pc, #124]	; (800d4c4 <tcp_rst+0x9c>)
 800d446:	f002 ff7b 	bl	8010340 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <tcp_rst+0x36>
 800d450:	4b1a      	ldr	r3, [pc, #104]	; (800d4bc <tcp_rst+0x94>)
 800d452:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d456:	491c      	ldr	r1, [pc, #112]	; (800d4c8 <tcp_rst+0xa0>)
 800d458:	481a      	ldr	r0, [pc, #104]	; (800d4c4 <tcp_rst+0x9c>)
 800d45a:	f002 ff71 	bl	8010340 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d45e:	2300      	movs	r3, #0
 800d460:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d462:	f246 0308 	movw	r3, #24584	; 0x6008
 800d466:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	b29c      	uxth	r4, r3
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f7f9 fb38 	bl	8006ae2 <lwip_htonl>
 800d472:	4602      	mov	r2, r0
 800d474:	8abb      	ldrh	r3, [r7, #20]
 800d476:	9303      	str	r3, [sp, #12]
 800d478:	2314      	movs	r3, #20
 800d47a:	9302      	str	r3, [sp, #8]
 800d47c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	4613      	mov	r3, r2
 800d486:	2200      	movs	r2, #0
 800d488:	4621      	mov	r1, r4
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff fe92 	bl	800d1b4 <tcp_output_alloc_header_common>
 800d490:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00c      	beq.n	800d4b2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d498:	7dfb      	ldrb	r3, [r7, #23]
 800d49a:	2200      	movs	r2, #0
 800d49c:	6939      	ldr	r1, [r7, #16]
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff ff38 	bl	800d314 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	6939      	ldr	r1, [r7, #16]
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f7ff ff72 	bl	800d394 <tcp_output_control_segment>
 800d4b0:	e000      	b.n	800d4b4 <tcp_rst+0x8c>
    return;
 800d4b2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd90      	pop	{r4, r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	08012a40 	.word	0x08012a40
 800d4c0:	080131c4 	.word	0x080131c4
 800d4c4:	08012a94 	.word	0x08012a94
 800d4c8:	080131e0 	.word	0x080131e0

0800d4cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d4cc:	b590      	push	{r4, r7, lr}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <tcp_send_empty_ack+0x24>
 800d4e2:	4b28      	ldr	r3, [pc, #160]	; (800d584 <tcp_send_empty_ack+0xb8>)
 800d4e4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d4e8:	4927      	ldr	r1, [pc, #156]	; (800d588 <tcp_send_empty_ack+0xbc>)
 800d4ea:	4828      	ldr	r0, [pc, #160]	; (800d58c <tcp_send_empty_ack+0xc0>)
 800d4ec:	f002 ff28 	bl	8010340 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	f003 0304 	and.w	r3, r3, #4
 800d4fa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d4fc:	7d7b      	ldrb	r3, [r7, #21]
 800d4fe:	b29c      	uxth	r4, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d504:	4618      	mov	r0, r3
 800d506:	f7f9 faec 	bl	8006ae2 <lwip_htonl>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2200      	movs	r2, #0
 800d50e:	4621      	mov	r1, r4
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fec1 	bl	800d298 <tcp_output_alloc_header>
 800d516:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d109      	bne.n	800d532 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	8b5b      	ldrh	r3, [r3, #26]
 800d522:	f043 0303 	orr.w	r3, r3, #3
 800d526:	b29a      	uxth	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d52c:	f06f 0301 	mvn.w	r3, #1
 800d530:	e023      	b.n	800d57a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d532:	7dbb      	ldrb	r3, [r7, #22]
 800d534:	7dfa      	ldrb	r2, [r7, #23]
 800d536:	6939      	ldr	r1, [r7, #16]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff feeb 	bl	800d314 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3304      	adds	r3, #4
 800d544:	6939      	ldr	r1, [r7, #16]
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff ff24 	bl	800d394 <tcp_output_control_segment>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d007      	beq.n	800d568 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8b5b      	ldrh	r3, [r3, #26]
 800d55c:	f043 0303 	orr.w	r3, r3, #3
 800d560:	b29a      	uxth	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	835a      	strh	r2, [r3, #26]
 800d566:	e006      	b.n	800d576 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	8b5b      	ldrh	r3, [r3, #26]
 800d56c:	f023 0303 	bic.w	r3, r3, #3
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd90      	pop	{r4, r7, pc}
 800d582:	bf00      	nop
 800d584:	08012a40 	.word	0x08012a40
 800d588:	080131fc 	.word	0x080131fc
 800d58c:	08012a94 	.word	0x08012a94

0800d590 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d590:	b590      	push	{r4, r7, lr}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d598:	2300      	movs	r3, #0
 800d59a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <tcp_keepalive+0x20>
 800d5a2:	4b18      	ldr	r3, [pc, #96]	; (800d604 <tcp_keepalive+0x74>)
 800d5a4:	f640 0224 	movw	r2, #2084	; 0x824
 800d5a8:	4917      	ldr	r1, [pc, #92]	; (800d608 <tcp_keepalive+0x78>)
 800d5aa:	4818      	ldr	r0, [pc, #96]	; (800d60c <tcp_keepalive+0x7c>)
 800d5ac:	f002 fec8 	bl	8010340 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
 800d5b2:	b29c      	uxth	r4, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7f9 fa91 	bl	8006ae2 <lwip_htonl>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff fe66 	bl	800d298 <tcp_output_alloc_header>
 800d5cc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d8:	e010      	b.n	800d5fc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	6939      	ldr	r1, [r7, #16]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff fe97 	bl	800d314 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	6939      	ldr	r1, [r7, #16]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7ff fed0 	bl	800d394 <tcp_output_control_segment>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	371c      	adds	r7, #28
 800d600:	46bd      	mov	sp, r7
 800d602:	bd90      	pop	{r4, r7, pc}
 800d604:	08012a40 	.word	0x08012a40
 800d608:	0801321c 	.word	0x0801321c
 800d60c:	08012a94 	.word	0x08012a94

0800d610 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b08b      	sub	sp, #44	; 0x2c
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d618:	2300      	movs	r3, #0
 800d61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <tcp_zero_window_probe+0x22>
 800d624:	4b4c      	ldr	r3, [pc, #304]	; (800d758 <tcp_zero_window_probe+0x148>)
 800d626:	f640 024f 	movw	r2, #2127	; 0x84f
 800d62a:	494c      	ldr	r1, [pc, #304]	; (800d75c <tcp_zero_window_probe+0x14c>)
 800d62c:	484c      	ldr	r0, [pc, #304]	; (800d760 <tcp_zero_window_probe+0x150>)
 800d62e:	f002 fe87 	bl	8010340 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d636:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	e086      	b.n	800d750 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d648:	2bff      	cmp	r3, #255	; 0xff
 800d64a:	d007      	beq.n	800d65c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d652:	3301      	adds	r3, #1
 800d654:	b2da      	uxtb	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	899b      	ldrh	r3, [r3, #12]
 800d662:	b29b      	uxth	r3, r3
 800d664:	4618      	mov	r0, r3
 800d666:	f7f9 fa27 	bl	8006ab8 <lwip_htons>
 800d66a:	4603      	mov	r3, r0
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <tcp_zero_window_probe+0x72>
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	891b      	ldrh	r3, [r3, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <tcp_zero_window_probe+0x72>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <tcp_zero_window_probe+0x74>
 800d682:	2300      	movs	r3, #0
 800d684:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d686:	7ffb      	ldrb	r3, [r7, #31]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	bf0c      	ite	eq
 800d68c:	2301      	moveq	r3, #1
 800d68e:	2300      	movne	r3, #0
 800d690:	b2db      	uxtb	r3, r3
 800d692:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d698:	b299      	uxth	r1, r3
 800d69a:	6a3b      	ldr	r3, [r7, #32]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	8bba      	ldrh	r2, [r7, #28]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7ff fdf8 	bl	800d298 <tcp_output_alloc_header>
 800d6a8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d102      	bne.n	800d6b6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b4:	e04c      	b.n	800d750 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d6bc:	7ffb      	ldrb	r3, [r7, #31]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d011      	beq.n	800d6e6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	b21b      	sxth	r3, r3
 800d6ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d6ce:	b21c      	sxth	r4, r3
 800d6d0:	2011      	movs	r0, #17
 800d6d2:	f7f9 f9f1 	bl	8006ab8 <lwip_htons>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	b21b      	sxth	r3, r3
 800d6da:	4323      	orrs	r3, r4
 800d6dc:	b21b      	sxth	r3, r3
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	819a      	strh	r2, [r3, #12]
 800d6e4:	e010      	b.n	800d708 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	3314      	adds	r3, #20
 800d6ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	6858      	ldr	r0, [r3, #4]
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	891a      	ldrh	r2, [r3, #8]
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	891b      	ldrh	r3, [r3, #8]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2201      	movs	r2, #1
 800d702:	6939      	ldr	r1, [r7, #16]
 800d704:	f7fa fe56 	bl	80083b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7f9 f9e7 	bl	8006ae2 <lwip_htonl>
 800d714:	4603      	mov	r3, r0
 800d716:	3301      	adds	r3, #1
 800d718:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	2b00      	cmp	r3, #0
 800d724:	da02      	bge.n	800d72c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d730:	2200      	movs	r2, #0
 800d732:	69b9      	ldr	r1, [r7, #24]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff fded 	bl	800d314 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	3304      	adds	r3, #4
 800d740:	69b9      	ldr	r1, [r7, #24]
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff fe26 	bl	800d394 <tcp_output_control_segment>
 800d748:	4603      	mov	r3, r0
 800d74a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d74c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d750:	4618      	mov	r0, r3
 800d752:	372c      	adds	r7, #44	; 0x2c
 800d754:	46bd      	mov	sp, r7
 800d756:	bd90      	pop	{r4, r7, pc}
 800d758:	08012a40 	.word	0x08012a40
 800d75c:	08013238 	.word	0x08013238
 800d760:	08012a94 	.word	0x08012a94

0800d764 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d76c:	f7fa ff10 	bl	8008590 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <tcpip_tcp_timer+0x38>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <tcpip_tcp_timer+0x1c>
 800d778:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <tcpip_tcp_timer+0x3c>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d005      	beq.n	800d78c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d780:	2200      	movs	r2, #0
 800d782:	4908      	ldr	r1, [pc, #32]	; (800d7a4 <tcpip_tcp_timer+0x40>)
 800d784:	20fa      	movs	r0, #250	; 0xfa
 800d786:	f000 f8f3 	bl	800d970 <sys_timeout>
 800d78a:	e003      	b.n	800d794 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d78c:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <tcpip_tcp_timer+0x44>)
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
  }
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20005b54 	.word	0x20005b54
 800d7a0:	20005b64 	.word	0x20005b64
 800d7a4:	0800d765 	.word	0x0800d765
 800d7a8:	20000108 	.word	0x20000108

0800d7ac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <tcp_timer_needed+0x30>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10f      	bne.n	800d7d8 <tcp_timer_needed+0x2c>
 800d7b8:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <tcp_timer_needed+0x34>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <tcp_timer_needed+0x1c>
 800d7c0:	4b08      	ldr	r3, [pc, #32]	; (800d7e4 <tcp_timer_needed+0x38>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d007      	beq.n	800d7d8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d7c8:	4b04      	ldr	r3, [pc, #16]	; (800d7dc <tcp_timer_needed+0x30>)
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4905      	ldr	r1, [pc, #20]	; (800d7e8 <tcp_timer_needed+0x3c>)
 800d7d2:	20fa      	movs	r0, #250	; 0xfa
 800d7d4:	f000 f8cc 	bl	800d970 <sys_timeout>
  }
}
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20000108 	.word	0x20000108
 800d7e0:	20005b54 	.word	0x20005b54
 800d7e4:	20005b64 	.word	0x20005b64
 800d7e8:	0800d765 	.word	0x0800d765

0800d7ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d7f8:	2006      	movs	r0, #6
 800d7fa:	f7f9 fdb3 	bl	8007364 <memp_malloc>
 800d7fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d109      	bne.n	800d81a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d151      	bne.n	800d8b0 <sys_timeout_abs+0xc4>
 800d80c:	4b2a      	ldr	r3, [pc, #168]	; (800d8b8 <sys_timeout_abs+0xcc>)
 800d80e:	22be      	movs	r2, #190	; 0xbe
 800d810:	492a      	ldr	r1, [pc, #168]	; (800d8bc <sys_timeout_abs+0xd0>)
 800d812:	482b      	ldr	r0, [pc, #172]	; (800d8c0 <sys_timeout_abs+0xd4>)
 800d814:	f002 fd94 	bl	8010340 <iprintf>
    return;
 800d818:	e04a      	b.n	800d8b0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d832:	4b24      	ldr	r3, [pc, #144]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d103      	bne.n	800d842 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d83a:	4a22      	ldr	r2, [pc, #136]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	6013      	str	r3, [r2, #0]
    return;
 800d840:	e037      	b.n	800d8b2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	4b1f      	ldr	r3, [pc, #124]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	0fdb      	lsrs	r3, r3, #31
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d007      	beq.n	800d86a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d85a:	4b1a      	ldr	r3, [pc, #104]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d862:	4a18      	ldr	r2, [pc, #96]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	e023      	b.n	800d8b2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d86a:	4b16      	ldr	r3, [pc, #88]	; (800d8c4 <sys_timeout_abs+0xd8>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	e01a      	b.n	800d8a8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <sys_timeout_abs+0xa6>
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	0fdb      	lsrs	r3, r3, #31
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d007      	beq.n	800d8a2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	601a      	str	r2, [r3, #0]
        break;
 800d8a0:	e007      	b.n	800d8b2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e1      	bne.n	800d872 <sys_timeout_abs+0x86>
 800d8ae:	e000      	b.n	800d8b2 <sys_timeout_abs+0xc6>
    return;
 800d8b0:	bf00      	nop
      }
    }
  }
}
 800d8b2:	3718      	adds	r7, #24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0801325c 	.word	0x0801325c
 800d8bc:	08013290 	.word	0x08013290
 800d8c0:	080132d0 	.word	0x080132d0
 800d8c4:	20000100 	.word	0x20000100

0800d8c8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	4798      	blx	r3

  now = sys_now();
 800d8da:	f7f9 f85f 	bl	800699c <sys_now>
 800d8de:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <lwip_cyclic_timer+0x5c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	0fdb      	lsrs	r3, r3, #31
 800d8f4:	f003 0301 	and.w	r3, r3, #1
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d009      	beq.n	800d912 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	4413      	add	r3, r2
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	4907      	ldr	r1, [pc, #28]	; (800d928 <lwip_cyclic_timer+0x60>)
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff ff6e 	bl	800d7ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d910:	e004      	b.n	800d91c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	4904      	ldr	r1, [pc, #16]	; (800d928 <lwip_cyclic_timer+0x60>)
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff ff68 	bl	800d7ec <sys_timeout_abs>
}
 800d91c:	bf00      	nop
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20000104 	.word	0x20000104
 800d928:	0800d8c9 	.word	0x0800d8c9

0800d92c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d932:	2301      	movs	r3, #1
 800d934:	607b      	str	r3, [r7, #4]
 800d936:	e00e      	b.n	800d956 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d938:	4a0b      	ldr	r2, [pc, #44]	; (800d968 <sys_timeouts_init+0x3c>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	4a08      	ldr	r2, [pc, #32]	; (800d968 <sys_timeouts_init+0x3c>)
 800d946:	4413      	add	r3, r2
 800d948:	461a      	mov	r2, r3
 800d94a:	4908      	ldr	r1, [pc, #32]	; (800d96c <sys_timeouts_init+0x40>)
 800d94c:	f000 f810 	bl	800d970 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3301      	adds	r3, #1
 800d954:	607b      	str	r3, [r7, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d9ed      	bls.n	800d938 <sys_timeouts_init+0xc>
  }
}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	08013e44 	.word	0x08013e44
 800d96c:	0800d8c9 	.word	0x0800d8c9

0800d970 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d982:	d306      	bcc.n	800d992 <sys_timeout+0x22>
 800d984:	4b0a      	ldr	r3, [pc, #40]	; (800d9b0 <sys_timeout+0x40>)
 800d986:	f240 1229 	movw	r2, #297	; 0x129
 800d98a:	490a      	ldr	r1, [pc, #40]	; (800d9b4 <sys_timeout+0x44>)
 800d98c:	480a      	ldr	r0, [pc, #40]	; (800d9b8 <sys_timeout+0x48>)
 800d98e:	f002 fcd7 	bl	8010340 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d992:	f7f9 f803 	bl	800699c <sys_now>
 800d996:	4602      	mov	r2, r0
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	4413      	add	r3, r2
 800d99c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	f7ff ff22 	bl	800d7ec <sys_timeout_abs>
#endif
}
 800d9a8:	bf00      	nop
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	0801325c 	.word	0x0801325c
 800d9b4:	080132f8 	.word	0x080132f8
 800d9b8:	080132d0 	.word	0x080132d0

0800d9bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d9c0:	f002 fcd6 	bl	8010370 <rand>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	4b01      	ldr	r3, [pc, #4]	; (800d9dc <udp_init+0x20>)
 800d9d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d9d8:	bf00      	nop
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	20000010 	.word	0x20000010

0800d9e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d105      	bne.n	800da00 <udp_input_local_match+0x20>
 800d9f4:	4b27      	ldr	r3, [pc, #156]	; (800da94 <udp_input_local_match+0xb4>)
 800d9f6:	2287      	movs	r2, #135	; 0x87
 800d9f8:	4927      	ldr	r1, [pc, #156]	; (800da98 <udp_input_local_match+0xb8>)
 800d9fa:	4828      	ldr	r0, [pc, #160]	; (800da9c <udp_input_local_match+0xbc>)
 800d9fc:	f002 fca0 	bl	8010340 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d105      	bne.n	800da12 <udp_input_local_match+0x32>
 800da06:	4b23      	ldr	r3, [pc, #140]	; (800da94 <udp_input_local_match+0xb4>)
 800da08:	2288      	movs	r2, #136	; 0x88
 800da0a:	4925      	ldr	r1, [pc, #148]	; (800daa0 <udp_input_local_match+0xc0>)
 800da0c:	4823      	ldr	r0, [pc, #140]	; (800da9c <udp_input_local_match+0xbc>)
 800da0e:	f002 fc97 	bl	8010340 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	7a1b      	ldrb	r3, [r3, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00b      	beq.n	800da32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	7a1a      	ldrb	r2, [r3, #8]
 800da1e:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <udp_input_local_match+0xc4>)
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da26:	3301      	adds	r3, #1
 800da28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d001      	beq.n	800da32 <udp_input_local_match+0x52>
    return 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	e02b      	b.n	800da8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d018      	beq.n	800da6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d013      	beq.n	800da66 <udp_input_local_match+0x86>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00f      	beq.n	800da66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da46:	4b17      	ldr	r3, [pc, #92]	; (800daa4 <udp_input_local_match+0xc4>)
 800da48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d00a      	beq.n	800da66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <udp_input_local_match+0xc4>)
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	405a      	eors	r2, r3
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	3308      	adds	r3, #8
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da62:	2b00      	cmp	r3, #0
 800da64:	d110      	bne.n	800da88 <udp_input_local_match+0xa8>
          return 1;
 800da66:	2301      	movs	r3, #1
 800da68:	e00f      	b.n	800da8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d009      	beq.n	800da84 <udp_input_local_match+0xa4>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <udp_input_local_match+0xa4>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	4b09      	ldr	r3, [pc, #36]	; (800daa4 <udp_input_local_match+0xc4>)
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	429a      	cmp	r2, r3
 800da82:	d101      	bne.n	800da88 <udp_input_local_match+0xa8>
        return 1;
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	08013344 	.word	0x08013344
 800da98:	08013374 	.word	0x08013374
 800da9c:	08013398 	.word	0x08013398
 800daa0:	080133c0 	.word	0x080133c0
 800daa4:	20000450 	.word	0x20000450

0800daa8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b08d      	sub	sp, #52	; 0x34
 800daac:	af02      	add	r7, sp, #8
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d105      	bne.n	800dac8 <udp_input+0x20>
 800dabc:	4b7c      	ldr	r3, [pc, #496]	; (800dcb0 <udp_input+0x208>)
 800dabe:	22cf      	movs	r2, #207	; 0xcf
 800dac0:	497c      	ldr	r1, [pc, #496]	; (800dcb4 <udp_input+0x20c>)
 800dac2:	487d      	ldr	r0, [pc, #500]	; (800dcb8 <udp_input+0x210>)
 800dac4:	f002 fc3c 	bl	8010340 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <udp_input+0x32>
 800dace:	4b78      	ldr	r3, [pc, #480]	; (800dcb0 <udp_input+0x208>)
 800dad0:	22d0      	movs	r2, #208	; 0xd0
 800dad2:	497a      	ldr	r1, [pc, #488]	; (800dcbc <udp_input+0x214>)
 800dad4:	4878      	ldr	r0, [pc, #480]	; (800dcb8 <udp_input+0x210>)
 800dad6:	f002 fc33 	bl	8010340 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	895b      	ldrh	r3, [r3, #10]
 800dade:	2b07      	cmp	r3, #7
 800dae0:	d803      	bhi.n	800daea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fa fa7c 	bl	8007fe0 <pbuf_free>
    goto end;
 800dae8:	e0de      	b.n	800dca8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daf0:	4b73      	ldr	r3, [pc, #460]	; (800dcc0 <udp_input+0x218>)
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	4a72      	ldr	r2, [pc, #456]	; (800dcc0 <udp_input+0x218>)
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 fc88 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800db00:	4603      	mov	r3, r0
 800db02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f8 ffd4 	bl	8006ab8 <lwip_htons>
 800db10:	4603      	mov	r3, r0
 800db12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	885b      	ldrh	r3, [r3, #2]
 800db18:	b29b      	uxth	r3, r3
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f8 ffcc 	bl	8006ab8 <lwip_htons>
 800db20:	4603      	mov	r3, r0
 800db22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db30:	4b64      	ldr	r3, [pc, #400]	; (800dcc4 <udp_input+0x21c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	627b      	str	r3, [r7, #36]	; 0x24
 800db36:	e054      	b.n	800dbe2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	8a5b      	ldrh	r3, [r3, #18]
 800db3c:	89fa      	ldrh	r2, [r7, #14]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d14a      	bne.n	800dbd8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800db42:	7cfb      	ldrb	r3, [r7, #19]
 800db44:	461a      	mov	r2, r3
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db4a:	f7ff ff49 	bl	800d9e0 <udp_input_local_match>
 800db4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800db50:	2b00      	cmp	r3, #0
 800db52:	d041      	beq.n	800dbd8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	7c1b      	ldrb	r3, [r3, #16]
 800db58:	f003 0304 	and.w	r3, r3, #4
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11d      	bne.n	800db9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	61fb      	str	r3, [r7, #28]
 800db6a:	e017      	b.n	800db9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db6c:	7cfb      	ldrb	r3, [r7, #19]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d014      	beq.n	800db9c <udp_input+0xf4>
 800db72:	4b53      	ldr	r3, [pc, #332]	; (800dcc0 <udp_input+0x218>)
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7a:	d10f      	bne.n	800db9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	3304      	adds	r3, #4
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d008      	beq.n	800db9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	3304      	adds	r3, #4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d101      	bne.n	800db9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	8a9b      	ldrh	r3, [r3, #20]
 800dba0:	8a3a      	ldrh	r2, [r7, #16]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d118      	bne.n	800dbd8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	4b43      	ldr	r3, [pc, #268]	; (800dcc0 <udp_input+0x218>)
 800dbb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d10e      	bne.n	800dbd8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d014      	beq.n	800dbea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	68da      	ldr	r2, [r3, #12]
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800dbc8:	4b3e      	ldr	r3, [pc, #248]	; (800dcc4 <udp_input+0x21c>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dbd0:	4a3c      	ldr	r2, [pc, #240]	; (800dcc4 <udp_input+0x21c>)
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dbd6:	e008      	b.n	800dbea <udp_input+0x142>
      }
    }

    prev = pcb;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1a7      	bne.n	800db38 <udp_input+0x90>
 800dbe8:	e000      	b.n	800dbec <udp_input+0x144>
        break;
 800dbea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <udp_input+0x15a>
    for_us = 1;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	76fb      	strb	r3, [r7, #27]
 800dc00:	e00a      	b.n	800dc18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	3304      	adds	r3, #4
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b2d      	ldr	r3, [pc, #180]	; (800dcc0 <udp_input+0x218>)
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	bf0c      	ite	eq
 800dc10:	2301      	moveq	r3, #1
 800dc12:	2300      	movne	r3, #0
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dc18:	7efb      	ldrb	r3, [r7, #27]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d041      	beq.n	800dca2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dc1e:	2108      	movs	r1, #8
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7fa f957 	bl	8007ed4 <pbuf_remove_header>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dc2c:	4b20      	ldr	r3, [pc, #128]	; (800dcb0 <udp_input+0x208>)
 800dc2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dc32:	4925      	ldr	r1, [pc, #148]	; (800dcc8 <udp_input+0x220>)
 800dc34:	4820      	ldr	r0, [pc, #128]	; (800dcb8 <udp_input+0x210>)
 800dc36:	f002 fb83 	bl	8010340 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7fa f9d0 	bl	8007fe0 <pbuf_free>
      goto end;
 800dc40:	e032      	b.n	800dca8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d012      	beq.n	800dc6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00a      	beq.n	800dc66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	699c      	ldr	r4, [r3, #24]
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	69d8      	ldr	r0, [r3, #28]
 800dc58:	8a3b      	ldrh	r3, [r7, #16]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4b1b      	ldr	r3, [pc, #108]	; (800dccc <udp_input+0x224>)
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dc64:	e021      	b.n	800dcaa <udp_input+0x202>
        pbuf_free(p);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7fa f9ba 	bl	8007fe0 <pbuf_free>
        goto end;
 800dc6c:	e01c      	b.n	800dca8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc6e:	7cfb      	ldrb	r3, [r7, #19]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d112      	bne.n	800dc9a <udp_input+0x1f2>
 800dc74:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <udp_input+0x218>)
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc7c:	2be0      	cmp	r3, #224	; 0xe0
 800dc7e:	d00c      	beq.n	800dc9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc80:	4b0f      	ldr	r3, [pc, #60]	; (800dcc0 <udp_input+0x218>)
 800dc82:	899b      	ldrh	r3, [r3, #12]
 800dc84:	3308      	adds	r3, #8
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	b21b      	sxth	r3, r3
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7fa f994 	bl	8007fba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc92:	2103      	movs	r1, #3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 f89b 	bl	800edd0 <icmp_dest_unreach>
      pbuf_free(p);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7fa f9a0 	bl	8007fe0 <pbuf_free>
  return;
 800dca0:	e003      	b.n	800dcaa <udp_input+0x202>
    pbuf_free(p);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7fa f99c 	bl	8007fe0 <pbuf_free>
  return;
 800dca8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dcaa:	372c      	adds	r7, #44	; 0x2c
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd90      	pop	{r4, r7, pc}
 800dcb0:	08013344 	.word	0x08013344
 800dcb4:	080133e8 	.word	0x080133e8
 800dcb8:	08013398 	.word	0x08013398
 800dcbc:	08013400 	.word	0x08013400
 800dcc0:	20000450 	.word	0x20000450
 800dcc4:	20005b6c 	.word	0x20005b6c
 800dcc8:	0801341c 	.word	0x0801341c
 800dccc:	20000460 	.word	0x20000460

0800dcd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01e      	beq.n	800dd1e <udp_netif_ip_addr_changed+0x4e>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d01a      	beq.n	800dd1e <udp_netif_ip_addr_changed+0x4e>
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d017      	beq.n	800dd1e <udp_netif_ip_addr_changed+0x4e>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d013      	beq.n	800dd1e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dcf6:	4b0d      	ldr	r3, [pc, #52]	; (800dd2c <udp_netif_ip_addr_changed+0x5c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e00c      	b.n	800dd18 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d103      	bne.n	800dd12 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1ef      	bne.n	800dcfe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20005b6c 	.word	0x20005b6c

0800dd30 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dd38:	4915      	ldr	r1, [pc, #84]	; (800dd90 <etharp_free_entry+0x60>)
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	4413      	add	r3, r2
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	440b      	add	r3, r1
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d013      	beq.n	800dd74 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dd4c:	4910      	ldr	r1, [pc, #64]	; (800dd90 <etharp_free_entry+0x60>)
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	4613      	mov	r3, r2
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	4413      	add	r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	440b      	add	r3, r1
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fa f93f 	bl	8007fe0 <pbuf_free>
    arp_table[i].q = NULL;
 800dd62:	490b      	ldr	r1, [pc, #44]	; (800dd90 <etharp_free_entry+0x60>)
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	4613      	mov	r3, r2
 800dd68:	005b      	lsls	r3, r3, #1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	440b      	add	r3, r1
 800dd70:	2200      	movs	r2, #0
 800dd72:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dd74:	4906      	ldr	r1, [pc, #24]	; (800dd90 <etharp_free_entry+0x60>)
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	4413      	add	r3, r2
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	440b      	add	r3, r1
 800dd82:	3314      	adds	r3, #20
 800dd84:	2200      	movs	r2, #0
 800dd86:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	2000010c 	.word	0x2000010c

0800dd94 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	607b      	str	r3, [r7, #4]
 800dd9e:	e096      	b.n	800dece <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dda0:	494f      	ldr	r1, [pc, #316]	; (800dee0 <etharp_tmr+0x14c>)
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	4613      	mov	r3, r2
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	4413      	add	r3, r2
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	440b      	add	r3, r1
 800ddae:	3314      	adds	r3, #20
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 8086 	beq.w	800dec8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ddbc:	4948      	ldr	r1, [pc, #288]	; (800dee0 <etharp_tmr+0x14c>)
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	4413      	add	r3, r2
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	440b      	add	r3, r1
 800ddca:	3312      	adds	r3, #18
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	b298      	uxth	r0, r3
 800ddd2:	4943      	ldr	r1, [pc, #268]	; (800dee0 <etharp_tmr+0x14c>)
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	4413      	add	r3, r2
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	440b      	add	r3, r1
 800dde0:	3312      	adds	r3, #18
 800dde2:	4602      	mov	r2, r0
 800dde4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dde6:	493e      	ldr	r1, [pc, #248]	; (800dee0 <etharp_tmr+0x14c>)
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	4613      	mov	r3, r2
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	4413      	add	r3, r2
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	440b      	add	r3, r1
 800ddf4:	3312      	adds	r3, #18
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ddfc:	d215      	bcs.n	800de2a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ddfe:	4938      	ldr	r1, [pc, #224]	; (800dee0 <etharp_tmr+0x14c>)
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	00db      	lsls	r3, r3, #3
 800de0a:	440b      	add	r3, r1
 800de0c:	3314      	adds	r3, #20
 800de0e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800de10:	2b01      	cmp	r3, #1
 800de12:	d10e      	bne.n	800de32 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800de14:	4932      	ldr	r1, [pc, #200]	; (800dee0 <etharp_tmr+0x14c>)
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	4613      	mov	r3, r2
 800de1a:	005b      	lsls	r3, r3, #1
 800de1c:	4413      	add	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	440b      	add	r3, r1
 800de22:	3312      	adds	r3, #18
 800de24:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800de26:	2b04      	cmp	r3, #4
 800de28:	d903      	bls.n	800de32 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7ff ff80 	bl	800dd30 <etharp_free_entry>
 800de30:	e04a      	b.n	800dec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800de32:	492b      	ldr	r1, [pc, #172]	; (800dee0 <etharp_tmr+0x14c>)
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	4613      	mov	r3, r2
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	4413      	add	r3, r2
 800de3c:	00db      	lsls	r3, r3, #3
 800de3e:	440b      	add	r3, r1
 800de40:	3314      	adds	r3, #20
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b03      	cmp	r3, #3
 800de46:	d10a      	bne.n	800de5e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800de48:	4925      	ldr	r1, [pc, #148]	; (800dee0 <etharp_tmr+0x14c>)
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	4613      	mov	r3, r2
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	4413      	add	r3, r2
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	440b      	add	r3, r1
 800de56:	3314      	adds	r3, #20
 800de58:	2204      	movs	r2, #4
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	e034      	b.n	800dec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800de5e:	4920      	ldr	r1, [pc, #128]	; (800dee0 <etharp_tmr+0x14c>)
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	4613      	mov	r3, r2
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	4413      	add	r3, r2
 800de68:	00db      	lsls	r3, r3, #3
 800de6a:	440b      	add	r3, r1
 800de6c:	3314      	adds	r3, #20
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b04      	cmp	r3, #4
 800de72:	d10a      	bne.n	800de8a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de74:	491a      	ldr	r1, [pc, #104]	; (800dee0 <etharp_tmr+0x14c>)
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	4613      	mov	r3, r2
 800de7a:	005b      	lsls	r3, r3, #1
 800de7c:	4413      	add	r3, r2
 800de7e:	00db      	lsls	r3, r3, #3
 800de80:	440b      	add	r3, r1
 800de82:	3314      	adds	r3, #20
 800de84:	2202      	movs	r2, #2
 800de86:	701a      	strb	r2, [r3, #0]
 800de88:	e01e      	b.n	800dec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de8a:	4915      	ldr	r1, [pc, #84]	; (800dee0 <etharp_tmr+0x14c>)
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	4613      	mov	r3, r2
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	4413      	add	r3, r2
 800de94:	00db      	lsls	r3, r3, #3
 800de96:	440b      	add	r3, r1
 800de98:	3314      	adds	r3, #20
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d113      	bne.n	800dec8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dea0:	490f      	ldr	r1, [pc, #60]	; (800dee0 <etharp_tmr+0x14c>)
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	440b      	add	r3, r1
 800deae:	3308      	adds	r3, #8
 800deb0:	6818      	ldr	r0, [r3, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	4613      	mov	r3, r2
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	4413      	add	r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	4a08      	ldr	r2, [pc, #32]	; (800dee0 <etharp_tmr+0x14c>)
 800debe:	4413      	add	r3, r2
 800dec0:	3304      	adds	r3, #4
 800dec2:	4619      	mov	r1, r3
 800dec4:	f000 fe6e 	bl	800eba4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3301      	adds	r3, #1
 800decc:	607b      	str	r3, [r7, #4]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b09      	cmp	r3, #9
 800ded2:	f77f af65 	ble.w	800dda0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ded6:	bf00      	nop
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	2000010c 	.word	0x2000010c

0800dee4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08a      	sub	sp, #40	; 0x28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	460b      	mov	r3, r1
 800deee:	607a      	str	r2, [r7, #4]
 800def0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800def2:	230a      	movs	r3, #10
 800def4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800def6:	230a      	movs	r3, #10
 800def8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800defa:	230a      	movs	r3, #10
 800defc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800df02:	230a      	movs	r3, #10
 800df04:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	83bb      	strh	r3, [r7, #28]
 800df0a:	2300      	movs	r3, #0
 800df0c:	837b      	strh	r3, [r7, #26]
 800df0e:	2300      	movs	r3, #0
 800df10:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df12:	2300      	movs	r3, #0
 800df14:	843b      	strh	r3, [r7, #32]
 800df16:	e0ae      	b.n	800e076 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800df18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df1c:	49a6      	ldr	r1, [pc, #664]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800df1e:	4613      	mov	r3, r2
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	4413      	add	r3, r2
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	440b      	add	r3, r1
 800df28:	3314      	adds	r3, #20
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800df2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800df32:	2b0a      	cmp	r3, #10
 800df34:	d105      	bne.n	800df42 <etharp_find_entry+0x5e>
 800df36:	7dfb      	ldrb	r3, [r7, #23]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d102      	bne.n	800df42 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800df3c:	8c3b      	ldrh	r3, [r7, #32]
 800df3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800df40:	e095      	b.n	800e06e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8092 	beq.w	800e06e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800df4a:	7dfb      	ldrb	r3, [r7, #23]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d009      	beq.n	800df64 <etharp_find_entry+0x80>
 800df50:	7dfb      	ldrb	r3, [r7, #23]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d806      	bhi.n	800df64 <etharp_find_entry+0x80>
 800df56:	4b99      	ldr	r3, [pc, #612]	; (800e1bc <etharp_find_entry+0x2d8>)
 800df58:	f240 1223 	movw	r2, #291	; 0x123
 800df5c:	4998      	ldr	r1, [pc, #608]	; (800e1c0 <etharp_find_entry+0x2dc>)
 800df5e:	4899      	ldr	r0, [pc, #612]	; (800e1c4 <etharp_find_entry+0x2e0>)
 800df60:	f002 f9ee 	bl	8010340 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d020      	beq.n	800dfac <etharp_find_entry+0xc8>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df72:	4891      	ldr	r0, [pc, #580]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800df74:	4613      	mov	r3, r2
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	4413      	add	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	4403      	add	r3, r0
 800df7e:	3304      	adds	r3, #4
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4299      	cmp	r1, r3
 800df84:	d112      	bne.n	800dfac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00c      	beq.n	800dfa6 <etharp_find_entry+0xc2>
 800df8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df90:	4989      	ldr	r1, [pc, #548]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800df92:	4613      	mov	r3, r2
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	4413      	add	r3, r2
 800df98:	00db      	lsls	r3, r3, #3
 800df9a:	440b      	add	r3, r1
 800df9c:	3308      	adds	r3, #8
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d102      	bne.n	800dfac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dfa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dfaa:	e100      	b.n	800e1ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d140      	bne.n	800e034 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dfb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfb6:	4980      	ldr	r1, [pc, #512]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800dfb8:	4613      	mov	r3, r2
 800dfba:	005b      	lsls	r3, r3, #1
 800dfbc:	4413      	add	r3, r2
 800dfbe:	00db      	lsls	r3, r3, #3
 800dfc0:	440b      	add	r3, r1
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01a      	beq.n	800dffe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dfc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfcc:	497a      	ldr	r1, [pc, #488]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4413      	add	r3, r2
 800dfd4:	00db      	lsls	r3, r3, #3
 800dfd6:	440b      	add	r3, r1
 800dfd8:	3312      	adds	r3, #18
 800dfda:	881b      	ldrh	r3, [r3, #0]
 800dfdc:	8bba      	ldrh	r2, [r7, #28]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d845      	bhi.n	800e06e <etharp_find_entry+0x18a>
            old_queue = i;
 800dfe2:	8c3b      	ldrh	r3, [r7, #32]
 800dfe4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800dfe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfea:	4973      	ldr	r1, [pc, #460]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800dfec:	4613      	mov	r3, r2
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	4413      	add	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	440b      	add	r3, r1
 800dff6:	3312      	adds	r3, #18
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	83bb      	strh	r3, [r7, #28]
 800dffc:	e037      	b.n	800e06e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e002:	496d      	ldr	r1, [pc, #436]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e004:	4613      	mov	r3, r2
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	4413      	add	r3, r2
 800e00a:	00db      	lsls	r3, r3, #3
 800e00c:	440b      	add	r3, r1
 800e00e:	3312      	adds	r3, #18
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	8b7a      	ldrh	r2, [r7, #26]
 800e014:	429a      	cmp	r2, r3
 800e016:	d82a      	bhi.n	800e06e <etharp_find_entry+0x18a>
            old_pending = i;
 800e018:	8c3b      	ldrh	r3, [r7, #32]
 800e01a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e01c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e020:	4965      	ldr	r1, [pc, #404]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e022:	4613      	mov	r3, r2
 800e024:	005b      	lsls	r3, r3, #1
 800e026:	4413      	add	r3, r2
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	440b      	add	r3, r1
 800e02c:	3312      	adds	r3, #18
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	837b      	strh	r3, [r7, #26]
 800e032:	e01c      	b.n	800e06e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d919      	bls.n	800e06e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e03a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e03e:	495e      	ldr	r1, [pc, #376]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e040:	4613      	mov	r3, r2
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	4413      	add	r3, r2
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	440b      	add	r3, r1
 800e04a:	3312      	adds	r3, #18
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	8b3a      	ldrh	r2, [r7, #24]
 800e050:	429a      	cmp	r2, r3
 800e052:	d80c      	bhi.n	800e06e <etharp_find_entry+0x18a>
            old_stable = i;
 800e054:	8c3b      	ldrh	r3, [r7, #32]
 800e056:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e05c:	4956      	ldr	r1, [pc, #344]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e05e:	4613      	mov	r3, r2
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	4413      	add	r3, r2
 800e064:	00db      	lsls	r3, r3, #3
 800e066:	440b      	add	r3, r1
 800e068:	3312      	adds	r3, #18
 800e06a:	881b      	ldrh	r3, [r3, #0]
 800e06c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e06e:	8c3b      	ldrh	r3, [r7, #32]
 800e070:	3301      	adds	r3, #1
 800e072:	b29b      	uxth	r3, r3
 800e074:	843b      	strh	r3, [r7, #32]
 800e076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	f77f af4c 	ble.w	800df18 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e080:	7afb      	ldrb	r3, [r7, #11]
 800e082:	f003 0302 	and.w	r3, r3, #2
 800e086:	2b00      	cmp	r3, #0
 800e088:	d108      	bne.n	800e09c <etharp_find_entry+0x1b8>
 800e08a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e08e:	2b0a      	cmp	r3, #10
 800e090:	d107      	bne.n	800e0a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e09c:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a0:	e085      	b.n	800e1ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e0a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e0a6:	2b09      	cmp	r3, #9
 800e0a8:	dc02      	bgt.n	800e0b0 <etharp_find_entry+0x1cc>
    i = empty;
 800e0aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ac:	843b      	strh	r3, [r7, #32]
 800e0ae:	e039      	b.n	800e124 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e0b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	dc14      	bgt.n	800e0e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e0bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0c0:	493d      	ldr	r1, [pc, #244]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	4413      	add	r3, r2
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	440b      	add	r3, r1
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d018      	beq.n	800e104 <etharp_find_entry+0x220>
 800e0d2:	4b3a      	ldr	r3, [pc, #232]	; (800e1bc <etharp_find_entry+0x2d8>)
 800e0d4:	f240 126d 	movw	r2, #365	; 0x16d
 800e0d8:	493b      	ldr	r1, [pc, #236]	; (800e1c8 <etharp_find_entry+0x2e4>)
 800e0da:	483a      	ldr	r0, [pc, #232]	; (800e1c4 <etharp_find_entry+0x2e0>)
 800e0dc:	f002 f930 	bl	8010340 <iprintf>
 800e0e0:	e010      	b.n	800e104 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e0e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e0e6:	2b09      	cmp	r3, #9
 800e0e8:	dc02      	bgt.n	800e0f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e0ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0ec:	843b      	strh	r3, [r7, #32]
 800e0ee:	e009      	b.n	800e104 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e0f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e0f4:	2b09      	cmp	r3, #9
 800e0f6:	dc02      	bgt.n	800e0fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e0f8:	8bfb      	ldrh	r3, [r7, #30]
 800e0fa:	843b      	strh	r3, [r7, #32]
 800e0fc:	e002      	b.n	800e104 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e102:	e054      	b.n	800e1ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e104:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e108:	2b09      	cmp	r3, #9
 800e10a:	dd06      	ble.n	800e11a <etharp_find_entry+0x236>
 800e10c:	4b2b      	ldr	r3, [pc, #172]	; (800e1bc <etharp_find_entry+0x2d8>)
 800e10e:	f240 127f 	movw	r2, #383	; 0x17f
 800e112:	492e      	ldr	r1, [pc, #184]	; (800e1cc <etharp_find_entry+0x2e8>)
 800e114:	482b      	ldr	r0, [pc, #172]	; (800e1c4 <etharp_find_entry+0x2e0>)
 800e116:	f002 f913 	bl	8010340 <iprintf>
    etharp_free_entry(i);
 800e11a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff fe06 	bl	800dd30 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e128:	2b09      	cmp	r3, #9
 800e12a:	dd06      	ble.n	800e13a <etharp_find_entry+0x256>
 800e12c:	4b23      	ldr	r3, [pc, #140]	; (800e1bc <etharp_find_entry+0x2d8>)
 800e12e:	f240 1283 	movw	r2, #387	; 0x183
 800e132:	4926      	ldr	r1, [pc, #152]	; (800e1cc <etharp_find_entry+0x2e8>)
 800e134:	4823      	ldr	r0, [pc, #140]	; (800e1c4 <etharp_find_entry+0x2e0>)
 800e136:	f002 f903 	bl	8010340 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e13a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e13e:	491e      	ldr	r1, [pc, #120]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e140:	4613      	mov	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	4413      	add	r3, r2
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	440b      	add	r3, r1
 800e14a:	3314      	adds	r3, #20
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d006      	beq.n	800e160 <etharp_find_entry+0x27c>
 800e152:	4b1a      	ldr	r3, [pc, #104]	; (800e1bc <etharp_find_entry+0x2d8>)
 800e154:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e158:	491d      	ldr	r1, [pc, #116]	; (800e1d0 <etharp_find_entry+0x2ec>)
 800e15a:	481a      	ldr	r0, [pc, #104]	; (800e1c4 <etharp_find_entry+0x2e0>)
 800e15c:	f002 f8f0 	bl	8010340 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00b      	beq.n	800e17e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6819      	ldr	r1, [r3, #0]
 800e16e:	4812      	ldr	r0, [pc, #72]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e170:	4613      	mov	r3, r2
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	4413      	add	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	4403      	add	r3, r0
 800e17a:	3304      	adds	r3, #4
 800e17c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e17e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e182:	490d      	ldr	r1, [pc, #52]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	440b      	add	r3, r1
 800e18e:	3312      	adds	r3, #18
 800e190:	2200      	movs	r2, #0
 800e192:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e194:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e198:	4907      	ldr	r1, [pc, #28]	; (800e1b8 <etharp_find_entry+0x2d4>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	440b      	add	r3, r1
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e1aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3728      	adds	r7, #40	; 0x28
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	2000010c 	.word	0x2000010c
 800e1bc:	080136a8 	.word	0x080136a8
 800e1c0:	080136e0 	.word	0x080136e0
 800e1c4:	08013720 	.word	0x08013720
 800e1c8:	08013748 	.word	0x08013748
 800e1cc:	08013760 	.word	0x08013760
 800e1d0:	08013774 	.word	0x08013774

0800e1d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e1e8:	2b06      	cmp	r3, #6
 800e1ea:	d006      	beq.n	800e1fa <etharp_update_arp_entry+0x26>
 800e1ec:	4b48      	ldr	r3, [pc, #288]	; (800e310 <etharp_update_arp_entry+0x13c>)
 800e1ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e1f2:	4948      	ldr	r1, [pc, #288]	; (800e314 <etharp_update_arp_entry+0x140>)
 800e1f4:	4848      	ldr	r0, [pc, #288]	; (800e318 <etharp_update_arp_entry+0x144>)
 800e1f6:	f002 f8a3 	bl	8010340 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d012      	beq.n	800e226 <etharp_update_arp_entry+0x52>
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00e      	beq.n	800e226 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68f9      	ldr	r1, [r7, #12]
 800e20e:	4618      	mov	r0, r3
 800e210:	f001 f8fe 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800e214:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e216:	2b00      	cmp	r3, #0
 800e218:	d105      	bne.n	800e226 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e222:	2be0      	cmp	r3, #224	; 0xe0
 800e224:	d102      	bne.n	800e22c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e226:	f06f 030f 	mvn.w	r3, #15
 800e22a:	e06c      	b.n	800e306 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e22c:	78fb      	ldrb	r3, [r7, #3]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4619      	mov	r1, r3
 800e232:	68b8      	ldr	r0, [r7, #8]
 800e234:	f7ff fe56 	bl	800dee4 <etharp_find_entry>
 800e238:	4603      	mov	r3, r0
 800e23a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e23c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da02      	bge.n	800e24a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e244:	8afb      	ldrh	r3, [r7, #22]
 800e246:	b25b      	sxtb	r3, r3
 800e248:	e05d      	b.n	800e306 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e24a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e24e:	4933      	ldr	r1, [pc, #204]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e250:	4613      	mov	r3, r2
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	440b      	add	r3, r1
 800e25a:	3314      	adds	r3, #20
 800e25c:	2202      	movs	r2, #2
 800e25e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e260:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e264:	492d      	ldr	r1, [pc, #180]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	3308      	adds	r3, #8
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e276:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e27a:	4613      	mov	r3, r2
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	4413      	add	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	3308      	adds	r3, #8
 800e284:	4a25      	ldr	r2, [pc, #148]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e286:	4413      	add	r3, r2
 800e288:	3304      	adds	r3, #4
 800e28a:	2206      	movs	r2, #6
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	4618      	mov	r0, r3
 800e290:	f002 f840 	bl	8010314 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e298:	4920      	ldr	r1, [pc, #128]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e29a:	4613      	mov	r3, r2
 800e29c:	005b      	lsls	r3, r3, #1
 800e29e:	4413      	add	r3, r2
 800e2a0:	00db      	lsls	r3, r3, #3
 800e2a2:	440b      	add	r3, r1
 800e2a4:	3312      	adds	r3, #18
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e2aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e2ae:	491b      	ldr	r1, [pc, #108]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	4413      	add	r3, r2
 800e2b6:	00db      	lsls	r3, r3, #3
 800e2b8:	440b      	add	r3, r1
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d021      	beq.n	800e304 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e2c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e2c4:	4915      	ldr	r1, [pc, #84]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	4413      	add	r3, r2
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	440b      	add	r3, r1
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e2d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e2d8:	4910      	ldr	r1, [pc, #64]	; (800e31c <etharp_update_arp_entry+0x148>)
 800e2da:	4613      	mov	r3, r2
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	440b      	add	r3, r1
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e2ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6939      	ldr	r1, [r7, #16]
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f001 ff91 	bl	8010220 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e2fe:	6938      	ldr	r0, [r7, #16]
 800e300:	f7f9 fe6e 	bl	8007fe0 <pbuf_free>
  }
  return ERR_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	080136a8 	.word	0x080136a8
 800e314:	080137a0 	.word	0x080137a0
 800e318:	08013720 	.word	0x08013720
 800e31c:	2000010c 	.word	0x2000010c

0800e320 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e328:	2300      	movs	r3, #0
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	e01e      	b.n	800e36c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e32e:	4913      	ldr	r1, [pc, #76]	; (800e37c <etharp_cleanup_netif+0x5c>)
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	4613      	mov	r3, r2
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4413      	add	r3, r2
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	440b      	add	r3, r1
 800e33c:	3314      	adds	r3, #20
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e342:	7afb      	ldrb	r3, [r7, #11]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00e      	beq.n	800e366 <etharp_cleanup_netif+0x46>
 800e348:	490c      	ldr	r1, [pc, #48]	; (800e37c <etharp_cleanup_netif+0x5c>)
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3308      	adds	r3, #8
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d102      	bne.n	800e366 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f7ff fce5 	bl	800dd30 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	3301      	adds	r3, #1
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b09      	cmp	r3, #9
 800e370:	dddd      	ble.n	800e32e <etharp_cleanup_netif+0xe>
    }
  }
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	2000010c 	.word	0x2000010c

0800e380 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e380:	b5b0      	push	{r4, r5, r7, lr}
 800e382:	b08a      	sub	sp, #40	; 0x28
 800e384:	af04      	add	r7, sp, #16
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d107      	bne.n	800e3a0 <etharp_input+0x20>
 800e390:	4b3d      	ldr	r3, [pc, #244]	; (800e488 <etharp_input+0x108>)
 800e392:	f240 228a 	movw	r2, #650	; 0x28a
 800e396:	493d      	ldr	r1, [pc, #244]	; (800e48c <etharp_input+0x10c>)
 800e398:	483d      	ldr	r0, [pc, #244]	; (800e490 <etharp_input+0x110>)
 800e39a:	f001 ffd1 	bl	8010340 <iprintf>
 800e39e:	e06f      	b.n	800e480 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3b0:	d10c      	bne.n	800e3cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e3b6:	2b06      	cmp	r3, #6
 800e3b8:	d108      	bne.n	800e3cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d104      	bne.n	800e3cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	885b      	ldrh	r3, [r3, #2]
 800e3c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	d003      	beq.n	800e3d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7f9 fe07 	bl	8007fe0 <pbuf_free>
    return;
 800e3d2:	e055      	b.n	800e480 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	330e      	adds	r3, #14
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	3318      	adds	r3, #24
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3304      	adds	r3, #4
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <etharp_input+0x74>
    for_us = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	75fb      	strb	r3, [r7, #23]
 800e3f2:	e009      	b.n	800e408 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	bf0c      	ite	eq
 800e400:	2301      	moveq	r3, #1
 800e402:	2300      	movne	r3, #0
 800e404:	b2db      	uxtb	r3, r3
 800e406:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	f103 0208 	add.w	r2, r3, #8
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <etharp_input+0x98>
 800e414:	2301      	movs	r3, #1
 800e416:	e000      	b.n	800e41a <etharp_input+0x9a>
 800e418:	2302      	movs	r3, #2
 800e41a:	f107 010c 	add.w	r1, r7, #12
 800e41e:	6838      	ldr	r0, [r7, #0]
 800e420:	f7ff fed8 	bl	800e1d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	88db      	ldrh	r3, [r3, #6]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e42e:	d003      	beq.n	800e438 <etharp_input+0xb8>
 800e430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e434:	d01e      	beq.n	800e474 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e436:	e020      	b.n	800e47a <etharp_input+0xfa>
      if (for_us) {
 800e438:	7dfb      	ldrb	r3, [r7, #23]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d01c      	beq.n	800e478 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e458:	2102      	movs	r1, #2
 800e45a:	9103      	str	r1, [sp, #12]
 800e45c:	f107 010c 	add.w	r1, r7, #12
 800e460:	9102      	str	r1, [sp, #8]
 800e462:	9201      	str	r2, [sp, #4]
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	462b      	mov	r3, r5
 800e468:	4622      	mov	r2, r4
 800e46a:	4601      	mov	r1, r0
 800e46c:	6838      	ldr	r0, [r7, #0]
 800e46e:	f000 faeb 	bl	800ea48 <etharp_raw>
      break;
 800e472:	e001      	b.n	800e478 <etharp_input+0xf8>
      break;
 800e474:	bf00      	nop
 800e476:	e000      	b.n	800e47a <etharp_input+0xfa>
      break;
 800e478:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7f9 fdb0 	bl	8007fe0 <pbuf_free>
}
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bdb0      	pop	{r4, r5, r7, pc}
 800e486:	bf00      	nop
 800e488:	080136a8 	.word	0x080136a8
 800e48c:	080137f8 	.word	0x080137f8
 800e490:	08013720 	.word	0x08013720

0800e494 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af02      	add	r7, sp, #8
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e4a2:	79fa      	ldrb	r2, [r7, #7]
 800e4a4:	4944      	ldr	r1, [pc, #272]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	440b      	add	r3, r1
 800e4b0:	3314      	adds	r3, #20
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d806      	bhi.n	800e4c6 <etharp_output_to_arp_index+0x32>
 800e4b8:	4b40      	ldr	r3, [pc, #256]	; (800e5bc <etharp_output_to_arp_index+0x128>)
 800e4ba:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e4be:	4940      	ldr	r1, [pc, #256]	; (800e5c0 <etharp_output_to_arp_index+0x12c>)
 800e4c0:	4840      	ldr	r0, [pc, #256]	; (800e5c4 <etharp_output_to_arp_index+0x130>)
 800e4c2:	f001 ff3d 	bl	8010340 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e4c6:	79fa      	ldrb	r2, [r7, #7]
 800e4c8:	493b      	ldr	r1, [pc, #236]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	4413      	add	r3, r2
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	440b      	add	r3, r1
 800e4d4:	3314      	adds	r3, #20
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d153      	bne.n	800e584 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e4dc:	79fa      	ldrb	r2, [r7, #7]
 800e4de:	4936      	ldr	r1, [pc, #216]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	005b      	lsls	r3, r3, #1
 800e4e4:	4413      	add	r3, r2
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	440b      	add	r3, r1
 800e4ea:	3312      	adds	r3, #18
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e4f2:	d919      	bls.n	800e528 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e4f4:	79fa      	ldrb	r2, [r7, #7]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4413      	add	r3, r2
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	4a2e      	ldr	r2, [pc, #184]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e500:	4413      	add	r3, r2
 800e502:	3304      	adds	r3, #4
 800e504:	4619      	mov	r1, r3
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 fb4c 	bl	800eba4 <etharp_request>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d138      	bne.n	800e584 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e512:	79fa      	ldrb	r2, [r7, #7]
 800e514:	4928      	ldr	r1, [pc, #160]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e516:	4613      	mov	r3, r2
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	00db      	lsls	r3, r3, #3
 800e51e:	440b      	add	r3, r1
 800e520:	3314      	adds	r3, #20
 800e522:	2203      	movs	r2, #3
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	e02d      	b.n	800e584 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e528:	79fa      	ldrb	r2, [r7, #7]
 800e52a:	4923      	ldr	r1, [pc, #140]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e52c:	4613      	mov	r3, r2
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	4413      	add	r3, r2
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	440b      	add	r3, r1
 800e536:	3312      	adds	r3, #18
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e53e:	d321      	bcc.n	800e584 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e540:	79fa      	ldrb	r2, [r7, #7]
 800e542:	4613      	mov	r3, r2
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	4413      	add	r3, r2
 800e548:	00db      	lsls	r3, r3, #3
 800e54a:	4a1b      	ldr	r2, [pc, #108]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e54c:	4413      	add	r3, r2
 800e54e:	1d19      	adds	r1, r3, #4
 800e550:	79fa      	ldrb	r2, [r7, #7]
 800e552:	4613      	mov	r3, r2
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	4413      	add	r3, r2
 800e558:	00db      	lsls	r3, r3, #3
 800e55a:	3308      	adds	r3, #8
 800e55c:	4a16      	ldr	r2, [pc, #88]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e55e:	4413      	add	r3, r2
 800e560:	3304      	adds	r3, #4
 800e562:	461a      	mov	r2, r3
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 fafb 	bl	800eb60 <etharp_request_dst>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d109      	bne.n	800e584 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e570:	79fa      	ldrb	r2, [r7, #7]
 800e572:	4911      	ldr	r1, [pc, #68]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e574:	4613      	mov	r3, r2
 800e576:	005b      	lsls	r3, r3, #1
 800e578:	4413      	add	r3, r2
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	440b      	add	r3, r1
 800e57e:	3314      	adds	r3, #20
 800e580:	2203      	movs	r2, #3
 800e582:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e58a:	79fa      	ldrb	r2, [r7, #7]
 800e58c:	4613      	mov	r3, r2
 800e58e:	005b      	lsls	r3, r3, #1
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	3308      	adds	r3, #8
 800e596:	4a08      	ldr	r2, [pc, #32]	; (800e5b8 <etharp_output_to_arp_index+0x124>)
 800e598:	4413      	add	r3, r2
 800e59a:	3304      	adds	r3, #4
 800e59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5a0:	9200      	str	r2, [sp, #0]
 800e5a2:	460a      	mov	r2, r1
 800e5a4:	68b9      	ldr	r1, [r7, #8]
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f001 fe3a 	bl	8010220 <ethernet_output>
 800e5ac:	4603      	mov	r3, r0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	2000010c 	.word	0x2000010c
 800e5bc:	080136a8 	.word	0x080136a8
 800e5c0:	08013818 	.word	0x08013818
 800e5c4:	08013720 	.word	0x08013720

0800e5c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08a      	sub	sp, #40	; 0x28
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d106      	bne.n	800e5ec <etharp_output+0x24>
 800e5de:	4b73      	ldr	r3, [pc, #460]	; (800e7ac <etharp_output+0x1e4>)
 800e5e0:	f240 321e 	movw	r2, #798	; 0x31e
 800e5e4:	4972      	ldr	r1, [pc, #456]	; (800e7b0 <etharp_output+0x1e8>)
 800e5e6:	4873      	ldr	r0, [pc, #460]	; (800e7b4 <etharp_output+0x1ec>)
 800e5e8:	f001 feaa 	bl	8010340 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <etharp_output+0x38>
 800e5f2:	4b6e      	ldr	r3, [pc, #440]	; (800e7ac <etharp_output+0x1e4>)
 800e5f4:	f240 321f 	movw	r2, #799	; 0x31f
 800e5f8:	496f      	ldr	r1, [pc, #444]	; (800e7b8 <etharp_output+0x1f0>)
 800e5fa:	486e      	ldr	r0, [pc, #440]	; (800e7b4 <etharp_output+0x1ec>)
 800e5fc:	f001 fea0 	bl	8010340 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <etharp_output+0x4c>
 800e606:	4b69      	ldr	r3, [pc, #420]	; (800e7ac <etharp_output+0x1e4>)
 800e608:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e60c:	496b      	ldr	r1, [pc, #428]	; (800e7bc <etharp_output+0x1f4>)
 800e60e:	4869      	ldr	r0, [pc, #420]	; (800e7b4 <etharp_output+0x1ec>)
 800e610:	f001 fe96 	bl	8010340 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68f9      	ldr	r1, [r7, #12]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 fef8 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e626:	4b66      	ldr	r3, [pc, #408]	; (800e7c0 <etharp_output+0x1f8>)
 800e628:	61fb      	str	r3, [r7, #28]
 800e62a:	e0af      	b.n	800e78c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e634:	2be0      	cmp	r3, #224	; 0xe0
 800e636:	d118      	bne.n	800e66a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e638:	2301      	movs	r3, #1
 800e63a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e63c:	2300      	movs	r3, #0
 800e63e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e640:	235e      	movs	r3, #94	; 0x5e
 800e642:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3301      	adds	r3, #1
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3302      	adds	r3, #2
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3303      	adds	r3, #3
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e662:	f107 0310 	add.w	r3, r7, #16
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	e090      	b.n	800e78c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3304      	adds	r3, #4
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	405a      	eors	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3308      	adds	r3, #8
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4013      	ands	r3, r2
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d012      	beq.n	800e6a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e688:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d00b      	beq.n	800e6a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	330c      	adds	r3, #12
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	330c      	adds	r3, #12
 800e69e:	61bb      	str	r3, [r7, #24]
 800e6a0:	e002      	b.n	800e6a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e6a2:	f06f 0303 	mvn.w	r3, #3
 800e6a6:	e07d      	b.n	800e7a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e6a8:	4b46      	ldr	r3, [pc, #280]	; (800e7c4 <etharp_output+0x1fc>)
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4a46      	ldr	r2, [pc, #280]	; (800e7c8 <etharp_output+0x200>)
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	440b      	add	r3, r1
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	4413      	add	r3, r2
 800e6ba:	3314      	adds	r3, #20
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d925      	bls.n	800e70e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e6c2:	4b40      	ldr	r3, [pc, #256]	; (800e7c4 <etharp_output+0x1fc>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	4a3f      	ldr	r2, [pc, #252]	; (800e7c8 <etharp_output+0x200>)
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	440b      	add	r3, r1
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d117      	bne.n	800e70e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	4b38      	ldr	r3, [pc, #224]	; (800e7c4 <etharp_output+0x1fc>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	4937      	ldr	r1, [pc, #220]	; (800e7c8 <etharp_output+0x200>)
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	005b      	lsls	r3, r3, #1
 800e6ee:	4403      	add	r3, r0
 800e6f0:	00db      	lsls	r3, r3, #3
 800e6f2:	440b      	add	r3, r1
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d108      	bne.n	800e70e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e6fc:	4b31      	ldr	r3, [pc, #196]	; (800e7c4 <etharp_output+0x1fc>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	461a      	mov	r2, r3
 800e702:	68b9      	ldr	r1, [r7, #8]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff fec5 	bl	800e494 <etharp_output_to_arp_index>
 800e70a:	4603      	mov	r3, r0
 800e70c:	e04a      	b.n	800e7a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e70e:	2300      	movs	r3, #0
 800e710:	75fb      	strb	r3, [r7, #23]
 800e712:	e031      	b.n	800e778 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e714:	7dfa      	ldrb	r2, [r7, #23]
 800e716:	492c      	ldr	r1, [pc, #176]	; (800e7c8 <etharp_output+0x200>)
 800e718:	4613      	mov	r3, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	440b      	add	r3, r1
 800e722:	3314      	adds	r3, #20
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d923      	bls.n	800e772 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e72a:	7dfa      	ldrb	r2, [r7, #23]
 800e72c:	4926      	ldr	r1, [pc, #152]	; (800e7c8 <etharp_output+0x200>)
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	440b      	add	r3, r1
 800e738:	3308      	adds	r3, #8
 800e73a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d117      	bne.n	800e772 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	6819      	ldr	r1, [r3, #0]
 800e746:	7dfa      	ldrb	r2, [r7, #23]
 800e748:	481f      	ldr	r0, [pc, #124]	; (800e7c8 <etharp_output+0x200>)
 800e74a:	4613      	mov	r3, r2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	4413      	add	r3, r2
 800e750:	00db      	lsls	r3, r3, #3
 800e752:	4403      	add	r3, r0
 800e754:	3304      	adds	r3, #4
 800e756:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e758:	4299      	cmp	r1, r3
 800e75a:	d10a      	bne.n	800e772 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e75c:	4a19      	ldr	r2, [pc, #100]	; (800e7c4 <etharp_output+0x1fc>)
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	461a      	mov	r2, r3
 800e766:	68b9      	ldr	r1, [r7, #8]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fe93 	bl	800e494 <etharp_output_to_arp_index>
 800e76e:	4603      	mov	r3, r0
 800e770:	e018      	b.n	800e7a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e772:	7dfb      	ldrb	r3, [r7, #23]
 800e774:	3301      	adds	r3, #1
 800e776:	75fb      	strb	r3, [r7, #23]
 800e778:	7dfb      	ldrb	r3, [r7, #23]
 800e77a:	2b09      	cmp	r3, #9
 800e77c:	d9ca      	bls.n	800e714 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	69b9      	ldr	r1, [r7, #24]
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f000 f822 	bl	800e7cc <etharp_query>
 800e788:	4603      	mov	r3, r0
 800e78a:	e00b      	b.n	800e7a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	68b9      	ldr	r1, [r7, #8]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 fd3f 	bl	8010220 <ethernet_output>
 800e7a2:	4603      	mov	r3, r0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	080136a8 	.word	0x080136a8
 800e7b0:	080137f8 	.word	0x080137f8
 800e7b4:	08013720 	.word	0x08013720
 800e7b8:	08013848 	.word	0x08013848
 800e7bc:	080137e8 	.word	0x080137e8
 800e7c0:	08013e60 	.word	0x08013e60
 800e7c4:	200001fc 	.word	0x200001fc
 800e7c8:	2000010c 	.word	0x2000010c

0800e7cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08c      	sub	sp, #48	; 0x30
 800e7d0:	af02      	add	r7, sp, #8
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3326      	adds	r3, #38	; 0x26
 800e7dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e7de:	23ff      	movs	r3, #255	; 0xff
 800e7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68f9      	ldr	r1, [r7, #12]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 fe0e 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10c      	bne.n	800e814 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e802:	2be0      	cmp	r3, #224	; 0xe0
 800e804:	d006      	beq.n	800e814 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d003      	beq.n	800e814 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d102      	bne.n	800e81a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e814:	f06f 030f 	mvn.w	r3, #15
 800e818:	e101      	b.n	800ea1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	2101      	movs	r1, #1
 800e81e:	68b8      	ldr	r0, [r7, #8]
 800e820:	f7ff fb60 	bl	800dee4 <etharp_find_entry>
 800e824:	4603      	mov	r3, r0
 800e826:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	da02      	bge.n	800e836 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e830:	8a7b      	ldrh	r3, [r7, #18]
 800e832:	b25b      	sxtb	r3, r3
 800e834:	e0f3      	b.n	800ea1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e836:	8a7b      	ldrh	r3, [r7, #18]
 800e838:	2b7e      	cmp	r3, #126	; 0x7e
 800e83a:	d906      	bls.n	800e84a <etharp_query+0x7e>
 800e83c:	4b7a      	ldr	r3, [pc, #488]	; (800ea28 <etharp_query+0x25c>)
 800e83e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e842:	497a      	ldr	r1, [pc, #488]	; (800ea2c <etharp_query+0x260>)
 800e844:	487a      	ldr	r0, [pc, #488]	; (800ea30 <etharp_query+0x264>)
 800e846:	f001 fd7b 	bl	8010340 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e84a:	8a7b      	ldrh	r3, [r7, #18]
 800e84c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e84e:	7c7a      	ldrb	r2, [r7, #17]
 800e850:	4978      	ldr	r1, [pc, #480]	; (800ea34 <etharp_query+0x268>)
 800e852:	4613      	mov	r3, r2
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4413      	add	r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	440b      	add	r3, r1
 800e85c:	3314      	adds	r3, #20
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d115      	bne.n	800e890 <etharp_query+0xc4>
    is_new_entry = 1;
 800e864:	2301      	movs	r3, #1
 800e866:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e868:	7c7a      	ldrb	r2, [r7, #17]
 800e86a:	4972      	ldr	r1, [pc, #456]	; (800ea34 <etharp_query+0x268>)
 800e86c:	4613      	mov	r3, r2
 800e86e:	005b      	lsls	r3, r3, #1
 800e870:	4413      	add	r3, r2
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	440b      	add	r3, r1
 800e876:	3314      	adds	r3, #20
 800e878:	2201      	movs	r2, #1
 800e87a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e87c:	7c7a      	ldrb	r2, [r7, #17]
 800e87e:	496d      	ldr	r1, [pc, #436]	; (800ea34 <etharp_query+0x268>)
 800e880:	4613      	mov	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3308      	adds	r3, #8
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e890:	7c7a      	ldrb	r2, [r7, #17]
 800e892:	4968      	ldr	r1, [pc, #416]	; (800ea34 <etharp_query+0x268>)
 800e894:	4613      	mov	r3, r2
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	4413      	add	r3, r2
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	440b      	add	r3, r1
 800e89e:	3314      	adds	r3, #20
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d011      	beq.n	800e8ca <etharp_query+0xfe>
 800e8a6:	7c7a      	ldrb	r2, [r7, #17]
 800e8a8:	4962      	ldr	r1, [pc, #392]	; (800ea34 <etharp_query+0x268>)
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	4413      	add	r3, r2
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	440b      	add	r3, r1
 800e8b4:	3314      	adds	r3, #20
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d806      	bhi.n	800e8ca <etharp_query+0xfe>
 800e8bc:	4b5a      	ldr	r3, [pc, #360]	; (800ea28 <etharp_query+0x25c>)
 800e8be:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e8c2:	495d      	ldr	r1, [pc, #372]	; (800ea38 <etharp_query+0x26c>)
 800e8c4:	485a      	ldr	r0, [pc, #360]	; (800ea30 <etharp_query+0x264>)
 800e8c6:	f001 fd3b 	bl	8010340 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <etharp_query+0x10a>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d10c      	bne.n	800e8f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e8d6:	68b9      	ldr	r1, [r7, #8]
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 f963 	bl	800eba4 <etharp_request>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <etharp_query+0x124>
      return result;
 800e8ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8ee:	e096      	b.n	800ea1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <etharp_query+0x138>
 800e8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ea28 <etharp_query+0x25c>)
 800e8f8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e8fc:	494f      	ldr	r1, [pc, #316]	; (800ea3c <etharp_query+0x270>)
 800e8fe:	484c      	ldr	r0, [pc, #304]	; (800ea30 <etharp_query+0x264>)
 800e900:	f001 fd1e 	bl	8010340 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e904:	7c7a      	ldrb	r2, [r7, #17]
 800e906:	494b      	ldr	r1, [pc, #300]	; (800ea34 <etharp_query+0x268>)
 800e908:	4613      	mov	r3, r2
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	4413      	add	r3, r2
 800e90e:	00db      	lsls	r3, r3, #3
 800e910:	440b      	add	r3, r1
 800e912:	3314      	adds	r3, #20
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d917      	bls.n	800e94a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e91a:	4a49      	ldr	r2, [pc, #292]	; (800ea40 <etharp_query+0x274>)
 800e91c:	7c7b      	ldrb	r3, [r7, #17]
 800e91e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e920:	7c7a      	ldrb	r2, [r7, #17]
 800e922:	4613      	mov	r3, r2
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	4413      	add	r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	3308      	adds	r3, #8
 800e92c:	4a41      	ldr	r2, [pc, #260]	; (800ea34 <etharp_query+0x268>)
 800e92e:	4413      	add	r3, r2
 800e930:	3304      	adds	r3, #4
 800e932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e936:	9200      	str	r2, [sp, #0]
 800e938:	697a      	ldr	r2, [r7, #20]
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f001 fc6f 	bl	8010220 <ethernet_output>
 800e942:	4603      	mov	r3, r0
 800e944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e948:	e067      	b.n	800ea1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e94a:	7c7a      	ldrb	r2, [r7, #17]
 800e94c:	4939      	ldr	r1, [pc, #228]	; (800ea34 <etharp_query+0x268>)
 800e94e:	4613      	mov	r3, r2
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	4413      	add	r3, r2
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	440b      	add	r3, r1
 800e958:	3314      	adds	r3, #20
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d15c      	bne.n	800ea1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e968:	e01c      	b.n	800e9a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	895a      	ldrh	r2, [r3, #10]
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	891b      	ldrh	r3, [r3, #8]
 800e972:	429a      	cmp	r2, r3
 800e974:	d10a      	bne.n	800e98c <etharp_query+0x1c0>
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d006      	beq.n	800e98c <etharp_query+0x1c0>
 800e97e:	4b2a      	ldr	r3, [pc, #168]	; (800ea28 <etharp_query+0x25c>)
 800e980:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e984:	492f      	ldr	r1, [pc, #188]	; (800ea44 <etharp_query+0x278>)
 800e986:	482a      	ldr	r0, [pc, #168]	; (800ea30 <etharp_query+0x264>)
 800e988:	f001 fcda 	bl	8010340 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	7b1b      	ldrb	r3, [r3, #12]
 800e990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e994:	2b00      	cmp	r3, #0
 800e996:	d002      	beq.n	800e99e <etharp_query+0x1d2>
        copy_needed = 1;
 800e998:	2301      	movs	r3, #1
 800e99a:	61bb      	str	r3, [r7, #24]
        break;
 800e99c:	e005      	b.n	800e9aa <etharp_query+0x1de>
      }
      p = p->next;
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1df      	bne.n	800e96a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d007      	beq.n	800e9c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e9b6:	200e      	movs	r0, #14
 800e9b8:	f7f9 fd6e 	bl	8008498 <pbuf_clone>
 800e9bc:	61f8      	str	r0, [r7, #28]
 800e9be:	e004      	b.n	800e9ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e9c4:	69f8      	ldr	r0, [r7, #28]
 800e9c6:	f7f9 fbab 	bl	8008120 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d021      	beq.n	800ea14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e9d0:	7c7a      	ldrb	r2, [r7, #17]
 800e9d2:	4918      	ldr	r1, [pc, #96]	; (800ea34 <etharp_query+0x268>)
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	005b      	lsls	r3, r3, #1
 800e9d8:	4413      	add	r3, r2
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	440b      	add	r3, r1
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00a      	beq.n	800e9fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e9e4:	7c7a      	ldrb	r2, [r7, #17]
 800e9e6:	4913      	ldr	r1, [pc, #76]	; (800ea34 <etharp_query+0x268>)
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	4413      	add	r3, r2
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	440b      	add	r3, r1
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7f9 faf3 	bl	8007fe0 <pbuf_free>
      }
      arp_table[i].q = p;
 800e9fa:	7c7a      	ldrb	r2, [r7, #17]
 800e9fc:	490d      	ldr	r1, [pc, #52]	; (800ea34 <etharp_query+0x268>)
 800e9fe:	4613      	mov	r3, r2
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	4413      	add	r3, r2
 800ea04:	00db      	lsls	r3, r3, #3
 800ea06:	440b      	add	r3, r1
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea12:	e002      	b.n	800ea1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ea14:	23ff      	movs	r3, #255	; 0xff
 800ea16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ea1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3728      	adds	r7, #40	; 0x28
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	080136a8 	.word	0x080136a8
 800ea2c:	08013854 	.word	0x08013854
 800ea30:	08013720 	.word	0x08013720
 800ea34:	2000010c 	.word	0x2000010c
 800ea38:	08013864 	.word	0x08013864
 800ea3c:	08013848 	.word	0x08013848
 800ea40:	200001fc 	.word	0x200001fc
 800ea44:	0801388c 	.word	0x0801388c

0800ea48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08a      	sub	sp, #40	; 0x28
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d106      	bne.n	800ea6e <etharp_raw+0x26>
 800ea60:	4b3a      	ldr	r3, [pc, #232]	; (800eb4c <etharp_raw+0x104>)
 800ea62:	f240 4257 	movw	r2, #1111	; 0x457
 800ea66:	493a      	ldr	r1, [pc, #232]	; (800eb50 <etharp_raw+0x108>)
 800ea68:	483a      	ldr	r0, [pc, #232]	; (800eb54 <etharp_raw+0x10c>)
 800ea6a:	f001 fc69 	bl	8010340 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ea6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea72:	211c      	movs	r1, #28
 800ea74:	200e      	movs	r0, #14
 800ea76:	f7f8 ffcf 	bl	8007a18 <pbuf_alloc>
 800ea7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d102      	bne.n	800ea88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ea82:	f04f 33ff 	mov.w	r3, #4294967295
 800ea86:	e05d      	b.n	800eb44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	895b      	ldrh	r3, [r3, #10]
 800ea8c:	2b1b      	cmp	r3, #27
 800ea8e:	d806      	bhi.n	800ea9e <etharp_raw+0x56>
 800ea90:	4b2e      	ldr	r3, [pc, #184]	; (800eb4c <etharp_raw+0x104>)
 800ea92:	f240 4262 	movw	r2, #1122	; 0x462
 800ea96:	4930      	ldr	r1, [pc, #192]	; (800eb58 <etharp_raw+0x110>)
 800ea98:	482e      	ldr	r0, [pc, #184]	; (800eb54 <etharp_raw+0x10c>)
 800ea9a:	f001 fc51 	bl	8010340 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800eaa4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f8 f806 	bl	8006ab8 <lwip_htons>
 800eaac:	4603      	mov	r3, r0
 800eaae:	461a      	mov	r2, r3
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eaba:	2b06      	cmp	r3, #6
 800eabc:	d006      	beq.n	800eacc <etharp_raw+0x84>
 800eabe:	4b23      	ldr	r3, [pc, #140]	; (800eb4c <etharp_raw+0x104>)
 800eac0:	f240 4269 	movw	r2, #1129	; 0x469
 800eac4:	4925      	ldr	r1, [pc, #148]	; (800eb5c <etharp_raw+0x114>)
 800eac6:	4823      	ldr	r0, [pc, #140]	; (800eb54 <etharp_raw+0x10c>)
 800eac8:	f001 fc3a 	bl	8010340 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	3308      	adds	r3, #8
 800ead0:	2206      	movs	r2, #6
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f001 fc1d 	bl	8010314 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	3312      	adds	r3, #18
 800eade:	2206      	movs	r2, #6
 800eae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 fc16 	bl	8010314 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	330e      	adds	r3, #14
 800eaec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaee:	6812      	ldr	r2, [r2, #0]
 800eaf0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	3318      	adds	r3, #24
 800eaf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaf8:	6812      	ldr	r2, [r2, #0]
 800eafa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	2200      	movs	r2, #0
 800eb00:	701a      	strb	r2, [r3, #0]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f042 0201 	orr.w	r2, r2, #1
 800eb08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f042 0208 	orr.w	r2, r2, #8
 800eb12:	709a      	strb	r2, [r3, #2]
 800eb14:	2200      	movs	r2, #0
 800eb16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2206      	movs	r2, #6
 800eb1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2204      	movs	r2, #4
 800eb22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eb24:	f640 0306 	movw	r3, #2054	; 0x806
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	69b9      	ldr	r1, [r7, #24]
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f001 fb75 	bl	8010220 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800eb36:	69b8      	ldr	r0, [r7, #24]
 800eb38:	f7f9 fa52 	bl	8007fe0 <pbuf_free>
  p = NULL;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800eb40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3720      	adds	r7, #32
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	080136a8 	.word	0x080136a8
 800eb50:	080137f8 	.word	0x080137f8
 800eb54:	08013720 	.word	0x08013720
 800eb58:	080138a8 	.word	0x080138a8
 800eb5c:	080138dc 	.word	0x080138dc

0800eb60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af04      	add	r7, sp, #16
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	9203      	str	r2, [sp, #12]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	9202      	str	r2, [sp, #8]
 800eb84:	4a06      	ldr	r2, [pc, #24]	; (800eba0 <etharp_request_dst+0x40>)
 800eb86:	9201      	str	r2, [sp, #4]
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff ff5a 	bl	800ea48 <etharp_raw>
 800eb94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	08013e68 	.word	0x08013e68

0800eba4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ebae:	4a05      	ldr	r2, [pc, #20]	; (800ebc4 <etharp_request+0x20>)
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff ffd4 	bl	800eb60 <etharp_request_dst>
 800ebb8:	4603      	mov	r3, r0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	08013e60 	.word	0x08013e60

0800ebc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08e      	sub	sp, #56	; 0x38
 800ebcc:	af04      	add	r7, sp, #16
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ebd2:	4b79      	ldr	r3, [pc, #484]	; (800edb8 <icmp_input+0x1f0>)
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	f003 030f 	and.w	r3, r3, #15
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ebe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebea:	2b13      	cmp	r3, #19
 800ebec:	f240 80cd 	bls.w	800ed8a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	895b      	ldrh	r3, [r3, #10]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	f240 80ca 	bls.w	800ed8e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ec04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 80b7 	beq.w	800ed7c <icmp_input+0x1b4>
 800ec0e:	2b08      	cmp	r3, #8
 800ec10:	f040 80b7 	bne.w	800ed82 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ec14:	4b69      	ldr	r3, [pc, #420]	; (800edbc <icmp_input+0x1f4>)
 800ec16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec18:	4b67      	ldr	r3, [pc, #412]	; (800edb8 <icmp_input+0x1f0>)
 800ec1a:	695b      	ldr	r3, [r3, #20]
 800ec1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec20:	2be0      	cmp	r3, #224	; 0xe0
 800ec22:	f000 80bb 	beq.w	800ed9c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ec26:	4b64      	ldr	r3, [pc, #400]	; (800edb8 <icmp_input+0x1f0>)
 800ec28:	695b      	ldr	r3, [r3, #20]
 800ec2a:	4a63      	ldr	r2, [pc, #396]	; (800edb8 <icmp_input+0x1f0>)
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	4611      	mov	r1, r2
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 fbed 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f040 80b1 	bne.w	800eda0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	891b      	ldrh	r3, [r3, #8]
 800ec42:	2b07      	cmp	r3, #7
 800ec44:	f240 80a5 	bls.w	800ed92 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ec48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec4a:	330e      	adds	r3, #14
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7f9 f930 	bl	8007eb4 <pbuf_add_header>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d04b      	beq.n	800ecf2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	891a      	ldrh	r2, [r3, #8]
 800ec5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec60:	4413      	add	r3, r2
 800ec62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	891b      	ldrh	r3, [r3, #8]
 800ec68:	8b7a      	ldrh	r2, [r7, #26]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	f0c0 809a 	bcc.w	800eda4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ec70:	8b7b      	ldrh	r3, [r7, #26]
 800ec72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec76:	4619      	mov	r1, r3
 800ec78:	200e      	movs	r0, #14
 800ec7a:	f7f8 fecd 	bl	8007a18 <pbuf_alloc>
 800ec7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 8090 	beq.w	800eda8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec90:	3308      	adds	r3, #8
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d203      	bcs.n	800ec9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ec96:	6978      	ldr	r0, [r7, #20]
 800ec98:	f7f9 f9a2 	bl	8007fe0 <pbuf_free>
          goto icmperr;
 800ec9c:	e085      	b.n	800edaa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eca6:	4618      	mov	r0, r3
 800eca8:	f001 fb34 	bl	8010314 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ecac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6978      	ldr	r0, [r7, #20]
 800ecb2:	f7f9 f90f 	bl	8007ed4 <pbuf_remove_header>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ecbc:	4b40      	ldr	r3, [pc, #256]	; (800edc0 <icmp_input+0x1f8>)
 800ecbe:	22b6      	movs	r2, #182	; 0xb6
 800ecc0:	4940      	ldr	r1, [pc, #256]	; (800edc4 <icmp_input+0x1fc>)
 800ecc2:	4841      	ldr	r0, [pc, #260]	; (800edc8 <icmp_input+0x200>)
 800ecc4:	f001 fb3c 	bl	8010340 <iprintf>
          pbuf_free(r);
 800ecc8:	6978      	ldr	r0, [r7, #20]
 800ecca:	f7f9 f989 	bl	8007fe0 <pbuf_free>
          goto icmperr;
 800ecce:	e06c      	b.n	800edaa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	6978      	ldr	r0, [r7, #20]
 800ecd4:	f7f9 fa9c 	bl	8008210 <pbuf_copy>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d003      	beq.n	800ece6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ecde:	6978      	ldr	r0, [r7, #20]
 800ece0:	f7f9 f97e 	bl	8007fe0 <pbuf_free>
          goto icmperr;
 800ece4:	e061      	b.n	800edaa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7f9 f97a 	bl	8007fe0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	607b      	str	r3, [r7, #4]
 800ecf0:	e00f      	b.n	800ed12 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ecf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecf4:	330e      	adds	r3, #14
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7f9 f8eb 	bl	8007ed4 <pbuf_remove_header>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d006      	beq.n	800ed12 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ed04:	4b2e      	ldr	r3, [pc, #184]	; (800edc0 <icmp_input+0x1f8>)
 800ed06:	22c7      	movs	r2, #199	; 0xc7
 800ed08:	4930      	ldr	r1, [pc, #192]	; (800edcc <icmp_input+0x204>)
 800ed0a:	482f      	ldr	r0, [pc, #188]	; (800edc8 <icmp_input+0x200>)
 800ed0c:	f001 fb18 	bl	8010340 <iprintf>
          goto icmperr;
 800ed10:	e04b      	b.n	800edaa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ed18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7f9 f8c9 	bl	8007eb4 <pbuf_add_header>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d12b      	bne.n	800ed80 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ed36:	4b20      	ldr	r3, [pc, #128]	; (800edb8 <icmp_input+0x1f0>)
 800ed38:	691a      	ldr	r2, [r3, #16]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	2200      	movs	r2, #0
 800ed42:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	2200      	movs	r2, #0
 800ed48:	709a      	strb	r2, [r3, #2]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	22ff      	movs	r2, #255	; 0xff
 800ed52:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	729a      	strb	r2, [r3, #10]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	9302      	str	r3, [sp, #8]
 800ed62:	2301      	movs	r3, #1
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	2300      	movs	r3, #0
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	23ff      	movs	r3, #255	; 0xff
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	69f9      	ldr	r1, [r7, #28]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fa75 	bl	800f260 <ip4_output_if>
 800ed76:	4603      	mov	r3, r0
 800ed78:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ed7a:	e001      	b.n	800ed80 <icmp_input+0x1b8>
      break;
 800ed7c:	bf00      	nop
 800ed7e:	e000      	b.n	800ed82 <icmp_input+0x1ba>
      break;
 800ed80:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7f9 f92c 	bl	8007fe0 <pbuf_free>
  return;
 800ed88:	e013      	b.n	800edb2 <icmp_input+0x1ea>
    goto lenerr;
 800ed8a:	bf00      	nop
 800ed8c:	e002      	b.n	800ed94 <icmp_input+0x1cc>
    goto lenerr;
 800ed8e:	bf00      	nop
 800ed90:	e000      	b.n	800ed94 <icmp_input+0x1cc>
        goto lenerr;
 800ed92:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7f9 f923 	bl	8007fe0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ed9a:	e00a      	b.n	800edb2 <icmp_input+0x1ea>
        goto icmperr;
 800ed9c:	bf00      	nop
 800ed9e:	e004      	b.n	800edaa <icmp_input+0x1e2>
        goto icmperr;
 800eda0:	bf00      	nop
 800eda2:	e002      	b.n	800edaa <icmp_input+0x1e2>
          goto icmperr;
 800eda4:	bf00      	nop
 800eda6:	e000      	b.n	800edaa <icmp_input+0x1e2>
          goto icmperr;
 800eda8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7f9 f918 	bl	8007fe0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800edb0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800edb2:	3728      	adds	r7, #40	; 0x28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	20000450 	.word	0x20000450
 800edbc:	20000464 	.word	0x20000464
 800edc0:	08013920 	.word	0x08013920
 800edc4:	08013958 	.word	0x08013958
 800edc8:	08013990 	.word	0x08013990
 800edcc:	080139b8 	.word	0x080139b8

0800edd0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	460b      	mov	r3, r1
 800edda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eddc:	78fb      	ldrb	r3, [r7, #3]
 800edde:	461a      	mov	r2, r3
 800ede0:	2103      	movs	r1, #3
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 f814 	bl	800ee10 <icmp_send_response>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800edfc:	78fb      	ldrb	r3, [r7, #3]
 800edfe:	461a      	mov	r2, r3
 800ee00:	210b      	movs	r1, #11
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f804 	bl	800ee10 <icmp_send_response>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b08c      	sub	sp, #48	; 0x30
 800ee14:	af04      	add	r7, sp, #16
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ee20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee24:	2124      	movs	r1, #36	; 0x24
 800ee26:	2022      	movs	r0, #34	; 0x22
 800ee28:	f7f8 fdf6 	bl	8007a18 <pbuf_alloc>
 800ee2c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d04c      	beq.n	800eece <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	2b23      	cmp	r3, #35	; 0x23
 800ee3a:	d806      	bhi.n	800ee4a <icmp_send_response+0x3a>
 800ee3c:	4b26      	ldr	r3, [pc, #152]	; (800eed8 <icmp_send_response+0xc8>)
 800ee3e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ee42:	4926      	ldr	r1, [pc, #152]	; (800eedc <icmp_send_response+0xcc>)
 800ee44:	4826      	ldr	r0, [pc, #152]	; (800eee0 <icmp_send_response+0xd0>)
 800ee46:	f001 fa7b 	bl	8010340 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	78fa      	ldrb	r2, [r7, #3]
 800ee5a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	78ba      	ldrb	r2, [r7, #2]
 800ee60:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2200      	movs	r2, #0
 800ee66:	711a      	strb	r2, [r3, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	719a      	strb	r2, [r3, #6]
 800ee72:	2200      	movs	r2, #0
 800ee74:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	f103 0008 	add.w	r0, r3, #8
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	221c      	movs	r2, #28
 800ee84:	4619      	mov	r1, r3
 800ee86:	f001 fa45 	bl	8010314 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 f825 	bl	800eee4 <ip4_route>
 800ee9a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d011      	beq.n	800eec6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2200      	movs	r2, #0
 800eea6:	709a      	strb	r2, [r3, #2]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eeac:	f107 020c 	add.w	r2, r7, #12
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	9302      	str	r3, [sp, #8]
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	23ff      	movs	r3, #255	; 0xff
 800eebe:	2100      	movs	r1, #0
 800eec0:	69f8      	ldr	r0, [r7, #28]
 800eec2:	f000 f9cd 	bl	800f260 <ip4_output_if>
  }
  pbuf_free(q);
 800eec6:	69f8      	ldr	r0, [r7, #28]
 800eec8:	f7f9 f88a 	bl	8007fe0 <pbuf_free>
 800eecc:	e000      	b.n	800eed0 <icmp_send_response+0xc0>
    return;
 800eece:	bf00      	nop
}
 800eed0:	3720      	adds	r7, #32
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	08013920 	.word	0x08013920
 800eedc:	080139ec 	.word	0x080139ec
 800eee0:	08013990 	.word	0x08013990

0800eee4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eeec:	4b33      	ldr	r3, [pc, #204]	; (800efbc <ip4_route+0xd8>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	60fb      	str	r3, [r7, #12]
 800eef2:	e036      	b.n	800ef62 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d02b      	beq.n	800ef5c <ip4_route+0x78>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef0a:	089b      	lsrs	r3, r3, #2
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d022      	beq.n	800ef5c <ip4_route+0x78>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d01d      	beq.n	800ef5c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	3304      	adds	r3, #4
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	405a      	eors	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4013      	ands	r3, r2
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	e038      	b.n	800efae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef42:	f003 0302 	and.w	r3, r3, #2
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d108      	bne.n	800ef5c <ip4_route+0x78>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	330c      	adds	r3, #12
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d101      	bne.n	800ef5c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	e028      	b.n	800efae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1c5      	bne.n	800eef4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ef68:	4b15      	ldr	r3, [pc, #84]	; (800efc0 <ip4_route+0xdc>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d01a      	beq.n	800efa6 <ip4_route+0xc2>
 800ef70:	4b13      	ldr	r3, [pc, #76]	; (800efc0 <ip4_route+0xdc>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d012      	beq.n	800efa6 <ip4_route+0xc2>
 800ef80:	4b0f      	ldr	r3, [pc, #60]	; (800efc0 <ip4_route+0xdc>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef88:	f003 0304 	and.w	r3, r3, #4
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00a      	beq.n	800efa6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef90:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <ip4_route+0xdc>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3304      	adds	r3, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b7f      	cmp	r3, #127	; 0x7f
 800efa4:	d101      	bne.n	800efaa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800efa6:	2300      	movs	r3, #0
 800efa8:	e001      	b.n	800efae <ip4_route+0xca>
  }

  return netif_default;
 800efaa:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <ip4_route+0xdc>)
 800efac:	681b      	ldr	r3, [r3, #0]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	20005b44 	.word	0x20005b44
 800efc0:	20005b48 	.word	0x20005b48

0800efc4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d016      	beq.n	800f00a <ip4_input_accept+0x46>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3304      	adds	r3, #4
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d011      	beq.n	800f00a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800efe6:	4b0b      	ldr	r3, [pc, #44]	; (800f014 <ip4_input_accept+0x50>)
 800efe8:	695a      	ldr	r2, [r3, #20]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3304      	adds	r3, #4
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d008      	beq.n	800f006 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eff4:	4b07      	ldr	r3, [pc, #28]	; (800f014 <ip4_input_accept+0x50>)
 800eff6:	695b      	ldr	r3, [r3, #20]
 800eff8:	6879      	ldr	r1, [r7, #4]
 800effa:	4618      	mov	r0, r3
 800effc:	f000 fa08 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800f000:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f006:	2301      	movs	r3, #1
 800f008:	e000      	b.n	800f00c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20000450 	.word	0x20000450

0800f018 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	091b      	lsrs	r3, r3, #4
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	2b04      	cmp	r3, #4
 800f032:	d004      	beq.n	800f03e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7f8 ffd3 	bl	8007fe0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	e107      	b.n	800f24e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	f003 030f 	and.w	r3, r3, #15
 800f046:	b2db      	uxtb	r3, r3
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	885b      	ldrh	r3, [r3, #2]
 800f052:	b29b      	uxth	r3, r3
 800f054:	4618      	mov	r0, r3
 800f056:	f7f7 fd2f 	bl	8006ab8 <lwip_htons>
 800f05a:	4603      	mov	r3, r0
 800f05c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	891b      	ldrh	r3, [r3, #8]
 800f062:	89ba      	ldrh	r2, [r7, #12]
 800f064:	429a      	cmp	r2, r3
 800f066:	d204      	bcs.n	800f072 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f068:	89bb      	ldrh	r3, [r7, #12]
 800f06a:	4619      	mov	r1, r3
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7f8 fe31 	bl	8007cd4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	895b      	ldrh	r3, [r3, #10]
 800f076:	89fa      	ldrh	r2, [r7, #14]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d807      	bhi.n	800f08c <ip4_input+0x74>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	891b      	ldrh	r3, [r3, #8]
 800f080:	89ba      	ldrh	r2, [r7, #12]
 800f082:	429a      	cmp	r2, r3
 800f084:	d802      	bhi.n	800f08c <ip4_input+0x74>
 800f086:	89fb      	ldrh	r3, [r7, #14]
 800f088:	2b13      	cmp	r3, #19
 800f08a:	d804      	bhi.n	800f096 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7f8 ffa7 	bl	8007fe0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f092:	2300      	movs	r3, #0
 800f094:	e0db      	b.n	800f24e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	4a6f      	ldr	r2, [pc, #444]	; (800f258 <ip4_input+0x240>)
 800f09c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	4a6d      	ldr	r2, [pc, #436]	; (800f258 <ip4_input+0x240>)
 800f0a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f0a6:	4b6c      	ldr	r3, [pc, #432]	; (800f258 <ip4_input+0x240>)
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0ae:	2be0      	cmp	r3, #224	; 0xe0
 800f0b0:	d112      	bne.n	800f0d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <ip4_input+0xba>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d002      	beq.n	800f0d2 <ip4_input+0xba>
      netif = inp;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	e02a      	b.n	800f128 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	613b      	str	r3, [r7, #16]
 800f0d6:	e027      	b.n	800f128 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f0d8:	6838      	ldr	r0, [r7, #0]
 800f0da:	f7ff ff73 	bl	800efc4 <ip4_input_accept>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <ip4_input+0xd2>
      netif = inp;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	613b      	str	r3, [r7, #16]
 800f0e8:	e01e      	b.n	800f128 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f0ee:	4b5a      	ldr	r3, [pc, #360]	; (800f258 <ip4_input+0x240>)
 800f0f0:	695b      	ldr	r3, [r3, #20]
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f0f6:	d017      	beq.n	800f128 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f0f8:	4b58      	ldr	r3, [pc, #352]	; (800f25c <ip4_input+0x244>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	613b      	str	r3, [r7, #16]
 800f0fe:	e00e      	b.n	800f11e <ip4_input+0x106>
          if (netif == inp) {
 800f100:	693a      	ldr	r2, [r7, #16]
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d006      	beq.n	800f116 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f108:	6938      	ldr	r0, [r7, #16]
 800f10a:	f7ff ff5b 	bl	800efc4 <ip4_input_accept>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d108      	bne.n	800f126 <ip4_input+0x10e>
 800f114:	e000      	b.n	800f118 <ip4_input+0x100>
            continue;
 800f116:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	613b      	str	r3, [r7, #16]
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d1ed      	bne.n	800f100 <ip4_input+0xe8>
 800f124:	e000      	b.n	800f128 <ip4_input+0x110>
            break;
 800f126:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f128:	4b4b      	ldr	r3, [pc, #300]	; (800f258 <ip4_input+0x240>)
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	4618      	mov	r0, r3
 800f130:	f000 f96e 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d105      	bne.n	800f146 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f13a:	4b47      	ldr	r3, [pc, #284]	; (800f258 <ip4_input+0x240>)
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f142:	2be0      	cmp	r3, #224	; 0xe0
 800f144:	d104      	bne.n	800f150 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7f8 ff4a 	bl	8007fe0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e07e      	b.n	800f24e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d104      	bne.n	800f160 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7f8 ff42 	bl	8007fe0 <pbuf_free>
    return ERR_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	e076      	b.n	800f24e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	88db      	ldrh	r3, [r3, #6]
 800f164:	b29b      	uxth	r3, r3
 800f166:	461a      	mov	r2, r3
 800f168:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f16c:	4013      	ands	r3, r2
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00b      	beq.n	800f18a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fc92 	bl	800fa9c <ip4_reass>
 800f178:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <ip4_input+0x16c>
      return ERR_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	e064      	b.n	800f24e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f18a:	4a33      	ldr	r2, [pc, #204]	; (800f258 <ip4_input+0x240>)
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f190:	4a31      	ldr	r2, [pc, #196]	; (800f258 <ip4_input+0x240>)
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f196:	4a30      	ldr	r2, [pc, #192]	; (800f258 <ip4_input+0x240>)
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	f003 030f 	and.w	r3, r3, #15
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	4b2a      	ldr	r3, [pc, #168]	; (800f258 <ip4_input+0x240>)
 800f1ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f1b0:	89fb      	ldrh	r3, [r7, #14]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7f8 fe8d 	bl	8007ed4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	7a5b      	ldrb	r3, [r3, #9]
 800f1be:	2b11      	cmp	r3, #17
 800f1c0:	d006      	beq.n	800f1d0 <ip4_input+0x1b8>
 800f1c2:	2b11      	cmp	r3, #17
 800f1c4:	dc13      	bgt.n	800f1ee <ip4_input+0x1d6>
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d00c      	beq.n	800f1e4 <ip4_input+0x1cc>
 800f1ca:	2b06      	cmp	r3, #6
 800f1cc:	d005      	beq.n	800f1da <ip4_input+0x1c2>
 800f1ce:	e00e      	b.n	800f1ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f1d0:	6839      	ldr	r1, [r7, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7fe fc68 	bl	800daa8 <udp_input>
        break;
 800f1d8:	e026      	b.n	800f228 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7fa fd27 	bl	8009c30 <tcp_input>
        break;
 800f1e2:	e021      	b.n	800f228 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fcee 	bl	800ebc8 <icmp_input>
        break;
 800f1ec:	e01c      	b.n	800f228 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f1ee:	4b1a      	ldr	r3, [pc, #104]	; (800f258 <ip4_input+0x240>)
 800f1f0:	695b      	ldr	r3, [r3, #20]
 800f1f2:	6939      	ldr	r1, [r7, #16]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 f90b 	bl	800f410 <ip4_addr_isbroadcast_u32>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10f      	bne.n	800f220 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f200:	4b15      	ldr	r3, [pc, #84]	; (800f258 <ip4_input+0x240>)
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f208:	2be0      	cmp	r3, #224	; 0xe0
 800f20a:	d009      	beq.n	800f220 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f20c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f210:	4619      	mov	r1, r3
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7f8 fed1 	bl	8007fba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f218:	2102      	movs	r1, #2
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fdd8 	bl	800edd0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7f8 fedd 	bl	8007fe0 <pbuf_free>
        break;
 800f226:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f228:	4b0b      	ldr	r3, [pc, #44]	; (800f258 <ip4_input+0x240>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f22e:	4b0a      	ldr	r3, [pc, #40]	; (800f258 <ip4_input+0x240>)
 800f230:	2200      	movs	r2, #0
 800f232:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f234:	4b08      	ldr	r3, [pc, #32]	; (800f258 <ip4_input+0x240>)
 800f236:	2200      	movs	r2, #0
 800f238:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f23a:	4b07      	ldr	r3, [pc, #28]	; (800f258 <ip4_input+0x240>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f240:	4b05      	ldr	r3, [pc, #20]	; (800f258 <ip4_input+0x240>)
 800f242:	2200      	movs	r2, #0
 800f244:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f246:	4b04      	ldr	r3, [pc, #16]	; (800f258 <ip4_input+0x240>)
 800f248:	2200      	movs	r2, #0
 800f24a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3718      	adds	r7, #24
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	20000450 	.word	0x20000450
 800f25c:	20005b44 	.word	0x20005b44

0800f260 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08a      	sub	sp, #40	; 0x28
 800f264:	af04      	add	r7, sp, #16
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	607a      	str	r2, [r7, #4]
 800f26c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d003      	beq.n	800f286 <ip4_output_if+0x26>
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d102      	bne.n	800f28c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	3304      	adds	r3, #4
 800f28a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f28c:	78fa      	ldrb	r2, [r7, #3]
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	9302      	str	r3, [sp, #8]
 800f292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	6979      	ldr	r1, [r7, #20]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 f805 	bl	800f2b4 <ip4_output_if_src>
 800f2aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3718      	adds	r7, #24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	7b9b      	ldrb	r3, [r3, #14]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d006      	beq.n	800f2d8 <ip4_output_if_src+0x24>
 800f2ca:	4b4b      	ldr	r3, [pc, #300]	; (800f3f8 <ip4_output_if_src+0x144>)
 800f2cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f2d0:	494a      	ldr	r1, [pc, #296]	; (800f3fc <ip4_output_if_src+0x148>)
 800f2d2:	484b      	ldr	r0, [pc, #300]	; (800f400 <ip4_output_if_src+0x14c>)
 800f2d4:	f001 f834 	bl	8010340 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d060      	beq.n	800f3a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f2de:	2314      	movs	r3, #20
 800f2e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f2e2:	2114      	movs	r1, #20
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7f8 fde5 	bl	8007eb4 <pbuf_add_header>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f2f0:	f06f 0301 	mvn.w	r3, #1
 800f2f4:	e07c      	b.n	800f3f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	895b      	ldrh	r3, [r3, #10]
 800f300:	2b13      	cmp	r3, #19
 800f302:	d806      	bhi.n	800f312 <ip4_output_if_src+0x5e>
 800f304:	4b3c      	ldr	r3, [pc, #240]	; (800f3f8 <ip4_output_if_src+0x144>)
 800f306:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f30a:	493e      	ldr	r1, [pc, #248]	; (800f404 <ip4_output_if_src+0x150>)
 800f30c:	483c      	ldr	r0, [pc, #240]	; (800f400 <ip4_output_if_src+0x14c>)
 800f30e:	f001 f817 	bl	8010340 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	78fa      	ldrb	r2, [r7, #3]
 800f316:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f31e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f328:	8b7b      	ldrh	r3, [r7, #26]
 800f32a:	089b      	lsrs	r3, r3, #2
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f334:	b2da      	uxtb	r2, r3
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f340:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	891b      	ldrh	r3, [r3, #8]
 800f346:	4618      	mov	r0, r3
 800f348:	f7f7 fbb6 	bl	8006ab8 <lwip_htons>
 800f34c:	4603      	mov	r3, r0
 800f34e:	461a      	mov	r2, r3
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	2200      	movs	r2, #0
 800f358:	719a      	strb	r2, [r3, #6]
 800f35a:	2200      	movs	r2, #0
 800f35c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f35e:	4b2a      	ldr	r3, [pc, #168]	; (800f408 <ip4_output_if_src+0x154>)
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	4618      	mov	r0, r3
 800f364:	f7f7 fba8 	bl	8006ab8 <lwip_htons>
 800f368:	4603      	mov	r3, r0
 800f36a:	461a      	mov	r2, r3
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f370:	4b25      	ldr	r3, [pc, #148]	; (800f408 <ip4_output_if_src+0x154>)
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	b29a      	uxth	r2, r3
 800f378:	4b23      	ldr	r3, [pc, #140]	; (800f408 <ip4_output_if_src+0x154>)
 800f37a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d104      	bne.n	800f38c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f382:	4b22      	ldr	r3, [pc, #136]	; (800f40c <ip4_output_if_src+0x158>)
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	60da      	str	r2, [r3, #12]
 800f38a:	e003      	b.n	800f394 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	2200      	movs	r2, #0
 800f398:	729a      	strb	r2, [r3, #10]
 800f39a:	2200      	movs	r2, #0
 800f39c:	72da      	strb	r2, [r3, #11]
 800f39e:	e00f      	b.n	800f3c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	895b      	ldrh	r3, [r3, #10]
 800f3a4:	2b13      	cmp	r3, #19
 800f3a6:	d802      	bhi.n	800f3ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f3a8:	f06f 0301 	mvn.w	r3, #1
 800f3ac:	e020      	b.n	800f3f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	691b      	ldr	r3, [r3, #16]
 800f3b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f3ba:	f107 0314 	add.w	r3, r7, #20
 800f3be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00c      	beq.n	800f3e2 <ip4_output_if_src+0x12e>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	891a      	ldrh	r2, [r3, #8]
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d906      	bls.n	800f3e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f000 fd4d 	bl	800fe78 <ip4_frag>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	e006      	b.n	800f3f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	68f9      	ldr	r1, [r7, #12]
 800f3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ec:	4798      	blx	r3
 800f3ee:	4603      	mov	r3, r0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3720      	adds	r7, #32
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	08013a18 	.word	0x08013a18
 800f3fc:	08013a4c 	.word	0x08013a4c
 800f400:	08013a58 	.word	0x08013a58
 800f404:	08013a80 	.word	0x08013a80
 800f408:	200001fe 	.word	0x200001fe
 800f40c:	08013e5c 	.word	0x08013e5c

0800f410 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f424:	d002      	beq.n	800f42c <ip4_addr_isbroadcast_u32+0x1c>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d101      	bne.n	800f430 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f42c:	2301      	movs	r3, #1
 800f42e:	e02a      	b.n	800f486 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f436:	f003 0302 	and.w	r3, r3, #2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f43e:	2300      	movs	r3, #0
 800f440:	e021      	b.n	800f486 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	3304      	adds	r3, #4
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d101      	bne.n	800f452 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	e019      	b.n	800f486 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	3304      	adds	r3, #4
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	405a      	eors	r2, r3
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	3308      	adds	r3, #8
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4013      	ands	r3, r2
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10d      	bne.n	800f484 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	3308      	adds	r3, #8
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	43da      	mvns	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	3308      	adds	r3, #8
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d101      	bne.n	800f484 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f480:	2301      	movs	r3, #1
 800f482:	e000      	b.n	800f486 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f484:	2300      	movs	r3, #0
  }
}
 800f486:	4618      	mov	r0, r3
 800f488:	3714      	adds	r7, #20
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
	...

0800f494 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f49e:	4b12      	ldr	r3, [pc, #72]	; (800f4e8 <ip_reass_tmr+0x54>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f4a4:	e018      	b.n	800f4d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	7fdb      	ldrb	r3, [r3, #31]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00b      	beq.n	800f4c6 <ip_reass_tmr+0x32>
      r->timer--;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	7fdb      	ldrb	r3, [r3, #31]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	b2da      	uxtb	r2, r3
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e008      	b.n	800f4d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f4d0:	68b9      	ldr	r1, [r7, #8]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 f80a 	bl	800f4ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1e3      	bne.n	800f4a6 <ip_reass_tmr+0x12>
    }
  }
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20000200 	.word	0x20000200

0800f4ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d105      	bne.n	800f50e <ip_reass_free_complete_datagram+0x22>
 800f502:	4b45      	ldr	r3, [pc, #276]	; (800f618 <ip_reass_free_complete_datagram+0x12c>)
 800f504:	22ab      	movs	r2, #171	; 0xab
 800f506:	4945      	ldr	r1, [pc, #276]	; (800f61c <ip_reass_free_complete_datagram+0x130>)
 800f508:	4845      	ldr	r0, [pc, #276]	; (800f620 <ip_reass_free_complete_datagram+0x134>)
 800f50a:	f000 ff19 	bl	8010340 <iprintf>
  if (prev != NULL) {
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00a      	beq.n	800f52a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d005      	beq.n	800f52a <ip_reass_free_complete_datagram+0x3e>
 800f51e:	4b3e      	ldr	r3, [pc, #248]	; (800f618 <ip_reass_free_complete_datagram+0x12c>)
 800f520:	22ad      	movs	r2, #173	; 0xad
 800f522:	4940      	ldr	r1, [pc, #256]	; (800f624 <ip_reass_free_complete_datagram+0x138>)
 800f524:	483e      	ldr	r0, [pc, #248]	; (800f620 <ip_reass_free_complete_datagram+0x134>)
 800f526:	f000 ff0b 	bl	8010340 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	889b      	ldrh	r3, [r3, #4]
 800f536:	b29b      	uxth	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d12a      	bne.n	800f592 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	6858      	ldr	r0, [r3, #4]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	3308      	adds	r3, #8
 800f552:	2214      	movs	r2, #20
 800f554:	4619      	mov	r1, r3
 800f556:	f000 fedd 	bl	8010314 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f55a:	2101      	movs	r1, #1
 800f55c:	69b8      	ldr	r0, [r7, #24]
 800f55e:	f7ff fc47 	bl	800edf0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f562:	69b8      	ldr	r0, [r7, #24]
 800f564:	f7f8 fdc4 	bl	80080f0 <pbuf_clen>
 800f568:	4603      	mov	r3, r0
 800f56a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f56c:	8bfa      	ldrh	r2, [r7, #30]
 800f56e:	8a7b      	ldrh	r3, [r7, #18]
 800f570:	4413      	add	r3, r2
 800f572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f576:	db05      	blt.n	800f584 <ip_reass_free_complete_datagram+0x98>
 800f578:	4b27      	ldr	r3, [pc, #156]	; (800f618 <ip_reass_free_complete_datagram+0x12c>)
 800f57a:	22bc      	movs	r2, #188	; 0xbc
 800f57c:	492a      	ldr	r1, [pc, #168]	; (800f628 <ip_reass_free_complete_datagram+0x13c>)
 800f57e:	4828      	ldr	r0, [pc, #160]	; (800f620 <ip_reass_free_complete_datagram+0x134>)
 800f580:	f000 fede 	bl	8010340 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f584:	8bfa      	ldrh	r2, [r7, #30]
 800f586:	8a7b      	ldrh	r3, [r7, #18]
 800f588:	4413      	add	r3, r2
 800f58a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f58c:	69b8      	ldr	r0, [r7, #24]
 800f58e:	f7f8 fd27 	bl	8007fe0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f598:	e01f      	b.n	800f5da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7f8 fda0 	bl	80080f0 <pbuf_clen>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f5b4:	8bfa      	ldrh	r2, [r7, #30]
 800f5b6:	8a7b      	ldrh	r3, [r7, #18]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5be:	db05      	blt.n	800f5cc <ip_reass_free_complete_datagram+0xe0>
 800f5c0:	4b15      	ldr	r3, [pc, #84]	; (800f618 <ip_reass_free_complete_datagram+0x12c>)
 800f5c2:	22cc      	movs	r2, #204	; 0xcc
 800f5c4:	4918      	ldr	r1, [pc, #96]	; (800f628 <ip_reass_free_complete_datagram+0x13c>)
 800f5c6:	4816      	ldr	r0, [pc, #88]	; (800f620 <ip_reass_free_complete_datagram+0x134>)
 800f5c8:	f000 feba 	bl	8010340 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f5cc:	8bfa      	ldrh	r2, [r7, #30]
 800f5ce:	8a7b      	ldrh	r3, [r7, #18]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f7f8 fd03 	bl	8007fe0 <pbuf_free>
  while (p != NULL) {
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1dc      	bne.n	800f59a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f8c2 	bl	800f76c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f5e8:	4b10      	ldr	r3, [pc, #64]	; (800f62c <ip_reass_free_complete_datagram+0x140>)
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	8bfa      	ldrh	r2, [r7, #30]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d905      	bls.n	800f5fe <ip_reass_free_complete_datagram+0x112>
 800f5f2:	4b09      	ldr	r3, [pc, #36]	; (800f618 <ip_reass_free_complete_datagram+0x12c>)
 800f5f4:	22d2      	movs	r2, #210	; 0xd2
 800f5f6:	490e      	ldr	r1, [pc, #56]	; (800f630 <ip_reass_free_complete_datagram+0x144>)
 800f5f8:	4809      	ldr	r0, [pc, #36]	; (800f620 <ip_reass_free_complete_datagram+0x134>)
 800f5fa:	f000 fea1 	bl	8010340 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f5fe:	4b0b      	ldr	r3, [pc, #44]	; (800f62c <ip_reass_free_complete_datagram+0x140>)
 800f600:	881a      	ldrh	r2, [r3, #0]
 800f602:	8bfb      	ldrh	r3, [r7, #30]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	b29a      	uxth	r2, r3
 800f608:	4b08      	ldr	r3, [pc, #32]	; (800f62c <ip_reass_free_complete_datagram+0x140>)
 800f60a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f60c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	08013ab0 	.word	0x08013ab0
 800f61c:	08013aec 	.word	0x08013aec
 800f620:	08013af8 	.word	0x08013af8
 800f624:	08013b20 	.word	0x08013b20
 800f628:	08013b34 	.word	0x08013b34
 800f62c:	20000204 	.word	0x20000204
 800f630:	08013b54 	.word	0x08013b54

0800f634 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b08a      	sub	sp, #40	; 0x28
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f63e:	2300      	movs	r3, #0
 800f640:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f642:	2300      	movs	r3, #0
 800f644:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f646:	2300      	movs	r3, #0
 800f648:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f652:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <ip_reass_remove_oldest_datagram+0xc0>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f658:	e030      	b.n	800f6bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	695a      	ldr	r2, [r3, #20]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	429a      	cmp	r2, r3
 800f664:	d10c      	bne.n	800f680 <ip_reass_remove_oldest_datagram+0x4c>
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	699a      	ldr	r2, [r3, #24]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	691b      	ldr	r3, [r3, #16]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d106      	bne.n	800f680 <ip_reass_remove_oldest_datagram+0x4c>
 800f672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f674:	899a      	ldrh	r2, [r3, #12]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	889b      	ldrh	r3, [r3, #4]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d014      	beq.n	800f6aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	3301      	adds	r3, #1
 800f684:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d104      	bne.n	800f696 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	61bb      	str	r3, [r7, #24]
 800f694:	e009      	b.n	800f6aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f698:	7fda      	ldrb	r2, [r3, #31]
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	7fdb      	ldrb	r3, [r3, #31]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d803      	bhi.n	800f6aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1cb      	bne.n	800f65a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f6c2:	6a3b      	ldr	r3, [r7, #32]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d008      	beq.n	800f6da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f6c8:	69b9      	ldr	r1, [r7, #24]
 800f6ca:	6a38      	ldr	r0, [r7, #32]
 800f6cc:	f7ff ff0e 	bl	800f4ec <ip_reass_free_complete_datagram>
 800f6d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f6da:	697a      	ldr	r2, [r7, #20]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	da02      	bge.n	800f6e8 <ip_reass_remove_oldest_datagram+0xb4>
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	dcac      	bgt.n	800f642 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f6e8:	697b      	ldr	r3, [r7, #20]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3728      	adds	r7, #40	; 0x28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20000200 	.word	0x20000200

0800f6f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f702:	2004      	movs	r0, #4
 800f704:	f7f7 fe2e 	bl	8007364 <memp_malloc>
 800f708:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d110      	bne.n	800f732 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f710:	6839      	ldr	r1, [r7, #0]
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff ff8e 	bl	800f634 <ip_reass_remove_oldest_datagram>
 800f718:	4602      	mov	r2, r0
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	dc03      	bgt.n	800f728 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f720:	2004      	movs	r0, #4
 800f722:	f7f7 fe1f 	bl	8007364 <memp_malloc>
 800f726:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d101      	bne.n	800f732 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f72e:	2300      	movs	r3, #0
 800f730:	e016      	b.n	800f760 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f732:	2220      	movs	r2, #32
 800f734:	2100      	movs	r1, #0
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f000 fdfa 	bl	8010330 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	220f      	movs	r2, #15
 800f740:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f742:	4b09      	ldr	r3, [pc, #36]	; (800f768 <ip_reass_enqueue_new_datagram+0x70>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f74a:	4a07      	ldr	r2, [pc, #28]	; (800f768 <ip_reass_enqueue_new_datagram+0x70>)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	3308      	adds	r3, #8
 800f754:	2214      	movs	r2, #20
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fddb 	bl	8010314 <memcpy>
  return ipr;
 800f75e:	68fb      	ldr	r3, [r7, #12]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20000200 	.word	0x20000200

0800f76c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f776:	4b10      	ldr	r3, [pc, #64]	; (800f7b8 <ip_reass_dequeue_datagram+0x4c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d104      	bne.n	800f78a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a0c      	ldr	r2, [pc, #48]	; (800f7b8 <ip_reass_dequeue_datagram+0x4c>)
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	e00d      	b.n	800f7a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d106      	bne.n	800f79e <ip_reass_dequeue_datagram+0x32>
 800f790:	4b0a      	ldr	r3, [pc, #40]	; (800f7bc <ip_reass_dequeue_datagram+0x50>)
 800f792:	f240 1245 	movw	r2, #325	; 0x145
 800f796:	490a      	ldr	r1, [pc, #40]	; (800f7c0 <ip_reass_dequeue_datagram+0x54>)
 800f798:	480a      	ldr	r0, [pc, #40]	; (800f7c4 <ip_reass_dequeue_datagram+0x58>)
 800f79a:	f000 fdd1 	bl	8010340 <iprintf>
    prev->next = ipr->next;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f7a6:	6879      	ldr	r1, [r7, #4]
 800f7a8:	2004      	movs	r0, #4
 800f7aa:	f7f7 fe27 	bl	80073fc <memp_free>
}
 800f7ae:	bf00      	nop
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20000200 	.word	0x20000200
 800f7bc:	08013ab0 	.word	0x08013ab0
 800f7c0:	08013b78 	.word	0x08013b78
 800f7c4:	08013af8 	.word	0x08013af8

0800f7c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08c      	sub	sp, #48	; 0x30
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	885b      	ldrh	r3, [r3, #2]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f7 f965 	bl	8006ab8 <lwip_htons>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	f003 030f 	and.w	r3, r3, #15
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f800:	7e7b      	ldrb	r3, [r7, #25]
 800f802:	b29b      	uxth	r3, r3
 800f804:	8b7a      	ldrh	r2, [r7, #26]
 800f806:	429a      	cmp	r2, r3
 800f808:	d202      	bcs.n	800f810 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f80a:	f04f 33ff 	mov.w	r3, #4294967295
 800f80e:	e135      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f810:	7e7b      	ldrb	r3, [r7, #25]
 800f812:	b29b      	uxth	r3, r3
 800f814:	8b7a      	ldrh	r2, [r7, #26]
 800f816:	1ad3      	subs	r3, r2, r3
 800f818:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	88db      	ldrh	r3, [r3, #6]
 800f81e:	b29b      	uxth	r3, r3
 800f820:	4618      	mov	r0, r3
 800f822:	f7f7 f949 	bl	8006ab8 <lwip_htons>
 800f826:	4603      	mov	r3, r0
 800f828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	00db      	lsls	r3, r3, #3
 800f830:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	2200      	movs	r2, #0
 800f83c:	701a      	strb	r2, [r3, #0]
 800f83e:	2200      	movs	r2, #0
 800f840:	705a      	strb	r2, [r3, #1]
 800f842:	2200      	movs	r2, #0
 800f844:	709a      	strb	r2, [r3, #2]
 800f846:	2200      	movs	r2, #0
 800f848:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84c:	8afa      	ldrh	r2, [r7, #22]
 800f84e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f850:	8afa      	ldrh	r2, [r7, #22]
 800f852:	8b7b      	ldrh	r3, [r7, #26]
 800f854:	4413      	add	r3, r2
 800f856:	b29a      	uxth	r2, r3
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	88db      	ldrh	r3, [r3, #6]
 800f860:	b29b      	uxth	r3, r3
 800f862:	8afa      	ldrh	r2, [r7, #22]
 800f864:	429a      	cmp	r2, r3
 800f866:	d902      	bls.n	800f86e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f868:	f04f 33ff 	mov.w	r3, #4294967295
 800f86c:	e106      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	627b      	str	r3, [r7, #36]	; 0x24
 800f874:	e068      	b.n	800f948 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87e:	889b      	ldrh	r3, [r3, #4]
 800f880:	b29a      	uxth	r2, r3
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	889b      	ldrh	r3, [r3, #4]
 800f886:	b29b      	uxth	r3, r3
 800f888:	429a      	cmp	r2, r3
 800f88a:	d235      	bcs.n	800f8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f890:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	2b00      	cmp	r3, #0
 800f896:	d020      	beq.n	800f8da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	889b      	ldrh	r3, [r3, #4]
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a0:	88db      	ldrh	r3, [r3, #6]
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d307      	bcc.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	88db      	ldrh	r3, [r3, #6]
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	889b      	ldrh	r3, [r3, #4]
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d902      	bls.n	800f8be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8bc:	e0de      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c6:	88db      	ldrh	r3, [r3, #6]
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8cc:	889b      	ldrh	r3, [r3, #4]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d03d      	beq.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f8d8:	e03a      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	88db      	ldrh	r3, [r3, #6]
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	889b      	ldrh	r3, [r3, #4]
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d902      	bls.n	800f8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ee:	e0c5      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	605a      	str	r2, [r3, #4]
      break;
 800f8f6:	e02b      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fa:	889b      	ldrh	r3, [r3, #4]
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	889b      	ldrh	r3, [r3, #4]
 800f902:	b29b      	uxth	r3, r3
 800f904:	429a      	cmp	r2, r3
 800f906:	d102      	bne.n	800f90e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f908:	f04f 33ff 	mov.w	r3, #4294967295
 800f90c:	e0b6      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	889b      	ldrh	r3, [r3, #4]
 800f912:	b29a      	uxth	r2, r3
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	88db      	ldrh	r3, [r3, #6]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d202      	bcs.n	800f924 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f91e:	f04f 33ff 	mov.w	r3, #4294967295
 800f922:	e0ab      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f926:	2b00      	cmp	r3, #0
 800f928:	d009      	beq.n	800f93e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92c:	88db      	ldrh	r3, [r3, #6]
 800f92e:	b29a      	uxth	r2, r3
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	889b      	ldrh	r3, [r3, #4]
 800f934:	b29b      	uxth	r3, r3
 800f936:	429a      	cmp	r2, r3
 800f938:	d001      	beq.n	800f93e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d193      	bne.n	800f876 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f94e:	e000      	b.n	800f952 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f950:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f954:	2b00      	cmp	r3, #0
 800f956:	d12d      	bne.n	800f9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d01c      	beq.n	800f998 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f960:	88db      	ldrh	r3, [r3, #6]
 800f962:	b29a      	uxth	r2, r3
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	889b      	ldrh	r3, [r3, #4]
 800f968:	b29b      	uxth	r3, r3
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d906      	bls.n	800f97c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f96e:	4b45      	ldr	r3, [pc, #276]	; (800fa84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f970:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f974:	4944      	ldr	r1, [pc, #272]	; (800fa88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f976:	4845      	ldr	r0, [pc, #276]	; (800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f978:	f000 fce2 	bl	8010340 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	68ba      	ldr	r2, [r7, #8]
 800f980:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f984:	88db      	ldrh	r3, [r3, #6]
 800f986:	b29a      	uxth	r2, r3
 800f988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98a:	889b      	ldrh	r3, [r3, #4]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	429a      	cmp	r2, r3
 800f990:	d010      	beq.n	800f9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f992:	2300      	movs	r3, #0
 800f994:	623b      	str	r3, [r7, #32]
 800f996:	e00d      	b.n	800f9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d006      	beq.n	800f9ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f9a0:	4b38      	ldr	r3, [pc, #224]	; (800fa84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f9a2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f9a6:	493a      	ldr	r1, [pc, #232]	; (800fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f9a8:	4838      	ldr	r0, [pc, #224]	; (800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f9aa:	f000 fcc9 	bl	8010340 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d105      	bne.n	800f9c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	7f9b      	ldrb	r3, [r3, #30]
 800f9be:	f003 0301 	and.w	r3, r3, #1
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d059      	beq.n	800fa7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f9c6:	6a3b      	ldr	r3, [r7, #32]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d04f      	beq.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d006      	beq.n	800f9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	889b      	ldrh	r3, [r3, #4]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d002      	beq.n	800f9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	623b      	str	r3, [r7, #32]
 800f9e6:	e041      	b.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f9f2:	e012      	b.n	800fa1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fc:	88db      	ldrh	r3, [r3, #6]
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	889b      	ldrh	r3, [r3, #4]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d002      	beq.n	800fa10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	623b      	str	r3, [r7, #32]
            break;
 800fa0e:	e007      	b.n	800fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1e9      	bne.n	800f9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d022      	beq.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fa2e:	4b15      	ldr	r3, [pc, #84]	; (800fa84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa30:	f240 12df 	movw	r2, #479	; 0x1df
 800fa34:	4917      	ldr	r1, [pc, #92]	; (800fa94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fa36:	4815      	ldr	r0, [pc, #84]	; (800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa38:	f000 fc82 	bl	8010340 <iprintf>
          LWIP_ASSERT("sanity check",
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d106      	bne.n	800fa56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fa48:	4b0e      	ldr	r3, [pc, #56]	; (800fa84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fa4e:	4911      	ldr	r1, [pc, #68]	; (800fa94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fa50:	480e      	ldr	r0, [pc, #56]	; (800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa52:	f000 fc75 	bl	8010340 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fa5e:	4b09      	ldr	r3, [pc, #36]	; (800fa84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fa64:	490c      	ldr	r1, [pc, #48]	; (800fa98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fa66:	4809      	ldr	r0, [pc, #36]	; (800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa68:	f000 fc6a 	bl	8010340 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bf14      	ite	ne
 800fa72:	2301      	movne	r3, #1
 800fa74:	2300      	moveq	r3, #0
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	e000      	b.n	800fa7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3730      	adds	r7, #48	; 0x30
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	08013ab0 	.word	0x08013ab0
 800fa88:	08013b94 	.word	0x08013b94
 800fa8c:	08013af8 	.word	0x08013af8
 800fa90:	08013bb4 	.word	0x08013bb4
 800fa94:	08013bec 	.word	0x08013bec
 800fa98:	08013bfc 	.word	0x08013bfc

0800fa9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b08e      	sub	sp, #56	; 0x38
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 030f 	and.w	r3, r3, #15
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b14      	cmp	r3, #20
 800faba:	f040 8167 	bne.w	800fd8c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac0:	88db      	ldrh	r3, [r3, #6]
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7f6 fff7 	bl	8006ab8 <lwip_htons>
 800faca:	4603      	mov	r3, r0
 800facc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	885b      	ldrh	r3, [r3, #2]
 800fada:	b29b      	uxth	r3, r3
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f6 ffeb 	bl	8006ab8 <lwip_htons>
 800fae2:	4603      	mov	r3, r0
 800fae4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	f003 030f 	and.w	r3, r3, #15
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800faf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fafe:	429a      	cmp	r2, r3
 800fb00:	f0c0 8146 	bcc.w	800fd90 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fb04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f8 faed 	bl	80080f0 <pbuf_clen>
 800fb16:	4603      	mov	r3, r0
 800fb18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fb1a:	4b9f      	ldr	r3, [pc, #636]	; (800fd98 <ip4_reass+0x2fc>)
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	8c3b      	ldrh	r3, [r7, #32]
 800fb22:	4413      	add	r3, r2
 800fb24:	2b0a      	cmp	r3, #10
 800fb26:	dd10      	ble.n	800fb4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fb28:	8c3b      	ldrh	r3, [r7, #32]
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb2e:	f7ff fd81 	bl	800f634 <ip_reass_remove_oldest_datagram>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 812d 	beq.w	800fd94 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fb3a:	4b97      	ldr	r3, [pc, #604]	; (800fd98 <ip4_reass+0x2fc>)
 800fb3c:	881b      	ldrh	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	8c3b      	ldrh	r3, [r7, #32]
 800fb42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fb44:	2b0a      	cmp	r3, #10
 800fb46:	f300 8125 	bgt.w	800fd94 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fb4a:	4b94      	ldr	r3, [pc, #592]	; (800fd9c <ip4_reass+0x300>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	633b      	str	r3, [r7, #48]	; 0x30
 800fb50:	e015      	b.n	800fb7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	695a      	ldr	r2, [r3, #20]
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d10c      	bne.n	800fb78 <ip4_reass+0xdc>
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	699a      	ldr	r2, [r3, #24]
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d106      	bne.n	800fb78 <ip4_reass+0xdc>
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	899a      	ldrh	r2, [r3, #12]
 800fb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb70:	889b      	ldrh	r3, [r3, #4]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d006      	beq.n	800fb86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1e6      	bne.n	800fb52 <ip4_reass+0xb6>
 800fb84:	e000      	b.n	800fb88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fb86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d109      	bne.n	800fba2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fb8e:	8c3b      	ldrh	r3, [r7, #32]
 800fb90:	4619      	mov	r1, r3
 800fb92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb94:	f7ff fdb0 	bl	800f6f8 <ip_reass_enqueue_new_datagram>
 800fb98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d11c      	bne.n	800fbda <ip4_reass+0x13e>
      goto nullreturn;
 800fba0:	e109      	b.n	800fdb6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	88db      	ldrh	r3, [r3, #6]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f6 ff85 	bl	8006ab8 <lwip_htons>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d110      	bne.n	800fbda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	89db      	ldrh	r3, [r3, #14]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f6 ff7b 	bl	8006ab8 <lwip_htons>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d006      	beq.n	800fbda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbce:	3308      	adds	r3, #8
 800fbd0:	2214      	movs	r2, #20
 800fbd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f000 fb9d 	bl	8010314 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	88db      	ldrh	r3, [r3, #6]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	f003 0320 	and.w	r3, r3, #32
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	bf0c      	ite	eq
 800fbe8:	2301      	moveq	r3, #1
 800fbea:	2300      	movne	r3, #0
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00e      	beq.n	800fc14 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fbf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fbf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbfa:	4413      	add	r3, r2
 800fbfc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fbfe:	8b7a      	ldrh	r2, [r7, #26]
 800fc00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc02:	429a      	cmp	r2, r3
 800fc04:	f0c0 80a0 	bcc.w	800fd48 <ip4_reass+0x2ac>
 800fc08:	8b7b      	ldrh	r3, [r7, #26]
 800fc0a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	f200 809a 	bhi.w	800fd48 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fc14:	69fa      	ldr	r2, [r7, #28]
 800fc16:	6879      	ldr	r1, [r7, #4]
 800fc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc1a:	f7ff fdd5 	bl	800f7c8 <ip_reass_chain_frag_into_datagram_and_validate>
 800fc1e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc26:	f000 8091 	beq.w	800fd4c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fc2a:	4b5b      	ldr	r3, [pc, #364]	; (800fd98 <ip4_reass+0x2fc>)
 800fc2c:	881a      	ldrh	r2, [r3, #0]
 800fc2e:	8c3b      	ldrh	r3, [r7, #32]
 800fc30:	4413      	add	r3, r2
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	4b58      	ldr	r3, [pc, #352]	; (800fd98 <ip4_reass+0x2fc>)
 800fc36:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00d      	beq.n	800fc5a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fc3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fc40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc42:	4413      	add	r3, r2
 800fc44:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	8a7a      	ldrh	r2, [r7, #18]
 800fc4a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	7f9b      	ldrb	r3, [r3, #30]
 800fc50:	f043 0301 	orr.w	r3, r3, #1
 800fc54:	b2da      	uxtb	r2, r3
 800fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc58:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d171      	bne.n	800fd44 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc62:	8b9b      	ldrh	r3, [r3, #28]
 800fc64:	3314      	adds	r3, #20
 800fc66:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	2214      	movs	r2, #20
 800fc80:	4619      	mov	r1, r3
 800fc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc84:	f000 fb46 	bl	8010314 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fc88:	8a3b      	ldrh	r3, [r7, #16]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f6 ff14 	bl	8006ab8 <lwip_htons>
 800fc90:	4603      	mov	r3, r0
 800fc92:	461a      	mov	r2, r3
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	719a      	strb	r2, [r3, #6]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	2200      	movs	r2, #0
 800fca6:	729a      	strb	r2, [r3, #10]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fcb2:	e00d      	b.n	800fcd0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fcba:	2114      	movs	r1, #20
 800fcbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fcbe:	f7f8 f909 	bl	8007ed4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fcc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7f8 fa4d 	bl	8008164 <pbuf_cat>
      r = iprh->next_pbuf;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1ee      	bne.n	800fcb4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fcd6:	4b31      	ldr	r3, [pc, #196]	; (800fd9c <ip4_reass+0x300>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d102      	bne.n	800fce6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fce0:	2300      	movs	r3, #0
 800fce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fce4:	e010      	b.n	800fd08 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fce6:	4b2d      	ldr	r3, [pc, #180]	; (800fd9c <ip4_reass+0x300>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcec:	e007      	b.n	800fcfe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d006      	beq.n	800fd06 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d1f4      	bne.n	800fcee <ip4_reass+0x252>
 800fd04:	e000      	b.n	800fd08 <ip4_reass+0x26c>
          break;
 800fd06:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fd08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd0c:	f7ff fd2e 	bl	800f76c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7f8 f9ed 	bl	80080f0 <pbuf_clen>
 800fd16:	4603      	mov	r3, r0
 800fd18:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fd1a:	4b1f      	ldr	r3, [pc, #124]	; (800fd98 <ip4_reass+0x2fc>)
 800fd1c:	881b      	ldrh	r3, [r3, #0]
 800fd1e:	8c3a      	ldrh	r2, [r7, #32]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d906      	bls.n	800fd32 <ip4_reass+0x296>
 800fd24:	4b1e      	ldr	r3, [pc, #120]	; (800fda0 <ip4_reass+0x304>)
 800fd26:	f240 229b 	movw	r2, #667	; 0x29b
 800fd2a:	491e      	ldr	r1, [pc, #120]	; (800fda4 <ip4_reass+0x308>)
 800fd2c:	481e      	ldr	r0, [pc, #120]	; (800fda8 <ip4_reass+0x30c>)
 800fd2e:	f000 fb07 	bl	8010340 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fd32:	4b19      	ldr	r3, [pc, #100]	; (800fd98 <ip4_reass+0x2fc>)
 800fd34:	881a      	ldrh	r2, [r3, #0]
 800fd36:	8c3b      	ldrh	r3, [r7, #32]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	4b16      	ldr	r3, [pc, #88]	; (800fd98 <ip4_reass+0x2fc>)
 800fd3e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	e03c      	b.n	800fdbe <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fd44:	2300      	movs	r3, #0
 800fd46:	e03a      	b.n	800fdbe <ip4_reass+0x322>
      goto nullreturn_ipr;
 800fd48:	bf00      	nop
 800fd4a:	e000      	b.n	800fd4e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fd4c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <ip4_reass+0x2c6>
 800fd54:	4b12      	ldr	r3, [pc, #72]	; (800fda0 <ip4_reass+0x304>)
 800fd56:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fd5a:	4914      	ldr	r1, [pc, #80]	; (800fdac <ip4_reass+0x310>)
 800fd5c:	4812      	ldr	r0, [pc, #72]	; (800fda8 <ip4_reass+0x30c>)
 800fd5e:	f000 faef 	bl	8010340 <iprintf>
  if (ipr->p == NULL) {
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d124      	bne.n	800fdb4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fd6a:	4b0c      	ldr	r3, [pc, #48]	; (800fd9c <ip4_reass+0x300>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d006      	beq.n	800fd82 <ip4_reass+0x2e6>
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <ip4_reass+0x304>)
 800fd76:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fd7a:	490d      	ldr	r1, [pc, #52]	; (800fdb0 <ip4_reass+0x314>)
 800fd7c:	480a      	ldr	r0, [pc, #40]	; (800fda8 <ip4_reass+0x30c>)
 800fd7e:	f000 fadf 	bl	8010340 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fd82:	2100      	movs	r1, #0
 800fd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd86:	f7ff fcf1 	bl	800f76c <ip_reass_dequeue_datagram>
 800fd8a:	e014      	b.n	800fdb6 <ip4_reass+0x31a>
    goto nullreturn;
 800fd8c:	bf00      	nop
 800fd8e:	e012      	b.n	800fdb6 <ip4_reass+0x31a>
    goto nullreturn;
 800fd90:	bf00      	nop
 800fd92:	e010      	b.n	800fdb6 <ip4_reass+0x31a>
      goto nullreturn;
 800fd94:	bf00      	nop
 800fd96:	e00e      	b.n	800fdb6 <ip4_reass+0x31a>
 800fd98:	20000204 	.word	0x20000204
 800fd9c:	20000200 	.word	0x20000200
 800fda0:	08013ab0 	.word	0x08013ab0
 800fda4:	08013c20 	.word	0x08013c20
 800fda8:	08013af8 	.word	0x08013af8
 800fdac:	08013c3c 	.word	0x08013c3c
 800fdb0:	08013c48 	.word	0x08013c48
  }

nullreturn:
 800fdb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7f8 f912 	bl	8007fe0 <pbuf_free>
  return NULL;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3738      	adds	r7, #56	; 0x38
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop

0800fdc8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fdcc:	2005      	movs	r0, #5
 800fdce:	f7f7 fac9 	bl	8007364 <memp_malloc>
 800fdd2:	4603      	mov	r3, r0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d106      	bne.n	800fdf4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fde6:	4b07      	ldr	r3, [pc, #28]	; (800fe04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fde8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fdec:	4906      	ldr	r1, [pc, #24]	; (800fe08 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fdee:	4807      	ldr	r0, [pc, #28]	; (800fe0c <ip_frag_free_pbuf_custom_ref+0x34>)
 800fdf0:	f000 faa6 	bl	8010340 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fdf4:	6879      	ldr	r1, [r7, #4]
 800fdf6:	2005      	movs	r0, #5
 800fdf8:	f7f7 fb00 	bl	80073fc <memp_free>
}
 800fdfc:	bf00      	nop
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	08013ab0 	.word	0x08013ab0
 800fe08:	08013c68 	.word	0x08013c68
 800fe0c:	08013af8 	.word	0x08013af8

0800fe10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d106      	bne.n	800fe30 <ipfrag_free_pbuf_custom+0x20>
 800fe22:	4b11      	ldr	r3, [pc, #68]	; (800fe68 <ipfrag_free_pbuf_custom+0x58>)
 800fe24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fe28:	4910      	ldr	r1, [pc, #64]	; (800fe6c <ipfrag_free_pbuf_custom+0x5c>)
 800fe2a:	4811      	ldr	r0, [pc, #68]	; (800fe70 <ipfrag_free_pbuf_custom+0x60>)
 800fe2c:	f000 fa88 	bl	8010340 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d006      	beq.n	800fe46 <ipfrag_free_pbuf_custom+0x36>
 800fe38:	4b0b      	ldr	r3, [pc, #44]	; (800fe68 <ipfrag_free_pbuf_custom+0x58>)
 800fe3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fe3e:	490d      	ldr	r1, [pc, #52]	; (800fe74 <ipfrag_free_pbuf_custom+0x64>)
 800fe40:	480b      	ldr	r0, [pc, #44]	; (800fe70 <ipfrag_free_pbuf_custom+0x60>)
 800fe42:	f000 fa7d 	bl	8010340 <iprintf>
  if (pcr->original != NULL) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d004      	beq.n	800fe58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	695b      	ldr	r3, [r3, #20]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7f8 f8c4 	bl	8007fe0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f7ff ffbd 	bl	800fdd8 <ip_frag_free_pbuf_custom_ref>
}
 800fe5e:	bf00      	nop
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	08013ab0 	.word	0x08013ab0
 800fe6c:	08013c74 	.word	0x08013c74
 800fe70:	08013af8 	.word	0x08013af8
 800fe74:	08013c80 	.word	0x08013c80

0800fe78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b094      	sub	sp, #80	; 0x50
 800fe7c:	af02      	add	r7, sp, #8
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fe84:	2300      	movs	r3, #0
 800fe86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe8e:	3b14      	subs	r3, #20
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	da00      	bge.n	800fe96 <ip4_frag+0x1e>
 800fe94:	3307      	adds	r3, #7
 800fe96:	10db      	asrs	r3, r3, #3
 800fe98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fe9a:	2314      	movs	r3, #20
 800fe9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	f003 030f 	and.w	r3, r3, #15
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	2b14      	cmp	r3, #20
 800feb8:	d002      	beq.n	800fec0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800feba:	f06f 0305 	mvn.w	r3, #5
 800febe:	e110      	b.n	80100e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	2b13      	cmp	r3, #19
 800fec6:	d809      	bhi.n	800fedc <ip4_frag+0x64>
 800fec8:	4b88      	ldr	r3, [pc, #544]	; (80100ec <ip4_frag+0x274>)
 800feca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fece:	4988      	ldr	r1, [pc, #544]	; (80100f0 <ip4_frag+0x278>)
 800fed0:	4888      	ldr	r0, [pc, #544]	; (80100f4 <ip4_frag+0x27c>)
 800fed2:	f000 fa35 	bl	8010340 <iprintf>
 800fed6:	f06f 0305 	mvn.w	r3, #5
 800feda:	e102      	b.n	80100e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	88db      	ldrh	r3, [r3, #6]
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f6 fde8 	bl	8006ab8 <lwip_htons>
 800fee8:	4603      	mov	r3, r0
 800feea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800feec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800feee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fef2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fef6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fefc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	891b      	ldrh	r3, [r3, #8]
 800ff02:	3b14      	subs	r3, #20
 800ff04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ff08:	e0e1      	b.n	80100ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ff0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ff0c:	00db      	lsls	r3, r3, #3
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff14:	4293      	cmp	r3, r2
 800ff16:	bf28      	it	cs
 800ff18:	4613      	movcs	r3, r2
 800ff1a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ff1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff20:	2114      	movs	r1, #20
 800ff22:	200e      	movs	r0, #14
 800ff24:	f7f7 fd78 	bl	8007a18 <pbuf_alloc>
 800ff28:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 80d5 	beq.w	80100dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	895b      	ldrh	r3, [r3, #10]
 800ff36:	2b13      	cmp	r3, #19
 800ff38:	d806      	bhi.n	800ff48 <ip4_frag+0xd0>
 800ff3a:	4b6c      	ldr	r3, [pc, #432]	; (80100ec <ip4_frag+0x274>)
 800ff3c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ff40:	496d      	ldr	r1, [pc, #436]	; (80100f8 <ip4_frag+0x280>)
 800ff42:	486c      	ldr	r0, [pc, #432]	; (80100f4 <ip4_frag+0x27c>)
 800ff44:	f000 f9fc 	bl	8010340 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	2214      	movs	r2, #20
 800ff4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 f9df 	bl	8010314 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ff5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ff62:	e064      	b.n	801002e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	895a      	ldrh	r2, [r3, #10]
 800ff68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	895b      	ldrh	r3, [r3, #10]
 800ff72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d906      	bls.n	800ff86 <ip4_frag+0x10e>
 800ff78:	4b5c      	ldr	r3, [pc, #368]	; (80100ec <ip4_frag+0x274>)
 800ff7a:	f240 322d 	movw	r2, #813	; 0x32d
 800ff7e:	495f      	ldr	r1, [pc, #380]	; (80100fc <ip4_frag+0x284>)
 800ff80:	485c      	ldr	r0, [pc, #368]	; (80100f4 <ip4_frag+0x27c>)
 800ff82:	f000 f9dd 	bl	8010340 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ff86:	8bfa      	ldrh	r2, [r7, #30]
 800ff88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	bf28      	it	cs
 800ff90:	4613      	movcs	r3, r2
 800ff92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ff96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d105      	bne.n	800ffaa <ip4_frag+0x132>
        poff = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	60fb      	str	r3, [r7, #12]
        continue;
 800ffa8:	e041      	b.n	801002e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ffaa:	f7ff ff0d 	bl	800fdc8 <ip_frag_alloc_pbuf_custom_ref>
 800ffae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d103      	bne.n	800ffbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ffb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffb8:	f7f8 f812 	bl	8007fe0 <pbuf_free>
        goto memerr;
 800ffbc:	e08f      	b.n	80100de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ffbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ffc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ffcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ffd0:	9201      	str	r2, [sp, #4]
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2241      	movs	r2, #65	; 0x41
 800ffd8:	2000      	movs	r0, #0
 800ffda:	f7f7 fe47 	bl	8007c6c <pbuf_alloced_custom>
 800ffde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ffe6:	69b8      	ldr	r0, [r7, #24]
 800ffe8:	f7ff fef6 	bl	800fdd8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ffec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffee:	f7f7 fff7 	bl	8007fe0 <pbuf_free>
        goto memerr;
 800fff2:	e074      	b.n	80100de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f7f8 f893 	bl	8008120 <pbuf_ref>
      pcr->original = p;
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	4a3f      	ldr	r2, [pc, #252]	; (8010100 <ip4_frag+0x288>)
 8010004:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010006:	6979      	ldr	r1, [r7, #20]
 8010008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801000a:	f7f8 f8ab 	bl	8008164 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801000e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010012:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801001c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <ip4_frag+0x1b6>
        poff = 0;
 8010024:	2300      	movs	r3, #0
 8010026:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801002e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010032:	2b00      	cmp	r3, #0
 8010034:	d196      	bne.n	800ff64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010036:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801003c:	4413      	add	r3, r2
 801003e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010044:	f1a3 0213 	sub.w	r2, r3, #19
 8010048:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801004c:	429a      	cmp	r2, r3
 801004e:	bfcc      	ite	gt
 8010050:	2301      	movgt	r3, #1
 8010052:	2300      	movle	r3, #0
 8010054:	b2db      	uxtb	r3, r3
 8010056:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801005c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010060:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d002      	beq.n	801006e <ip4_frag+0x1f6>
 8010068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801006e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010074:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010076:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010078:	4618      	mov	r0, r3
 801007a:	f7f6 fd1d 	bl	8006ab8 <lwip_htons>
 801007e:	4603      	mov	r3, r0
 8010080:	461a      	mov	r2, r3
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010088:	3314      	adds	r3, #20
 801008a:	b29b      	uxth	r3, r3
 801008c:	4618      	mov	r0, r3
 801008e:	f7f6 fd13 	bl	8006ab8 <lwip_htons>
 8010092:	4603      	mov	r3, r0
 8010094:	461a      	mov	r2, r3
 8010096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010098:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	2200      	movs	r2, #0
 801009e:	729a      	strb	r2, [r3, #10]
 80100a0:	2200      	movs	r2, #0
 80100a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	695b      	ldr	r3, [r3, #20]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100ac:	68b8      	ldr	r0, [r7, #8]
 80100ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80100b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100b2:	f7f7 ff95 	bl	8007fe0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80100b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80100ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80100c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80100c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100c8:	4413      	add	r3, r2
 80100ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80100ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f47f af19 	bne.w	800ff0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	e002      	b.n	80100e2 <ip4_frag+0x26a>
      goto memerr;
 80100dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80100de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3748      	adds	r7, #72	; 0x48
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	08013ab0 	.word	0x08013ab0
 80100f0:	08013c8c 	.word	0x08013c8c
 80100f4:	08013af8 	.word	0x08013af8
 80100f8:	08013ca8 	.word	0x08013ca8
 80100fc:	08013cc8 	.word	0x08013cc8
 8010100:	0800fe11 	.word	0x0800fe11

08010104 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801010e:	230e      	movs	r3, #14
 8010110:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	895b      	ldrh	r3, [r3, #10]
 8010116:	2b0e      	cmp	r3, #14
 8010118:	d96e      	bls.n	80101f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	7bdb      	ldrb	r3, [r3, #15]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010128:	3301      	adds	r3, #1
 801012a:	b2da      	uxtb	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	7b1a      	ldrb	r2, [r3, #12]
 801013a:	7b5b      	ldrb	r3, [r3, #13]
 801013c:	021b      	lsls	r3, r3, #8
 801013e:	4313      	orrs	r3, r2
 8010140:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	f003 0301 	and.w	r3, r3, #1
 801014a:	2b00      	cmp	r3, #0
 801014c:	d023      	beq.n	8010196 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d10f      	bne.n	8010176 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	785b      	ldrb	r3, [r3, #1]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d11b      	bne.n	8010196 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010162:	2b5e      	cmp	r3, #94	; 0x5e
 8010164:	d117      	bne.n	8010196 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	7b5b      	ldrb	r3, [r3, #13]
 801016a:	f043 0310 	orr.w	r3, r3, #16
 801016e:	b2da      	uxtb	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	735a      	strb	r2, [r3, #13]
 8010174:	e00f      	b.n	8010196 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	2206      	movs	r2, #6
 801017a:	4928      	ldr	r1, [pc, #160]	; (801021c <ethernet_input+0x118>)
 801017c:	4618      	mov	r0, r3
 801017e:	f000 f8bb 	bl	80102f8 <memcmp>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d106      	bne.n	8010196 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	7b5b      	ldrb	r3, [r3, #13]
 801018c:	f043 0308 	orr.w	r3, r3, #8
 8010190:	b2da      	uxtb	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010196:	89fb      	ldrh	r3, [r7, #14]
 8010198:	2b08      	cmp	r3, #8
 801019a:	d003      	beq.n	80101a4 <ethernet_input+0xa0>
 801019c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80101a0:	d014      	beq.n	80101cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80101a2:	e032      	b.n	801020a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101aa:	f003 0308 	and.w	r3, r3, #8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d024      	beq.n	80101fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80101b2:	8afb      	ldrh	r3, [r7, #22]
 80101b4:	4619      	mov	r1, r3
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7f7 fe8c 	bl	8007ed4 <pbuf_remove_header>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d11e      	bne.n	8010200 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80101c2:	6839      	ldr	r1, [r7, #0]
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7fe ff27 	bl	800f018 <ip4_input>
      break;
 80101ca:	e013      	b.n	80101f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101d2:	f003 0308 	and.w	r3, r3, #8
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d014      	beq.n	8010204 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80101da:	8afb      	ldrh	r3, [r7, #22]
 80101dc:	4619      	mov	r1, r3
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7f7 fe78 	bl	8007ed4 <pbuf_remove_header>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10e      	bne.n	8010208 <ethernet_input+0x104>
        etharp_input(p, netif);
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7fe f8c7 	bl	800e380 <etharp_input>
      break;
 80101f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80101f4:	2300      	movs	r3, #0
 80101f6:	e00c      	b.n	8010212 <ethernet_input+0x10e>
    goto free_and_return;
 80101f8:	bf00      	nop
 80101fa:	e006      	b.n	801020a <ethernet_input+0x106>
        goto free_and_return;
 80101fc:	bf00      	nop
 80101fe:	e004      	b.n	801020a <ethernet_input+0x106>
        goto free_and_return;
 8010200:	bf00      	nop
 8010202:	e002      	b.n	801020a <ethernet_input+0x106>
        goto free_and_return;
 8010204:	bf00      	nop
 8010206:	e000      	b.n	801020a <ethernet_input+0x106>
        goto free_and_return;
 8010208:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7f7 fee8 	bl	8007fe0 <pbuf_free>
  return ERR_OK;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3718      	adds	r7, #24
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	08013e60 	.word	0x08013e60

08010220 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801022e:	8c3b      	ldrh	r3, [r7, #32]
 8010230:	4618      	mov	r0, r3
 8010232:	f7f6 fc41 	bl	8006ab8 <lwip_htons>
 8010236:	4603      	mov	r3, r0
 8010238:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801023a:	210e      	movs	r1, #14
 801023c:	68b8      	ldr	r0, [r7, #8]
 801023e:	f7f7 fe39 	bl	8007eb4 <pbuf_add_header>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d125      	bne.n	8010294 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	8afa      	ldrh	r2, [r7, #22]
 8010252:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	2206      	movs	r2, #6
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	4618      	mov	r0, r3
 801025c:	f000 f85a 	bl	8010314 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	3306      	adds	r3, #6
 8010264:	2206      	movs	r2, #6
 8010266:	6879      	ldr	r1, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	f000 f853 	bl	8010314 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010274:	2b06      	cmp	r3, #6
 8010276:	d006      	beq.n	8010286 <ethernet_output+0x66>
 8010278:	4b0a      	ldr	r3, [pc, #40]	; (80102a4 <ethernet_output+0x84>)
 801027a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801027e:	490a      	ldr	r1, [pc, #40]	; (80102a8 <ethernet_output+0x88>)
 8010280:	480a      	ldr	r0, [pc, #40]	; (80102ac <ethernet_output+0x8c>)
 8010282:	f000 f85d 	bl	8010340 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	68b9      	ldr	r1, [r7, #8]
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	4798      	blx	r3
 8010290:	4603      	mov	r3, r0
 8010292:	e002      	b.n	801029a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010294:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010296:	f06f 0301 	mvn.w	r3, #1
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	08013cd8 	.word	0x08013cd8
 80102a8:	08013d10 	.word	0x08013d10
 80102ac:	08013d44 	.word	0x08013d44

080102b0 <__libc_init_array>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	4d0d      	ldr	r5, [pc, #52]	; (80102e8 <__libc_init_array+0x38>)
 80102b4:	4c0d      	ldr	r4, [pc, #52]	; (80102ec <__libc_init_array+0x3c>)
 80102b6:	1b64      	subs	r4, r4, r5
 80102b8:	10a4      	asrs	r4, r4, #2
 80102ba:	2600      	movs	r6, #0
 80102bc:	42a6      	cmp	r6, r4
 80102be:	d109      	bne.n	80102d4 <__libc_init_array+0x24>
 80102c0:	4d0b      	ldr	r5, [pc, #44]	; (80102f0 <__libc_init_array+0x40>)
 80102c2:	4c0c      	ldr	r4, [pc, #48]	; (80102f4 <__libc_init_array+0x44>)
 80102c4:	f001 f856 	bl	8011374 <_init>
 80102c8:	1b64      	subs	r4, r4, r5
 80102ca:	10a4      	asrs	r4, r4, #2
 80102cc:	2600      	movs	r6, #0
 80102ce:	42a6      	cmp	r6, r4
 80102d0:	d105      	bne.n	80102de <__libc_init_array+0x2e>
 80102d2:	bd70      	pop	{r4, r5, r6, pc}
 80102d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d8:	4798      	blx	r3
 80102da:	3601      	adds	r6, #1
 80102dc:	e7ee      	b.n	80102bc <__libc_init_array+0xc>
 80102de:	f855 3b04 	ldr.w	r3, [r5], #4
 80102e2:	4798      	blx	r3
 80102e4:	3601      	adds	r6, #1
 80102e6:	e7f2      	b.n	80102ce <__libc_init_array+0x1e>
 80102e8:	08013fc4 	.word	0x08013fc4
 80102ec:	08013fc4 	.word	0x08013fc4
 80102f0:	08013fc4 	.word	0x08013fc4
 80102f4:	08013fc8 	.word	0x08013fc8

080102f8 <memcmp>:
 80102f8:	b530      	push	{r4, r5, lr}
 80102fa:	3901      	subs	r1, #1
 80102fc:	2400      	movs	r4, #0
 80102fe:	42a2      	cmp	r2, r4
 8010300:	d101      	bne.n	8010306 <memcmp+0xe>
 8010302:	2000      	movs	r0, #0
 8010304:	e005      	b.n	8010312 <memcmp+0x1a>
 8010306:	5d03      	ldrb	r3, [r0, r4]
 8010308:	3401      	adds	r4, #1
 801030a:	5d0d      	ldrb	r5, [r1, r4]
 801030c:	42ab      	cmp	r3, r5
 801030e:	d0f6      	beq.n	80102fe <memcmp+0x6>
 8010310:	1b58      	subs	r0, r3, r5
 8010312:	bd30      	pop	{r4, r5, pc}

08010314 <memcpy>:
 8010314:	440a      	add	r2, r1
 8010316:	4291      	cmp	r1, r2
 8010318:	f100 33ff 	add.w	r3, r0, #4294967295
 801031c:	d100      	bne.n	8010320 <memcpy+0xc>
 801031e:	4770      	bx	lr
 8010320:	b510      	push	{r4, lr}
 8010322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010326:	f803 4f01 	strb.w	r4, [r3, #1]!
 801032a:	4291      	cmp	r1, r2
 801032c:	d1f9      	bne.n	8010322 <memcpy+0xe>
 801032e:	bd10      	pop	{r4, pc}

08010330 <memset>:
 8010330:	4402      	add	r2, r0
 8010332:	4603      	mov	r3, r0
 8010334:	4293      	cmp	r3, r2
 8010336:	d100      	bne.n	801033a <memset+0xa>
 8010338:	4770      	bx	lr
 801033a:	f803 1b01 	strb.w	r1, [r3], #1
 801033e:	e7f9      	b.n	8010334 <memset+0x4>

08010340 <iprintf>:
 8010340:	b40f      	push	{r0, r1, r2, r3}
 8010342:	4b0a      	ldr	r3, [pc, #40]	; (801036c <iprintf+0x2c>)
 8010344:	b513      	push	{r0, r1, r4, lr}
 8010346:	681c      	ldr	r4, [r3, #0]
 8010348:	b124      	cbz	r4, 8010354 <iprintf+0x14>
 801034a:	69a3      	ldr	r3, [r4, #24]
 801034c:	b913      	cbnz	r3, 8010354 <iprintf+0x14>
 801034e:	4620      	mov	r0, r4
 8010350:	f000 f8c4 	bl	80104dc <__sinit>
 8010354:	ab05      	add	r3, sp, #20
 8010356:	9a04      	ldr	r2, [sp, #16]
 8010358:	68a1      	ldr	r1, [r4, #8]
 801035a:	9301      	str	r3, [sp, #4]
 801035c:	4620      	mov	r0, r4
 801035e:	f000 fa4b 	bl	80107f8 <_vfiprintf_r>
 8010362:	b002      	add	sp, #8
 8010364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010368:	b004      	add	sp, #16
 801036a:	4770      	bx	lr
 801036c:	20000014 	.word	0x20000014

08010370 <rand>:
 8010370:	4b17      	ldr	r3, [pc, #92]	; (80103d0 <rand+0x60>)
 8010372:	b510      	push	{r4, lr}
 8010374:	681c      	ldr	r4, [r3, #0]
 8010376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010378:	b9b3      	cbnz	r3, 80103a8 <rand+0x38>
 801037a:	2018      	movs	r0, #24
 801037c:	f000 f960 	bl	8010640 <malloc>
 8010380:	63a0      	str	r0, [r4, #56]	; 0x38
 8010382:	b928      	cbnz	r0, 8010390 <rand+0x20>
 8010384:	4602      	mov	r2, r0
 8010386:	4b13      	ldr	r3, [pc, #76]	; (80103d4 <rand+0x64>)
 8010388:	4813      	ldr	r0, [pc, #76]	; (80103d8 <rand+0x68>)
 801038a:	214e      	movs	r1, #78	; 0x4e
 801038c:	f000 f830 	bl	80103f0 <__assert_func>
 8010390:	4a12      	ldr	r2, [pc, #72]	; (80103dc <rand+0x6c>)
 8010392:	4b13      	ldr	r3, [pc, #76]	; (80103e0 <rand+0x70>)
 8010394:	e9c0 2300 	strd	r2, r3, [r0]
 8010398:	4b12      	ldr	r3, [pc, #72]	; (80103e4 <rand+0x74>)
 801039a:	6083      	str	r3, [r0, #8]
 801039c:	230b      	movs	r3, #11
 801039e:	8183      	strh	r3, [r0, #12]
 80103a0:	2201      	movs	r2, #1
 80103a2:	2300      	movs	r3, #0
 80103a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80103a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80103aa:	480f      	ldr	r0, [pc, #60]	; (80103e8 <rand+0x78>)
 80103ac:	690a      	ldr	r2, [r1, #16]
 80103ae:	694b      	ldr	r3, [r1, #20]
 80103b0:	4c0e      	ldr	r4, [pc, #56]	; (80103ec <rand+0x7c>)
 80103b2:	4350      	muls	r0, r2
 80103b4:	fb04 0003 	mla	r0, r4, r3, r0
 80103b8:	fba2 3404 	umull	r3, r4, r2, r4
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	4404      	add	r4, r0
 80103c0:	f144 0000 	adc.w	r0, r4, #0
 80103c4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80103c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	bf00      	nop
 80103d0:	20000014 	.word	0x20000014
 80103d4:	08013e74 	.word	0x08013e74
 80103d8:	08013e8b 	.word	0x08013e8b
 80103dc:	abcd330e 	.word	0xabcd330e
 80103e0:	e66d1234 	.word	0xe66d1234
 80103e4:	0005deec 	.word	0x0005deec
 80103e8:	5851f42d 	.word	0x5851f42d
 80103ec:	4c957f2d 	.word	0x4c957f2d

080103f0 <__assert_func>:
 80103f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103f2:	4614      	mov	r4, r2
 80103f4:	461a      	mov	r2, r3
 80103f6:	4b09      	ldr	r3, [pc, #36]	; (801041c <__assert_func+0x2c>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4605      	mov	r5, r0
 80103fc:	68d8      	ldr	r0, [r3, #12]
 80103fe:	b14c      	cbz	r4, 8010414 <__assert_func+0x24>
 8010400:	4b07      	ldr	r3, [pc, #28]	; (8010420 <__assert_func+0x30>)
 8010402:	9100      	str	r1, [sp, #0]
 8010404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010408:	4906      	ldr	r1, [pc, #24]	; (8010424 <__assert_func+0x34>)
 801040a:	462b      	mov	r3, r5
 801040c:	f000 f8e4 	bl	80105d8 <fiprintf>
 8010410:	f000 fddc 	bl	8010fcc <abort>
 8010414:	4b04      	ldr	r3, [pc, #16]	; (8010428 <__assert_func+0x38>)
 8010416:	461c      	mov	r4, r3
 8010418:	e7f3      	b.n	8010402 <__assert_func+0x12>
 801041a:	bf00      	nop
 801041c:	20000014 	.word	0x20000014
 8010420:	08013eea 	.word	0x08013eea
 8010424:	08013ef7 	.word	0x08013ef7
 8010428:	08013f25 	.word	0x08013f25

0801042c <std>:
 801042c:	2300      	movs	r3, #0
 801042e:	b510      	push	{r4, lr}
 8010430:	4604      	mov	r4, r0
 8010432:	e9c0 3300 	strd	r3, r3, [r0]
 8010436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801043a:	6083      	str	r3, [r0, #8]
 801043c:	8181      	strh	r1, [r0, #12]
 801043e:	6643      	str	r3, [r0, #100]	; 0x64
 8010440:	81c2      	strh	r2, [r0, #14]
 8010442:	6183      	str	r3, [r0, #24]
 8010444:	4619      	mov	r1, r3
 8010446:	2208      	movs	r2, #8
 8010448:	305c      	adds	r0, #92	; 0x5c
 801044a:	f7ff ff71 	bl	8010330 <memset>
 801044e:	4b05      	ldr	r3, [pc, #20]	; (8010464 <std+0x38>)
 8010450:	6263      	str	r3, [r4, #36]	; 0x24
 8010452:	4b05      	ldr	r3, [pc, #20]	; (8010468 <std+0x3c>)
 8010454:	62a3      	str	r3, [r4, #40]	; 0x28
 8010456:	4b05      	ldr	r3, [pc, #20]	; (801046c <std+0x40>)
 8010458:	62e3      	str	r3, [r4, #44]	; 0x2c
 801045a:	4b05      	ldr	r3, [pc, #20]	; (8010470 <std+0x44>)
 801045c:	6224      	str	r4, [r4, #32]
 801045e:	6323      	str	r3, [r4, #48]	; 0x30
 8010460:	bd10      	pop	{r4, pc}
 8010462:	bf00      	nop
 8010464:	08010da1 	.word	0x08010da1
 8010468:	08010dc3 	.word	0x08010dc3
 801046c:	08010dfb 	.word	0x08010dfb
 8010470:	08010e1f 	.word	0x08010e1f

08010474 <_cleanup_r>:
 8010474:	4901      	ldr	r1, [pc, #4]	; (801047c <_cleanup_r+0x8>)
 8010476:	f000 b8c1 	b.w	80105fc <_fwalk_reent>
 801047a:	bf00      	nop
 801047c:	08011109 	.word	0x08011109

08010480 <__sfmoreglue>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	1e4a      	subs	r2, r1, #1
 8010484:	2568      	movs	r5, #104	; 0x68
 8010486:	4355      	muls	r5, r2
 8010488:	460e      	mov	r6, r1
 801048a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801048e:	f000 f92f 	bl	80106f0 <_malloc_r>
 8010492:	4604      	mov	r4, r0
 8010494:	b140      	cbz	r0, 80104a8 <__sfmoreglue+0x28>
 8010496:	2100      	movs	r1, #0
 8010498:	e9c0 1600 	strd	r1, r6, [r0]
 801049c:	300c      	adds	r0, #12
 801049e:	60a0      	str	r0, [r4, #8]
 80104a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80104a4:	f7ff ff44 	bl	8010330 <memset>
 80104a8:	4620      	mov	r0, r4
 80104aa:	bd70      	pop	{r4, r5, r6, pc}

080104ac <__sfp_lock_acquire>:
 80104ac:	4801      	ldr	r0, [pc, #4]	; (80104b4 <__sfp_lock_acquire+0x8>)
 80104ae:	f000 b8c5 	b.w	801063c <__retarget_lock_acquire_recursive>
 80104b2:	bf00      	nop
 80104b4:	20005b7c 	.word	0x20005b7c

080104b8 <__sfp_lock_release>:
 80104b8:	4801      	ldr	r0, [pc, #4]	; (80104c0 <__sfp_lock_release+0x8>)
 80104ba:	f000 b8c0 	b.w	801063e <__retarget_lock_release_recursive>
 80104be:	bf00      	nop
 80104c0:	20005b7c 	.word	0x20005b7c

080104c4 <__sinit_lock_acquire>:
 80104c4:	4801      	ldr	r0, [pc, #4]	; (80104cc <__sinit_lock_acquire+0x8>)
 80104c6:	f000 b8b9 	b.w	801063c <__retarget_lock_acquire_recursive>
 80104ca:	bf00      	nop
 80104cc:	20005b77 	.word	0x20005b77

080104d0 <__sinit_lock_release>:
 80104d0:	4801      	ldr	r0, [pc, #4]	; (80104d8 <__sinit_lock_release+0x8>)
 80104d2:	f000 b8b4 	b.w	801063e <__retarget_lock_release_recursive>
 80104d6:	bf00      	nop
 80104d8:	20005b77 	.word	0x20005b77

080104dc <__sinit>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	4604      	mov	r4, r0
 80104e0:	f7ff fff0 	bl	80104c4 <__sinit_lock_acquire>
 80104e4:	69a3      	ldr	r3, [r4, #24]
 80104e6:	b11b      	cbz	r3, 80104f0 <__sinit+0x14>
 80104e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ec:	f7ff bff0 	b.w	80104d0 <__sinit_lock_release>
 80104f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104f4:	6523      	str	r3, [r4, #80]	; 0x50
 80104f6:	4b13      	ldr	r3, [pc, #76]	; (8010544 <__sinit+0x68>)
 80104f8:	4a13      	ldr	r2, [pc, #76]	; (8010548 <__sinit+0x6c>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80104fe:	42a3      	cmp	r3, r4
 8010500:	bf04      	itt	eq
 8010502:	2301      	moveq	r3, #1
 8010504:	61a3      	streq	r3, [r4, #24]
 8010506:	4620      	mov	r0, r4
 8010508:	f000 f820 	bl	801054c <__sfp>
 801050c:	6060      	str	r0, [r4, #4]
 801050e:	4620      	mov	r0, r4
 8010510:	f000 f81c 	bl	801054c <__sfp>
 8010514:	60a0      	str	r0, [r4, #8]
 8010516:	4620      	mov	r0, r4
 8010518:	f000 f818 	bl	801054c <__sfp>
 801051c:	2200      	movs	r2, #0
 801051e:	60e0      	str	r0, [r4, #12]
 8010520:	2104      	movs	r1, #4
 8010522:	6860      	ldr	r0, [r4, #4]
 8010524:	f7ff ff82 	bl	801042c <std>
 8010528:	68a0      	ldr	r0, [r4, #8]
 801052a:	2201      	movs	r2, #1
 801052c:	2109      	movs	r1, #9
 801052e:	f7ff ff7d 	bl	801042c <std>
 8010532:	68e0      	ldr	r0, [r4, #12]
 8010534:	2202      	movs	r2, #2
 8010536:	2112      	movs	r1, #18
 8010538:	f7ff ff78 	bl	801042c <std>
 801053c:	2301      	movs	r3, #1
 801053e:	61a3      	str	r3, [r4, #24]
 8010540:	e7d2      	b.n	80104e8 <__sinit+0xc>
 8010542:	bf00      	nop
 8010544:	08013e70 	.word	0x08013e70
 8010548:	08010475 	.word	0x08010475

0801054c <__sfp>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	4607      	mov	r7, r0
 8010550:	f7ff ffac 	bl	80104ac <__sfp_lock_acquire>
 8010554:	4b1e      	ldr	r3, [pc, #120]	; (80105d0 <__sfp+0x84>)
 8010556:	681e      	ldr	r6, [r3, #0]
 8010558:	69b3      	ldr	r3, [r6, #24]
 801055a:	b913      	cbnz	r3, 8010562 <__sfp+0x16>
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff ffbd 	bl	80104dc <__sinit>
 8010562:	3648      	adds	r6, #72	; 0x48
 8010564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010568:	3b01      	subs	r3, #1
 801056a:	d503      	bpl.n	8010574 <__sfp+0x28>
 801056c:	6833      	ldr	r3, [r6, #0]
 801056e:	b30b      	cbz	r3, 80105b4 <__sfp+0x68>
 8010570:	6836      	ldr	r6, [r6, #0]
 8010572:	e7f7      	b.n	8010564 <__sfp+0x18>
 8010574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010578:	b9d5      	cbnz	r5, 80105b0 <__sfp+0x64>
 801057a:	4b16      	ldr	r3, [pc, #88]	; (80105d4 <__sfp+0x88>)
 801057c:	60e3      	str	r3, [r4, #12]
 801057e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010582:	6665      	str	r5, [r4, #100]	; 0x64
 8010584:	f000 f859 	bl	801063a <__retarget_lock_init_recursive>
 8010588:	f7ff ff96 	bl	80104b8 <__sfp_lock_release>
 801058c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010594:	6025      	str	r5, [r4, #0]
 8010596:	61a5      	str	r5, [r4, #24]
 8010598:	2208      	movs	r2, #8
 801059a:	4629      	mov	r1, r5
 801059c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80105a0:	f7ff fec6 	bl	8010330 <memset>
 80105a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80105a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80105ac:	4620      	mov	r0, r4
 80105ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b0:	3468      	adds	r4, #104	; 0x68
 80105b2:	e7d9      	b.n	8010568 <__sfp+0x1c>
 80105b4:	2104      	movs	r1, #4
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7ff ff62 	bl	8010480 <__sfmoreglue>
 80105bc:	4604      	mov	r4, r0
 80105be:	6030      	str	r0, [r6, #0]
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d1d5      	bne.n	8010570 <__sfp+0x24>
 80105c4:	f7ff ff78 	bl	80104b8 <__sfp_lock_release>
 80105c8:	230c      	movs	r3, #12
 80105ca:	603b      	str	r3, [r7, #0]
 80105cc:	e7ee      	b.n	80105ac <__sfp+0x60>
 80105ce:	bf00      	nop
 80105d0:	08013e70 	.word	0x08013e70
 80105d4:	ffff0001 	.word	0xffff0001

080105d8 <fiprintf>:
 80105d8:	b40e      	push	{r1, r2, r3}
 80105da:	b503      	push	{r0, r1, lr}
 80105dc:	4601      	mov	r1, r0
 80105de:	ab03      	add	r3, sp, #12
 80105e0:	4805      	ldr	r0, [pc, #20]	; (80105f8 <fiprintf+0x20>)
 80105e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e6:	6800      	ldr	r0, [r0, #0]
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	f000 f905 	bl	80107f8 <_vfiprintf_r>
 80105ee:	b002      	add	sp, #8
 80105f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105f4:	b003      	add	sp, #12
 80105f6:	4770      	bx	lr
 80105f8:	20000014 	.word	0x20000014

080105fc <_fwalk_reent>:
 80105fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010600:	4606      	mov	r6, r0
 8010602:	4688      	mov	r8, r1
 8010604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010608:	2700      	movs	r7, #0
 801060a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801060e:	f1b9 0901 	subs.w	r9, r9, #1
 8010612:	d505      	bpl.n	8010620 <_fwalk_reent+0x24>
 8010614:	6824      	ldr	r4, [r4, #0]
 8010616:	2c00      	cmp	r4, #0
 8010618:	d1f7      	bne.n	801060a <_fwalk_reent+0xe>
 801061a:	4638      	mov	r0, r7
 801061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010620:	89ab      	ldrh	r3, [r5, #12]
 8010622:	2b01      	cmp	r3, #1
 8010624:	d907      	bls.n	8010636 <_fwalk_reent+0x3a>
 8010626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801062a:	3301      	adds	r3, #1
 801062c:	d003      	beq.n	8010636 <_fwalk_reent+0x3a>
 801062e:	4629      	mov	r1, r5
 8010630:	4630      	mov	r0, r6
 8010632:	47c0      	blx	r8
 8010634:	4307      	orrs	r7, r0
 8010636:	3568      	adds	r5, #104	; 0x68
 8010638:	e7e9      	b.n	801060e <_fwalk_reent+0x12>

0801063a <__retarget_lock_init_recursive>:
 801063a:	4770      	bx	lr

0801063c <__retarget_lock_acquire_recursive>:
 801063c:	4770      	bx	lr

0801063e <__retarget_lock_release_recursive>:
 801063e:	4770      	bx	lr

08010640 <malloc>:
 8010640:	4b02      	ldr	r3, [pc, #8]	; (801064c <malloc+0xc>)
 8010642:	4601      	mov	r1, r0
 8010644:	6818      	ldr	r0, [r3, #0]
 8010646:	f000 b853 	b.w	80106f0 <_malloc_r>
 801064a:	bf00      	nop
 801064c:	20000014 	.word	0x20000014

08010650 <_free_r>:
 8010650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010652:	2900      	cmp	r1, #0
 8010654:	d048      	beq.n	80106e8 <_free_r+0x98>
 8010656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801065a:	9001      	str	r0, [sp, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f1a1 0404 	sub.w	r4, r1, #4
 8010662:	bfb8      	it	lt
 8010664:	18e4      	addlt	r4, r4, r3
 8010666:	f000 fe01 	bl	801126c <__malloc_lock>
 801066a:	4a20      	ldr	r2, [pc, #128]	; (80106ec <_free_r+0x9c>)
 801066c:	9801      	ldr	r0, [sp, #4]
 801066e:	6813      	ldr	r3, [r2, #0]
 8010670:	4615      	mov	r5, r2
 8010672:	b933      	cbnz	r3, 8010682 <_free_r+0x32>
 8010674:	6063      	str	r3, [r4, #4]
 8010676:	6014      	str	r4, [r2, #0]
 8010678:	b003      	add	sp, #12
 801067a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801067e:	f000 bdfb 	b.w	8011278 <__malloc_unlock>
 8010682:	42a3      	cmp	r3, r4
 8010684:	d90b      	bls.n	801069e <_free_r+0x4e>
 8010686:	6821      	ldr	r1, [r4, #0]
 8010688:	1862      	adds	r2, r4, r1
 801068a:	4293      	cmp	r3, r2
 801068c:	bf04      	itt	eq
 801068e:	681a      	ldreq	r2, [r3, #0]
 8010690:	685b      	ldreq	r3, [r3, #4]
 8010692:	6063      	str	r3, [r4, #4]
 8010694:	bf04      	itt	eq
 8010696:	1852      	addeq	r2, r2, r1
 8010698:	6022      	streq	r2, [r4, #0]
 801069a:	602c      	str	r4, [r5, #0]
 801069c:	e7ec      	b.n	8010678 <_free_r+0x28>
 801069e:	461a      	mov	r2, r3
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	b10b      	cbz	r3, 80106a8 <_free_r+0x58>
 80106a4:	42a3      	cmp	r3, r4
 80106a6:	d9fa      	bls.n	801069e <_free_r+0x4e>
 80106a8:	6811      	ldr	r1, [r2, #0]
 80106aa:	1855      	adds	r5, r2, r1
 80106ac:	42a5      	cmp	r5, r4
 80106ae:	d10b      	bne.n	80106c8 <_free_r+0x78>
 80106b0:	6824      	ldr	r4, [r4, #0]
 80106b2:	4421      	add	r1, r4
 80106b4:	1854      	adds	r4, r2, r1
 80106b6:	42a3      	cmp	r3, r4
 80106b8:	6011      	str	r1, [r2, #0]
 80106ba:	d1dd      	bne.n	8010678 <_free_r+0x28>
 80106bc:	681c      	ldr	r4, [r3, #0]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	6053      	str	r3, [r2, #4]
 80106c2:	4421      	add	r1, r4
 80106c4:	6011      	str	r1, [r2, #0]
 80106c6:	e7d7      	b.n	8010678 <_free_r+0x28>
 80106c8:	d902      	bls.n	80106d0 <_free_r+0x80>
 80106ca:	230c      	movs	r3, #12
 80106cc:	6003      	str	r3, [r0, #0]
 80106ce:	e7d3      	b.n	8010678 <_free_r+0x28>
 80106d0:	6825      	ldr	r5, [r4, #0]
 80106d2:	1961      	adds	r1, r4, r5
 80106d4:	428b      	cmp	r3, r1
 80106d6:	bf04      	itt	eq
 80106d8:	6819      	ldreq	r1, [r3, #0]
 80106da:	685b      	ldreq	r3, [r3, #4]
 80106dc:	6063      	str	r3, [r4, #4]
 80106de:	bf04      	itt	eq
 80106e0:	1949      	addeq	r1, r1, r5
 80106e2:	6021      	streq	r1, [r4, #0]
 80106e4:	6054      	str	r4, [r2, #4]
 80106e6:	e7c7      	b.n	8010678 <_free_r+0x28>
 80106e8:	b003      	add	sp, #12
 80106ea:	bd30      	pop	{r4, r5, pc}
 80106ec:	20000208 	.word	0x20000208

080106f0 <_malloc_r>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	1ccd      	adds	r5, r1, #3
 80106f4:	f025 0503 	bic.w	r5, r5, #3
 80106f8:	3508      	adds	r5, #8
 80106fa:	2d0c      	cmp	r5, #12
 80106fc:	bf38      	it	cc
 80106fe:	250c      	movcc	r5, #12
 8010700:	2d00      	cmp	r5, #0
 8010702:	4606      	mov	r6, r0
 8010704:	db01      	blt.n	801070a <_malloc_r+0x1a>
 8010706:	42a9      	cmp	r1, r5
 8010708:	d903      	bls.n	8010712 <_malloc_r+0x22>
 801070a:	230c      	movs	r3, #12
 801070c:	6033      	str	r3, [r6, #0]
 801070e:	2000      	movs	r0, #0
 8010710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010712:	f000 fdab 	bl	801126c <__malloc_lock>
 8010716:	4921      	ldr	r1, [pc, #132]	; (801079c <_malloc_r+0xac>)
 8010718:	680a      	ldr	r2, [r1, #0]
 801071a:	4614      	mov	r4, r2
 801071c:	b99c      	cbnz	r4, 8010746 <_malloc_r+0x56>
 801071e:	4f20      	ldr	r7, [pc, #128]	; (80107a0 <_malloc_r+0xb0>)
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	b923      	cbnz	r3, 801072e <_malloc_r+0x3e>
 8010724:	4621      	mov	r1, r4
 8010726:	4630      	mov	r0, r6
 8010728:	f000 fb2a 	bl	8010d80 <_sbrk_r>
 801072c:	6038      	str	r0, [r7, #0]
 801072e:	4629      	mov	r1, r5
 8010730:	4630      	mov	r0, r6
 8010732:	f000 fb25 	bl	8010d80 <_sbrk_r>
 8010736:	1c43      	adds	r3, r0, #1
 8010738:	d123      	bne.n	8010782 <_malloc_r+0x92>
 801073a:	230c      	movs	r3, #12
 801073c:	6033      	str	r3, [r6, #0]
 801073e:	4630      	mov	r0, r6
 8010740:	f000 fd9a 	bl	8011278 <__malloc_unlock>
 8010744:	e7e3      	b.n	801070e <_malloc_r+0x1e>
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	1b5b      	subs	r3, r3, r5
 801074a:	d417      	bmi.n	801077c <_malloc_r+0x8c>
 801074c:	2b0b      	cmp	r3, #11
 801074e:	d903      	bls.n	8010758 <_malloc_r+0x68>
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	441c      	add	r4, r3
 8010754:	6025      	str	r5, [r4, #0]
 8010756:	e004      	b.n	8010762 <_malloc_r+0x72>
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	42a2      	cmp	r2, r4
 801075c:	bf0c      	ite	eq
 801075e:	600b      	streq	r3, [r1, #0]
 8010760:	6053      	strne	r3, [r2, #4]
 8010762:	4630      	mov	r0, r6
 8010764:	f000 fd88 	bl	8011278 <__malloc_unlock>
 8010768:	f104 000b 	add.w	r0, r4, #11
 801076c:	1d23      	adds	r3, r4, #4
 801076e:	f020 0007 	bic.w	r0, r0, #7
 8010772:	1ac2      	subs	r2, r0, r3
 8010774:	d0cc      	beq.n	8010710 <_malloc_r+0x20>
 8010776:	1a1b      	subs	r3, r3, r0
 8010778:	50a3      	str	r3, [r4, r2]
 801077a:	e7c9      	b.n	8010710 <_malloc_r+0x20>
 801077c:	4622      	mov	r2, r4
 801077e:	6864      	ldr	r4, [r4, #4]
 8010780:	e7cc      	b.n	801071c <_malloc_r+0x2c>
 8010782:	1cc4      	adds	r4, r0, #3
 8010784:	f024 0403 	bic.w	r4, r4, #3
 8010788:	42a0      	cmp	r0, r4
 801078a:	d0e3      	beq.n	8010754 <_malloc_r+0x64>
 801078c:	1a21      	subs	r1, r4, r0
 801078e:	4630      	mov	r0, r6
 8010790:	f000 faf6 	bl	8010d80 <_sbrk_r>
 8010794:	3001      	adds	r0, #1
 8010796:	d1dd      	bne.n	8010754 <_malloc_r+0x64>
 8010798:	e7cf      	b.n	801073a <_malloc_r+0x4a>
 801079a:	bf00      	nop
 801079c:	20000208 	.word	0x20000208
 80107a0:	2000020c 	.word	0x2000020c

080107a4 <__sfputc_r>:
 80107a4:	6893      	ldr	r3, [r2, #8]
 80107a6:	3b01      	subs	r3, #1
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	b410      	push	{r4}
 80107ac:	6093      	str	r3, [r2, #8]
 80107ae:	da08      	bge.n	80107c2 <__sfputc_r+0x1e>
 80107b0:	6994      	ldr	r4, [r2, #24]
 80107b2:	42a3      	cmp	r3, r4
 80107b4:	db01      	blt.n	80107ba <__sfputc_r+0x16>
 80107b6:	290a      	cmp	r1, #10
 80107b8:	d103      	bne.n	80107c2 <__sfputc_r+0x1e>
 80107ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107be:	f000 bb33 	b.w	8010e28 <__swbuf_r>
 80107c2:	6813      	ldr	r3, [r2, #0]
 80107c4:	1c58      	adds	r0, r3, #1
 80107c6:	6010      	str	r0, [r2, #0]
 80107c8:	7019      	strb	r1, [r3, #0]
 80107ca:	4608      	mov	r0, r1
 80107cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <__sfputs_r>:
 80107d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d4:	4606      	mov	r6, r0
 80107d6:	460f      	mov	r7, r1
 80107d8:	4614      	mov	r4, r2
 80107da:	18d5      	adds	r5, r2, r3
 80107dc:	42ac      	cmp	r4, r5
 80107de:	d101      	bne.n	80107e4 <__sfputs_r+0x12>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e007      	b.n	80107f4 <__sfputs_r+0x22>
 80107e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e8:	463a      	mov	r2, r7
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7ff ffda 	bl	80107a4 <__sfputc_r>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d1f3      	bne.n	80107dc <__sfputs_r+0xa>
 80107f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107f8 <_vfiprintf_r>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	460d      	mov	r5, r1
 80107fe:	b09d      	sub	sp, #116	; 0x74
 8010800:	4614      	mov	r4, r2
 8010802:	4698      	mov	r8, r3
 8010804:	4606      	mov	r6, r0
 8010806:	b118      	cbz	r0, 8010810 <_vfiprintf_r+0x18>
 8010808:	6983      	ldr	r3, [r0, #24]
 801080a:	b90b      	cbnz	r3, 8010810 <_vfiprintf_r+0x18>
 801080c:	f7ff fe66 	bl	80104dc <__sinit>
 8010810:	4b89      	ldr	r3, [pc, #548]	; (8010a38 <_vfiprintf_r+0x240>)
 8010812:	429d      	cmp	r5, r3
 8010814:	d11b      	bne.n	801084e <_vfiprintf_r+0x56>
 8010816:	6875      	ldr	r5, [r6, #4]
 8010818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801081a:	07d9      	lsls	r1, r3, #31
 801081c:	d405      	bmi.n	801082a <_vfiprintf_r+0x32>
 801081e:	89ab      	ldrh	r3, [r5, #12]
 8010820:	059a      	lsls	r2, r3, #22
 8010822:	d402      	bmi.n	801082a <_vfiprintf_r+0x32>
 8010824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010826:	f7ff ff09 	bl	801063c <__retarget_lock_acquire_recursive>
 801082a:	89ab      	ldrh	r3, [r5, #12]
 801082c:	071b      	lsls	r3, r3, #28
 801082e:	d501      	bpl.n	8010834 <_vfiprintf_r+0x3c>
 8010830:	692b      	ldr	r3, [r5, #16]
 8010832:	b9eb      	cbnz	r3, 8010870 <_vfiprintf_r+0x78>
 8010834:	4629      	mov	r1, r5
 8010836:	4630      	mov	r0, r6
 8010838:	f000 fb5a 	bl	8010ef0 <__swsetup_r>
 801083c:	b1c0      	cbz	r0, 8010870 <_vfiprintf_r+0x78>
 801083e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010840:	07dc      	lsls	r4, r3, #31
 8010842:	d50e      	bpl.n	8010862 <_vfiprintf_r+0x6a>
 8010844:	f04f 30ff 	mov.w	r0, #4294967295
 8010848:	b01d      	add	sp, #116	; 0x74
 801084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084e:	4b7b      	ldr	r3, [pc, #492]	; (8010a3c <_vfiprintf_r+0x244>)
 8010850:	429d      	cmp	r5, r3
 8010852:	d101      	bne.n	8010858 <_vfiprintf_r+0x60>
 8010854:	68b5      	ldr	r5, [r6, #8]
 8010856:	e7df      	b.n	8010818 <_vfiprintf_r+0x20>
 8010858:	4b79      	ldr	r3, [pc, #484]	; (8010a40 <_vfiprintf_r+0x248>)
 801085a:	429d      	cmp	r5, r3
 801085c:	bf08      	it	eq
 801085e:	68f5      	ldreq	r5, [r6, #12]
 8010860:	e7da      	b.n	8010818 <_vfiprintf_r+0x20>
 8010862:	89ab      	ldrh	r3, [r5, #12]
 8010864:	0598      	lsls	r0, r3, #22
 8010866:	d4ed      	bmi.n	8010844 <_vfiprintf_r+0x4c>
 8010868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801086a:	f7ff fee8 	bl	801063e <__retarget_lock_release_recursive>
 801086e:	e7e9      	b.n	8010844 <_vfiprintf_r+0x4c>
 8010870:	2300      	movs	r3, #0
 8010872:	9309      	str	r3, [sp, #36]	; 0x24
 8010874:	2320      	movs	r3, #32
 8010876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801087a:	f8cd 800c 	str.w	r8, [sp, #12]
 801087e:	2330      	movs	r3, #48	; 0x30
 8010880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a44 <_vfiprintf_r+0x24c>
 8010884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010888:	f04f 0901 	mov.w	r9, #1
 801088c:	4623      	mov	r3, r4
 801088e:	469a      	mov	sl, r3
 8010890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010894:	b10a      	cbz	r2, 801089a <_vfiprintf_r+0xa2>
 8010896:	2a25      	cmp	r2, #37	; 0x25
 8010898:	d1f9      	bne.n	801088e <_vfiprintf_r+0x96>
 801089a:	ebba 0b04 	subs.w	fp, sl, r4
 801089e:	d00b      	beq.n	80108b8 <_vfiprintf_r+0xc0>
 80108a0:	465b      	mov	r3, fp
 80108a2:	4622      	mov	r2, r4
 80108a4:	4629      	mov	r1, r5
 80108a6:	4630      	mov	r0, r6
 80108a8:	f7ff ff93 	bl	80107d2 <__sfputs_r>
 80108ac:	3001      	adds	r0, #1
 80108ae:	f000 80aa 	beq.w	8010a06 <_vfiprintf_r+0x20e>
 80108b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108b4:	445a      	add	r2, fp
 80108b6:	9209      	str	r2, [sp, #36]	; 0x24
 80108b8:	f89a 3000 	ldrb.w	r3, [sl]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 80a2 	beq.w	8010a06 <_vfiprintf_r+0x20e>
 80108c2:	2300      	movs	r3, #0
 80108c4:	f04f 32ff 	mov.w	r2, #4294967295
 80108c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108cc:	f10a 0a01 	add.w	sl, sl, #1
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	9307      	str	r3, [sp, #28]
 80108d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108d8:	931a      	str	r3, [sp, #104]	; 0x68
 80108da:	4654      	mov	r4, sl
 80108dc:	2205      	movs	r2, #5
 80108de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e2:	4858      	ldr	r0, [pc, #352]	; (8010a44 <_vfiprintf_r+0x24c>)
 80108e4:	f7ef fc74 	bl	80001d0 <memchr>
 80108e8:	9a04      	ldr	r2, [sp, #16]
 80108ea:	b9d8      	cbnz	r0, 8010924 <_vfiprintf_r+0x12c>
 80108ec:	06d1      	lsls	r1, r2, #27
 80108ee:	bf44      	itt	mi
 80108f0:	2320      	movmi	r3, #32
 80108f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108f6:	0713      	lsls	r3, r2, #28
 80108f8:	bf44      	itt	mi
 80108fa:	232b      	movmi	r3, #43	; 0x2b
 80108fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010900:	f89a 3000 	ldrb.w	r3, [sl]
 8010904:	2b2a      	cmp	r3, #42	; 0x2a
 8010906:	d015      	beq.n	8010934 <_vfiprintf_r+0x13c>
 8010908:	9a07      	ldr	r2, [sp, #28]
 801090a:	4654      	mov	r4, sl
 801090c:	2000      	movs	r0, #0
 801090e:	f04f 0c0a 	mov.w	ip, #10
 8010912:	4621      	mov	r1, r4
 8010914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010918:	3b30      	subs	r3, #48	; 0x30
 801091a:	2b09      	cmp	r3, #9
 801091c:	d94e      	bls.n	80109bc <_vfiprintf_r+0x1c4>
 801091e:	b1b0      	cbz	r0, 801094e <_vfiprintf_r+0x156>
 8010920:	9207      	str	r2, [sp, #28]
 8010922:	e014      	b.n	801094e <_vfiprintf_r+0x156>
 8010924:	eba0 0308 	sub.w	r3, r0, r8
 8010928:	fa09 f303 	lsl.w	r3, r9, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	9304      	str	r3, [sp, #16]
 8010930:	46a2      	mov	sl, r4
 8010932:	e7d2      	b.n	80108da <_vfiprintf_r+0xe2>
 8010934:	9b03      	ldr	r3, [sp, #12]
 8010936:	1d19      	adds	r1, r3, #4
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	9103      	str	r1, [sp, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	bfbb      	ittet	lt
 8010940:	425b      	neglt	r3, r3
 8010942:	f042 0202 	orrlt.w	r2, r2, #2
 8010946:	9307      	strge	r3, [sp, #28]
 8010948:	9307      	strlt	r3, [sp, #28]
 801094a:	bfb8      	it	lt
 801094c:	9204      	strlt	r2, [sp, #16]
 801094e:	7823      	ldrb	r3, [r4, #0]
 8010950:	2b2e      	cmp	r3, #46	; 0x2e
 8010952:	d10c      	bne.n	801096e <_vfiprintf_r+0x176>
 8010954:	7863      	ldrb	r3, [r4, #1]
 8010956:	2b2a      	cmp	r3, #42	; 0x2a
 8010958:	d135      	bne.n	80109c6 <_vfiprintf_r+0x1ce>
 801095a:	9b03      	ldr	r3, [sp, #12]
 801095c:	1d1a      	adds	r2, r3, #4
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	9203      	str	r2, [sp, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	bfb8      	it	lt
 8010966:	f04f 33ff 	movlt.w	r3, #4294967295
 801096a:	3402      	adds	r4, #2
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a54 <_vfiprintf_r+0x25c>
 8010972:	7821      	ldrb	r1, [r4, #0]
 8010974:	2203      	movs	r2, #3
 8010976:	4650      	mov	r0, sl
 8010978:	f7ef fc2a 	bl	80001d0 <memchr>
 801097c:	b140      	cbz	r0, 8010990 <_vfiprintf_r+0x198>
 801097e:	2340      	movs	r3, #64	; 0x40
 8010980:	eba0 000a 	sub.w	r0, r0, sl
 8010984:	fa03 f000 	lsl.w	r0, r3, r0
 8010988:	9b04      	ldr	r3, [sp, #16]
 801098a:	4303      	orrs	r3, r0
 801098c:	3401      	adds	r4, #1
 801098e:	9304      	str	r3, [sp, #16]
 8010990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010994:	482c      	ldr	r0, [pc, #176]	; (8010a48 <_vfiprintf_r+0x250>)
 8010996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801099a:	2206      	movs	r2, #6
 801099c:	f7ef fc18 	bl	80001d0 <memchr>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d03f      	beq.n	8010a24 <_vfiprintf_r+0x22c>
 80109a4:	4b29      	ldr	r3, [pc, #164]	; (8010a4c <_vfiprintf_r+0x254>)
 80109a6:	bb1b      	cbnz	r3, 80109f0 <_vfiprintf_r+0x1f8>
 80109a8:	9b03      	ldr	r3, [sp, #12]
 80109aa:	3307      	adds	r3, #7
 80109ac:	f023 0307 	bic.w	r3, r3, #7
 80109b0:	3308      	adds	r3, #8
 80109b2:	9303      	str	r3, [sp, #12]
 80109b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b6:	443b      	add	r3, r7
 80109b8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ba:	e767      	b.n	801088c <_vfiprintf_r+0x94>
 80109bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80109c0:	460c      	mov	r4, r1
 80109c2:	2001      	movs	r0, #1
 80109c4:	e7a5      	b.n	8010912 <_vfiprintf_r+0x11a>
 80109c6:	2300      	movs	r3, #0
 80109c8:	3401      	adds	r4, #1
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	4619      	mov	r1, r3
 80109ce:	f04f 0c0a 	mov.w	ip, #10
 80109d2:	4620      	mov	r0, r4
 80109d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109d8:	3a30      	subs	r2, #48	; 0x30
 80109da:	2a09      	cmp	r2, #9
 80109dc:	d903      	bls.n	80109e6 <_vfiprintf_r+0x1ee>
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0c5      	beq.n	801096e <_vfiprintf_r+0x176>
 80109e2:	9105      	str	r1, [sp, #20]
 80109e4:	e7c3      	b.n	801096e <_vfiprintf_r+0x176>
 80109e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80109ea:	4604      	mov	r4, r0
 80109ec:	2301      	movs	r3, #1
 80109ee:	e7f0      	b.n	80109d2 <_vfiprintf_r+0x1da>
 80109f0:	ab03      	add	r3, sp, #12
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	462a      	mov	r2, r5
 80109f6:	4b16      	ldr	r3, [pc, #88]	; (8010a50 <_vfiprintf_r+0x258>)
 80109f8:	a904      	add	r1, sp, #16
 80109fa:	4630      	mov	r0, r6
 80109fc:	f3af 8000 	nop.w
 8010a00:	4607      	mov	r7, r0
 8010a02:	1c78      	adds	r0, r7, #1
 8010a04:	d1d6      	bne.n	80109b4 <_vfiprintf_r+0x1bc>
 8010a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a08:	07d9      	lsls	r1, r3, #31
 8010a0a:	d405      	bmi.n	8010a18 <_vfiprintf_r+0x220>
 8010a0c:	89ab      	ldrh	r3, [r5, #12]
 8010a0e:	059a      	lsls	r2, r3, #22
 8010a10:	d402      	bmi.n	8010a18 <_vfiprintf_r+0x220>
 8010a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a14:	f7ff fe13 	bl	801063e <__retarget_lock_release_recursive>
 8010a18:	89ab      	ldrh	r3, [r5, #12]
 8010a1a:	065b      	lsls	r3, r3, #25
 8010a1c:	f53f af12 	bmi.w	8010844 <_vfiprintf_r+0x4c>
 8010a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a22:	e711      	b.n	8010848 <_vfiprintf_r+0x50>
 8010a24:	ab03      	add	r3, sp, #12
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	462a      	mov	r2, r5
 8010a2a:	4b09      	ldr	r3, [pc, #36]	; (8010a50 <_vfiprintf_r+0x258>)
 8010a2c:	a904      	add	r1, sp, #16
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f000 f880 	bl	8010b34 <_printf_i>
 8010a34:	e7e4      	b.n	8010a00 <_vfiprintf_r+0x208>
 8010a36:	bf00      	nop
 8010a38:	08013f48 	.word	0x08013f48
 8010a3c:	08013f68 	.word	0x08013f68
 8010a40:	08013f28 	.word	0x08013f28
 8010a44:	08013f88 	.word	0x08013f88
 8010a48:	08013f92 	.word	0x08013f92
 8010a4c:	00000000 	.word	0x00000000
 8010a50:	080107d3 	.word	0x080107d3
 8010a54:	08013f8e 	.word	0x08013f8e

08010a58 <_printf_common>:
 8010a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	4699      	mov	r9, r3
 8010a60:	688a      	ldr	r2, [r1, #8]
 8010a62:	690b      	ldr	r3, [r1, #16]
 8010a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	bfb8      	it	lt
 8010a6c:	4613      	movlt	r3, r2
 8010a6e:	6033      	str	r3, [r6, #0]
 8010a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a74:	4607      	mov	r7, r0
 8010a76:	460c      	mov	r4, r1
 8010a78:	b10a      	cbz	r2, 8010a7e <_printf_common+0x26>
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	6033      	str	r3, [r6, #0]
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	0699      	lsls	r1, r3, #26
 8010a82:	bf42      	ittt	mi
 8010a84:	6833      	ldrmi	r3, [r6, #0]
 8010a86:	3302      	addmi	r3, #2
 8010a88:	6033      	strmi	r3, [r6, #0]
 8010a8a:	6825      	ldr	r5, [r4, #0]
 8010a8c:	f015 0506 	ands.w	r5, r5, #6
 8010a90:	d106      	bne.n	8010aa0 <_printf_common+0x48>
 8010a92:	f104 0a19 	add.w	sl, r4, #25
 8010a96:	68e3      	ldr	r3, [r4, #12]
 8010a98:	6832      	ldr	r2, [r6, #0]
 8010a9a:	1a9b      	subs	r3, r3, r2
 8010a9c:	42ab      	cmp	r3, r5
 8010a9e:	dc26      	bgt.n	8010aee <_printf_common+0x96>
 8010aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010aa4:	1e13      	subs	r3, r2, #0
 8010aa6:	6822      	ldr	r2, [r4, #0]
 8010aa8:	bf18      	it	ne
 8010aaa:	2301      	movne	r3, #1
 8010aac:	0692      	lsls	r2, r2, #26
 8010aae:	d42b      	bmi.n	8010b08 <_printf_common+0xb0>
 8010ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ab4:	4649      	mov	r1, r9
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	47c0      	blx	r8
 8010aba:	3001      	adds	r0, #1
 8010abc:	d01e      	beq.n	8010afc <_printf_common+0xa4>
 8010abe:	6823      	ldr	r3, [r4, #0]
 8010ac0:	68e5      	ldr	r5, [r4, #12]
 8010ac2:	6832      	ldr	r2, [r6, #0]
 8010ac4:	f003 0306 	and.w	r3, r3, #6
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	bf08      	it	eq
 8010acc:	1aad      	subeq	r5, r5, r2
 8010ace:	68a3      	ldr	r3, [r4, #8]
 8010ad0:	6922      	ldr	r2, [r4, #16]
 8010ad2:	bf0c      	ite	eq
 8010ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ad8:	2500      	movne	r5, #0
 8010ada:	4293      	cmp	r3, r2
 8010adc:	bfc4      	itt	gt
 8010ade:	1a9b      	subgt	r3, r3, r2
 8010ae0:	18ed      	addgt	r5, r5, r3
 8010ae2:	2600      	movs	r6, #0
 8010ae4:	341a      	adds	r4, #26
 8010ae6:	42b5      	cmp	r5, r6
 8010ae8:	d11a      	bne.n	8010b20 <_printf_common+0xc8>
 8010aea:	2000      	movs	r0, #0
 8010aec:	e008      	b.n	8010b00 <_printf_common+0xa8>
 8010aee:	2301      	movs	r3, #1
 8010af0:	4652      	mov	r2, sl
 8010af2:	4649      	mov	r1, r9
 8010af4:	4638      	mov	r0, r7
 8010af6:	47c0      	blx	r8
 8010af8:	3001      	adds	r0, #1
 8010afa:	d103      	bne.n	8010b04 <_printf_common+0xac>
 8010afc:	f04f 30ff 	mov.w	r0, #4294967295
 8010b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b04:	3501      	adds	r5, #1
 8010b06:	e7c6      	b.n	8010a96 <_printf_common+0x3e>
 8010b08:	18e1      	adds	r1, r4, r3
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	2030      	movs	r0, #48	; 0x30
 8010b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b12:	4422      	add	r2, r4
 8010b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b1c:	3302      	adds	r3, #2
 8010b1e:	e7c7      	b.n	8010ab0 <_printf_common+0x58>
 8010b20:	2301      	movs	r3, #1
 8010b22:	4622      	mov	r2, r4
 8010b24:	4649      	mov	r1, r9
 8010b26:	4638      	mov	r0, r7
 8010b28:	47c0      	blx	r8
 8010b2a:	3001      	adds	r0, #1
 8010b2c:	d0e6      	beq.n	8010afc <_printf_common+0xa4>
 8010b2e:	3601      	adds	r6, #1
 8010b30:	e7d9      	b.n	8010ae6 <_printf_common+0x8e>
	...

08010b34 <_printf_i>:
 8010b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b38:	460c      	mov	r4, r1
 8010b3a:	4691      	mov	r9, r2
 8010b3c:	7e27      	ldrb	r7, [r4, #24]
 8010b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b40:	2f78      	cmp	r7, #120	; 0x78
 8010b42:	4680      	mov	r8, r0
 8010b44:	469a      	mov	sl, r3
 8010b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b4a:	d807      	bhi.n	8010b5c <_printf_i+0x28>
 8010b4c:	2f62      	cmp	r7, #98	; 0x62
 8010b4e:	d80a      	bhi.n	8010b66 <_printf_i+0x32>
 8010b50:	2f00      	cmp	r7, #0
 8010b52:	f000 80d8 	beq.w	8010d06 <_printf_i+0x1d2>
 8010b56:	2f58      	cmp	r7, #88	; 0x58
 8010b58:	f000 80a3 	beq.w	8010ca2 <_printf_i+0x16e>
 8010b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b64:	e03a      	b.n	8010bdc <_printf_i+0xa8>
 8010b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b6a:	2b15      	cmp	r3, #21
 8010b6c:	d8f6      	bhi.n	8010b5c <_printf_i+0x28>
 8010b6e:	a001      	add	r0, pc, #4	; (adr r0, 8010b74 <_printf_i+0x40>)
 8010b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010b74:	08010bcd 	.word	0x08010bcd
 8010b78:	08010be1 	.word	0x08010be1
 8010b7c:	08010b5d 	.word	0x08010b5d
 8010b80:	08010b5d 	.word	0x08010b5d
 8010b84:	08010b5d 	.word	0x08010b5d
 8010b88:	08010b5d 	.word	0x08010b5d
 8010b8c:	08010be1 	.word	0x08010be1
 8010b90:	08010b5d 	.word	0x08010b5d
 8010b94:	08010b5d 	.word	0x08010b5d
 8010b98:	08010b5d 	.word	0x08010b5d
 8010b9c:	08010b5d 	.word	0x08010b5d
 8010ba0:	08010ced 	.word	0x08010ced
 8010ba4:	08010c11 	.word	0x08010c11
 8010ba8:	08010ccf 	.word	0x08010ccf
 8010bac:	08010b5d 	.word	0x08010b5d
 8010bb0:	08010b5d 	.word	0x08010b5d
 8010bb4:	08010d0f 	.word	0x08010d0f
 8010bb8:	08010b5d 	.word	0x08010b5d
 8010bbc:	08010c11 	.word	0x08010c11
 8010bc0:	08010b5d 	.word	0x08010b5d
 8010bc4:	08010b5d 	.word	0x08010b5d
 8010bc8:	08010cd7 	.word	0x08010cd7
 8010bcc:	680b      	ldr	r3, [r1, #0]
 8010bce:	1d1a      	adds	r2, r3, #4
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	600a      	str	r2, [r1, #0]
 8010bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e0a3      	b.n	8010d28 <_printf_i+0x1f4>
 8010be0:	6825      	ldr	r5, [r4, #0]
 8010be2:	6808      	ldr	r0, [r1, #0]
 8010be4:	062e      	lsls	r6, r5, #24
 8010be6:	f100 0304 	add.w	r3, r0, #4
 8010bea:	d50a      	bpl.n	8010c02 <_printf_i+0xce>
 8010bec:	6805      	ldr	r5, [r0, #0]
 8010bee:	600b      	str	r3, [r1, #0]
 8010bf0:	2d00      	cmp	r5, #0
 8010bf2:	da03      	bge.n	8010bfc <_printf_i+0xc8>
 8010bf4:	232d      	movs	r3, #45	; 0x2d
 8010bf6:	426d      	negs	r5, r5
 8010bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bfc:	485e      	ldr	r0, [pc, #376]	; (8010d78 <_printf_i+0x244>)
 8010bfe:	230a      	movs	r3, #10
 8010c00:	e019      	b.n	8010c36 <_printf_i+0x102>
 8010c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010c06:	6805      	ldr	r5, [r0, #0]
 8010c08:	600b      	str	r3, [r1, #0]
 8010c0a:	bf18      	it	ne
 8010c0c:	b22d      	sxthne	r5, r5
 8010c0e:	e7ef      	b.n	8010bf0 <_printf_i+0xbc>
 8010c10:	680b      	ldr	r3, [r1, #0]
 8010c12:	6825      	ldr	r5, [r4, #0]
 8010c14:	1d18      	adds	r0, r3, #4
 8010c16:	6008      	str	r0, [r1, #0]
 8010c18:	0628      	lsls	r0, r5, #24
 8010c1a:	d501      	bpl.n	8010c20 <_printf_i+0xec>
 8010c1c:	681d      	ldr	r5, [r3, #0]
 8010c1e:	e002      	b.n	8010c26 <_printf_i+0xf2>
 8010c20:	0669      	lsls	r1, r5, #25
 8010c22:	d5fb      	bpl.n	8010c1c <_printf_i+0xe8>
 8010c24:	881d      	ldrh	r5, [r3, #0]
 8010c26:	4854      	ldr	r0, [pc, #336]	; (8010d78 <_printf_i+0x244>)
 8010c28:	2f6f      	cmp	r7, #111	; 0x6f
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2308      	moveq	r3, #8
 8010c2e:	230a      	movne	r3, #10
 8010c30:	2100      	movs	r1, #0
 8010c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c36:	6866      	ldr	r6, [r4, #4]
 8010c38:	60a6      	str	r6, [r4, #8]
 8010c3a:	2e00      	cmp	r6, #0
 8010c3c:	bfa2      	ittt	ge
 8010c3e:	6821      	ldrge	r1, [r4, #0]
 8010c40:	f021 0104 	bicge.w	r1, r1, #4
 8010c44:	6021      	strge	r1, [r4, #0]
 8010c46:	b90d      	cbnz	r5, 8010c4c <_printf_i+0x118>
 8010c48:	2e00      	cmp	r6, #0
 8010c4a:	d04d      	beq.n	8010ce8 <_printf_i+0x1b4>
 8010c4c:	4616      	mov	r6, r2
 8010c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c52:	fb03 5711 	mls	r7, r3, r1, r5
 8010c56:	5dc7      	ldrb	r7, [r0, r7]
 8010c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c5c:	462f      	mov	r7, r5
 8010c5e:	42bb      	cmp	r3, r7
 8010c60:	460d      	mov	r5, r1
 8010c62:	d9f4      	bls.n	8010c4e <_printf_i+0x11a>
 8010c64:	2b08      	cmp	r3, #8
 8010c66:	d10b      	bne.n	8010c80 <_printf_i+0x14c>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	07df      	lsls	r7, r3, #31
 8010c6c:	d508      	bpl.n	8010c80 <_printf_i+0x14c>
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	6861      	ldr	r1, [r4, #4]
 8010c72:	4299      	cmp	r1, r3
 8010c74:	bfde      	ittt	le
 8010c76:	2330      	movle	r3, #48	; 0x30
 8010c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c80:	1b92      	subs	r2, r2, r6
 8010c82:	6122      	str	r2, [r4, #16]
 8010c84:	f8cd a000 	str.w	sl, [sp]
 8010c88:	464b      	mov	r3, r9
 8010c8a:	aa03      	add	r2, sp, #12
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4640      	mov	r0, r8
 8010c90:	f7ff fee2 	bl	8010a58 <_printf_common>
 8010c94:	3001      	adds	r0, #1
 8010c96:	d14c      	bne.n	8010d32 <_printf_i+0x1fe>
 8010c98:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9c:	b004      	add	sp, #16
 8010c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca2:	4835      	ldr	r0, [pc, #212]	; (8010d78 <_printf_i+0x244>)
 8010ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	680e      	ldr	r6, [r1, #0]
 8010cac:	061f      	lsls	r7, r3, #24
 8010cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8010cb2:	600e      	str	r6, [r1, #0]
 8010cb4:	d514      	bpl.n	8010ce0 <_printf_i+0x1ac>
 8010cb6:	07d9      	lsls	r1, r3, #31
 8010cb8:	bf44      	itt	mi
 8010cba:	f043 0320 	orrmi.w	r3, r3, #32
 8010cbe:	6023      	strmi	r3, [r4, #0]
 8010cc0:	b91d      	cbnz	r5, 8010cca <_printf_i+0x196>
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	f023 0320 	bic.w	r3, r3, #32
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	2310      	movs	r3, #16
 8010ccc:	e7b0      	b.n	8010c30 <_printf_i+0xfc>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	f043 0320 	orr.w	r3, r3, #32
 8010cd4:	6023      	str	r3, [r4, #0]
 8010cd6:	2378      	movs	r3, #120	; 0x78
 8010cd8:	4828      	ldr	r0, [pc, #160]	; (8010d7c <_printf_i+0x248>)
 8010cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cde:	e7e3      	b.n	8010ca8 <_printf_i+0x174>
 8010ce0:	065e      	lsls	r6, r3, #25
 8010ce2:	bf48      	it	mi
 8010ce4:	b2ad      	uxthmi	r5, r5
 8010ce6:	e7e6      	b.n	8010cb6 <_printf_i+0x182>
 8010ce8:	4616      	mov	r6, r2
 8010cea:	e7bb      	b.n	8010c64 <_printf_i+0x130>
 8010cec:	680b      	ldr	r3, [r1, #0]
 8010cee:	6826      	ldr	r6, [r4, #0]
 8010cf0:	6960      	ldr	r0, [r4, #20]
 8010cf2:	1d1d      	adds	r5, r3, #4
 8010cf4:	600d      	str	r5, [r1, #0]
 8010cf6:	0635      	lsls	r5, r6, #24
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	d501      	bpl.n	8010d00 <_printf_i+0x1cc>
 8010cfc:	6018      	str	r0, [r3, #0]
 8010cfe:	e002      	b.n	8010d06 <_printf_i+0x1d2>
 8010d00:	0671      	lsls	r1, r6, #25
 8010d02:	d5fb      	bpl.n	8010cfc <_printf_i+0x1c8>
 8010d04:	8018      	strh	r0, [r3, #0]
 8010d06:	2300      	movs	r3, #0
 8010d08:	6123      	str	r3, [r4, #16]
 8010d0a:	4616      	mov	r6, r2
 8010d0c:	e7ba      	b.n	8010c84 <_printf_i+0x150>
 8010d0e:	680b      	ldr	r3, [r1, #0]
 8010d10:	1d1a      	adds	r2, r3, #4
 8010d12:	600a      	str	r2, [r1, #0]
 8010d14:	681e      	ldr	r6, [r3, #0]
 8010d16:	6862      	ldr	r2, [r4, #4]
 8010d18:	2100      	movs	r1, #0
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7ef fa58 	bl	80001d0 <memchr>
 8010d20:	b108      	cbz	r0, 8010d26 <_printf_i+0x1f2>
 8010d22:	1b80      	subs	r0, r0, r6
 8010d24:	6060      	str	r0, [r4, #4]
 8010d26:	6863      	ldr	r3, [r4, #4]
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d30:	e7a8      	b.n	8010c84 <_printf_i+0x150>
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	4632      	mov	r2, r6
 8010d36:	4649      	mov	r1, r9
 8010d38:	4640      	mov	r0, r8
 8010d3a:	47d0      	blx	sl
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	d0ab      	beq.n	8010c98 <_printf_i+0x164>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	079b      	lsls	r3, r3, #30
 8010d44:	d413      	bmi.n	8010d6e <_printf_i+0x23a>
 8010d46:	68e0      	ldr	r0, [r4, #12]
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	4298      	cmp	r0, r3
 8010d4c:	bfb8      	it	lt
 8010d4e:	4618      	movlt	r0, r3
 8010d50:	e7a4      	b.n	8010c9c <_printf_i+0x168>
 8010d52:	2301      	movs	r3, #1
 8010d54:	4632      	mov	r2, r6
 8010d56:	4649      	mov	r1, r9
 8010d58:	4640      	mov	r0, r8
 8010d5a:	47d0      	blx	sl
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d09b      	beq.n	8010c98 <_printf_i+0x164>
 8010d60:	3501      	adds	r5, #1
 8010d62:	68e3      	ldr	r3, [r4, #12]
 8010d64:	9903      	ldr	r1, [sp, #12]
 8010d66:	1a5b      	subs	r3, r3, r1
 8010d68:	42ab      	cmp	r3, r5
 8010d6a:	dcf2      	bgt.n	8010d52 <_printf_i+0x21e>
 8010d6c:	e7eb      	b.n	8010d46 <_printf_i+0x212>
 8010d6e:	2500      	movs	r5, #0
 8010d70:	f104 0619 	add.w	r6, r4, #25
 8010d74:	e7f5      	b.n	8010d62 <_printf_i+0x22e>
 8010d76:	bf00      	nop
 8010d78:	08013f99 	.word	0x08013f99
 8010d7c:	08013faa 	.word	0x08013faa

08010d80 <_sbrk_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d06      	ldr	r5, [pc, #24]	; (8010d9c <_sbrk_r+0x1c>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	f7f0 fade 	bl	800134c <_sbrk>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d102      	bne.n	8010d9a <_sbrk_r+0x1a>
 8010d94:	682b      	ldr	r3, [r5, #0]
 8010d96:	b103      	cbz	r3, 8010d9a <_sbrk_r+0x1a>
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	20005b70 	.word	0x20005b70

08010da0 <__sread>:
 8010da0:	b510      	push	{r4, lr}
 8010da2:	460c      	mov	r4, r1
 8010da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da8:	f000 fa6c 	bl	8011284 <_read_r>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	bfab      	itete	ge
 8010db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010db2:	89a3      	ldrhlt	r3, [r4, #12]
 8010db4:	181b      	addge	r3, r3, r0
 8010db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010dba:	bfac      	ite	ge
 8010dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010dbe:	81a3      	strhlt	r3, [r4, #12]
 8010dc0:	bd10      	pop	{r4, pc}

08010dc2 <__swrite>:
 8010dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc6:	461f      	mov	r7, r3
 8010dc8:	898b      	ldrh	r3, [r1, #12]
 8010dca:	05db      	lsls	r3, r3, #23
 8010dcc:	4605      	mov	r5, r0
 8010dce:	460c      	mov	r4, r1
 8010dd0:	4616      	mov	r6, r2
 8010dd2:	d505      	bpl.n	8010de0 <__swrite+0x1e>
 8010dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd8:	2302      	movs	r3, #2
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f000 f9d0 	bl	8011180 <_lseek_r>
 8010de0:	89a3      	ldrh	r3, [r4, #12]
 8010de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dea:	81a3      	strh	r3, [r4, #12]
 8010dec:	4632      	mov	r2, r6
 8010dee:	463b      	mov	r3, r7
 8010df0:	4628      	mov	r0, r5
 8010df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010df6:	f000 b869 	b.w	8010ecc <_write_r>

08010dfa <__sseek>:
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	460c      	mov	r4, r1
 8010dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e02:	f000 f9bd 	bl	8011180 <_lseek_r>
 8010e06:	1c43      	adds	r3, r0, #1
 8010e08:	89a3      	ldrh	r3, [r4, #12]
 8010e0a:	bf15      	itete	ne
 8010e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e16:	81a3      	strheq	r3, [r4, #12]
 8010e18:	bf18      	it	ne
 8010e1a:	81a3      	strhne	r3, [r4, #12]
 8010e1c:	bd10      	pop	{r4, pc}

08010e1e <__sclose>:
 8010e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e22:	f000 b8db 	b.w	8010fdc <_close_r>
	...

08010e28 <__swbuf_r>:
 8010e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	4614      	mov	r4, r2
 8010e2e:	4605      	mov	r5, r0
 8010e30:	b118      	cbz	r0, 8010e3a <__swbuf_r+0x12>
 8010e32:	6983      	ldr	r3, [r0, #24]
 8010e34:	b90b      	cbnz	r3, 8010e3a <__swbuf_r+0x12>
 8010e36:	f7ff fb51 	bl	80104dc <__sinit>
 8010e3a:	4b21      	ldr	r3, [pc, #132]	; (8010ec0 <__swbuf_r+0x98>)
 8010e3c:	429c      	cmp	r4, r3
 8010e3e:	d12b      	bne.n	8010e98 <__swbuf_r+0x70>
 8010e40:	686c      	ldr	r4, [r5, #4]
 8010e42:	69a3      	ldr	r3, [r4, #24]
 8010e44:	60a3      	str	r3, [r4, #8]
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	071a      	lsls	r2, r3, #28
 8010e4a:	d52f      	bpl.n	8010eac <__swbuf_r+0x84>
 8010e4c:	6923      	ldr	r3, [r4, #16]
 8010e4e:	b36b      	cbz	r3, 8010eac <__swbuf_r+0x84>
 8010e50:	6923      	ldr	r3, [r4, #16]
 8010e52:	6820      	ldr	r0, [r4, #0]
 8010e54:	1ac0      	subs	r0, r0, r3
 8010e56:	6963      	ldr	r3, [r4, #20]
 8010e58:	b2f6      	uxtb	r6, r6
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	4637      	mov	r7, r6
 8010e5e:	dc04      	bgt.n	8010e6a <__swbuf_r+0x42>
 8010e60:	4621      	mov	r1, r4
 8010e62:	4628      	mov	r0, r5
 8010e64:	f000 f950 	bl	8011108 <_fflush_r>
 8010e68:	bb30      	cbnz	r0, 8010eb8 <__swbuf_r+0x90>
 8010e6a:	68a3      	ldr	r3, [r4, #8]
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	60a3      	str	r3, [r4, #8]
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	6022      	str	r2, [r4, #0]
 8010e76:	701e      	strb	r6, [r3, #0]
 8010e78:	6963      	ldr	r3, [r4, #20]
 8010e7a:	3001      	adds	r0, #1
 8010e7c:	4283      	cmp	r3, r0
 8010e7e:	d004      	beq.n	8010e8a <__swbuf_r+0x62>
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	07db      	lsls	r3, r3, #31
 8010e84:	d506      	bpl.n	8010e94 <__swbuf_r+0x6c>
 8010e86:	2e0a      	cmp	r6, #10
 8010e88:	d104      	bne.n	8010e94 <__swbuf_r+0x6c>
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f000 f93b 	bl	8011108 <_fflush_r>
 8010e92:	b988      	cbnz	r0, 8010eb8 <__swbuf_r+0x90>
 8010e94:	4638      	mov	r0, r7
 8010e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e98:	4b0a      	ldr	r3, [pc, #40]	; (8010ec4 <__swbuf_r+0x9c>)
 8010e9a:	429c      	cmp	r4, r3
 8010e9c:	d101      	bne.n	8010ea2 <__swbuf_r+0x7a>
 8010e9e:	68ac      	ldr	r4, [r5, #8]
 8010ea0:	e7cf      	b.n	8010e42 <__swbuf_r+0x1a>
 8010ea2:	4b09      	ldr	r3, [pc, #36]	; (8010ec8 <__swbuf_r+0xa0>)
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	bf08      	it	eq
 8010ea8:	68ec      	ldreq	r4, [r5, #12]
 8010eaa:	e7ca      	b.n	8010e42 <__swbuf_r+0x1a>
 8010eac:	4621      	mov	r1, r4
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f000 f81e 	bl	8010ef0 <__swsetup_r>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d0cb      	beq.n	8010e50 <__swbuf_r+0x28>
 8010eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8010ebc:	e7ea      	b.n	8010e94 <__swbuf_r+0x6c>
 8010ebe:	bf00      	nop
 8010ec0:	08013f48 	.word	0x08013f48
 8010ec4:	08013f68 	.word	0x08013f68
 8010ec8:	08013f28 	.word	0x08013f28

08010ecc <_write_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	; (8010eec <_write_r+0x20>)
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	602a      	str	r2, [r5, #0]
 8010eda:	461a      	mov	r2, r3
 8010edc:	f7f0 f9e5 	bl	80012aa <_write>
 8010ee0:	1c43      	adds	r3, r0, #1
 8010ee2:	d102      	bne.n	8010eea <_write_r+0x1e>
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	b103      	cbz	r3, 8010eea <_write_r+0x1e>
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	20005b70 	.word	0x20005b70

08010ef0 <__swsetup_r>:
 8010ef0:	4b32      	ldr	r3, [pc, #200]	; (8010fbc <__swsetup_r+0xcc>)
 8010ef2:	b570      	push	{r4, r5, r6, lr}
 8010ef4:	681d      	ldr	r5, [r3, #0]
 8010ef6:	4606      	mov	r6, r0
 8010ef8:	460c      	mov	r4, r1
 8010efa:	b125      	cbz	r5, 8010f06 <__swsetup_r+0x16>
 8010efc:	69ab      	ldr	r3, [r5, #24]
 8010efe:	b913      	cbnz	r3, 8010f06 <__swsetup_r+0x16>
 8010f00:	4628      	mov	r0, r5
 8010f02:	f7ff faeb 	bl	80104dc <__sinit>
 8010f06:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <__swsetup_r+0xd0>)
 8010f08:	429c      	cmp	r4, r3
 8010f0a:	d10f      	bne.n	8010f2c <__swsetup_r+0x3c>
 8010f0c:	686c      	ldr	r4, [r5, #4]
 8010f0e:	89a3      	ldrh	r3, [r4, #12]
 8010f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f14:	0719      	lsls	r1, r3, #28
 8010f16:	d42c      	bmi.n	8010f72 <__swsetup_r+0x82>
 8010f18:	06dd      	lsls	r5, r3, #27
 8010f1a:	d411      	bmi.n	8010f40 <__swsetup_r+0x50>
 8010f1c:	2309      	movs	r3, #9
 8010f1e:	6033      	str	r3, [r6, #0]
 8010f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f24:	81a3      	strh	r3, [r4, #12]
 8010f26:	f04f 30ff 	mov.w	r0, #4294967295
 8010f2a:	e03e      	b.n	8010faa <__swsetup_r+0xba>
 8010f2c:	4b25      	ldr	r3, [pc, #148]	; (8010fc4 <__swsetup_r+0xd4>)
 8010f2e:	429c      	cmp	r4, r3
 8010f30:	d101      	bne.n	8010f36 <__swsetup_r+0x46>
 8010f32:	68ac      	ldr	r4, [r5, #8]
 8010f34:	e7eb      	b.n	8010f0e <__swsetup_r+0x1e>
 8010f36:	4b24      	ldr	r3, [pc, #144]	; (8010fc8 <__swsetup_r+0xd8>)
 8010f38:	429c      	cmp	r4, r3
 8010f3a:	bf08      	it	eq
 8010f3c:	68ec      	ldreq	r4, [r5, #12]
 8010f3e:	e7e6      	b.n	8010f0e <__swsetup_r+0x1e>
 8010f40:	0758      	lsls	r0, r3, #29
 8010f42:	d512      	bpl.n	8010f6a <__swsetup_r+0x7a>
 8010f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f46:	b141      	cbz	r1, 8010f5a <__swsetup_r+0x6a>
 8010f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f4c:	4299      	cmp	r1, r3
 8010f4e:	d002      	beq.n	8010f56 <__swsetup_r+0x66>
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7ff fb7d 	bl	8010650 <_free_r>
 8010f56:	2300      	movs	r3, #0
 8010f58:	6363      	str	r3, [r4, #52]	; 0x34
 8010f5a:	89a3      	ldrh	r3, [r4, #12]
 8010f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f60:	81a3      	strh	r3, [r4, #12]
 8010f62:	2300      	movs	r3, #0
 8010f64:	6063      	str	r3, [r4, #4]
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	f043 0308 	orr.w	r3, r3, #8
 8010f70:	81a3      	strh	r3, [r4, #12]
 8010f72:	6923      	ldr	r3, [r4, #16]
 8010f74:	b94b      	cbnz	r3, 8010f8a <__swsetup_r+0x9a>
 8010f76:	89a3      	ldrh	r3, [r4, #12]
 8010f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f80:	d003      	beq.n	8010f8a <__swsetup_r+0x9a>
 8010f82:	4621      	mov	r1, r4
 8010f84:	4630      	mov	r0, r6
 8010f86:	f000 f931 	bl	80111ec <__smakebuf_r>
 8010f8a:	89a0      	ldrh	r0, [r4, #12]
 8010f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f90:	f010 0301 	ands.w	r3, r0, #1
 8010f94:	d00a      	beq.n	8010fac <__swsetup_r+0xbc>
 8010f96:	2300      	movs	r3, #0
 8010f98:	60a3      	str	r3, [r4, #8]
 8010f9a:	6963      	ldr	r3, [r4, #20]
 8010f9c:	425b      	negs	r3, r3
 8010f9e:	61a3      	str	r3, [r4, #24]
 8010fa0:	6923      	ldr	r3, [r4, #16]
 8010fa2:	b943      	cbnz	r3, 8010fb6 <__swsetup_r+0xc6>
 8010fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010fa8:	d1ba      	bne.n	8010f20 <__swsetup_r+0x30>
 8010faa:	bd70      	pop	{r4, r5, r6, pc}
 8010fac:	0781      	lsls	r1, r0, #30
 8010fae:	bf58      	it	pl
 8010fb0:	6963      	ldrpl	r3, [r4, #20]
 8010fb2:	60a3      	str	r3, [r4, #8]
 8010fb4:	e7f4      	b.n	8010fa0 <__swsetup_r+0xb0>
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	e7f7      	b.n	8010faa <__swsetup_r+0xba>
 8010fba:	bf00      	nop
 8010fbc:	20000014 	.word	0x20000014
 8010fc0:	08013f48 	.word	0x08013f48
 8010fc4:	08013f68 	.word	0x08013f68
 8010fc8:	08013f28 	.word	0x08013f28

08010fcc <abort>:
 8010fcc:	b508      	push	{r3, lr}
 8010fce:	2006      	movs	r0, #6
 8010fd0:	f000 f992 	bl	80112f8 <raise>
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	f7f0 f941 	bl	800125c <_exit>
	...

08010fdc <_close_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d06      	ldr	r5, [pc, #24]	; (8010ff8 <_close_r+0x1c>)
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4608      	mov	r0, r1
 8010fe6:	602b      	str	r3, [r5, #0]
 8010fe8:	f7f0 f97b 	bl	80012e2 <_close>
 8010fec:	1c43      	adds	r3, r0, #1
 8010fee:	d102      	bne.n	8010ff6 <_close_r+0x1a>
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	b103      	cbz	r3, 8010ff6 <_close_r+0x1a>
 8010ff4:	6023      	str	r3, [r4, #0]
 8010ff6:	bd38      	pop	{r3, r4, r5, pc}
 8010ff8:	20005b70 	.word	0x20005b70

08010ffc <__sflush_r>:
 8010ffc:	898a      	ldrh	r2, [r1, #12]
 8010ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011002:	4605      	mov	r5, r0
 8011004:	0710      	lsls	r0, r2, #28
 8011006:	460c      	mov	r4, r1
 8011008:	d458      	bmi.n	80110bc <__sflush_r+0xc0>
 801100a:	684b      	ldr	r3, [r1, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	dc05      	bgt.n	801101c <__sflush_r+0x20>
 8011010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011012:	2b00      	cmp	r3, #0
 8011014:	dc02      	bgt.n	801101c <__sflush_r+0x20>
 8011016:	2000      	movs	r0, #0
 8011018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801101c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801101e:	2e00      	cmp	r6, #0
 8011020:	d0f9      	beq.n	8011016 <__sflush_r+0x1a>
 8011022:	2300      	movs	r3, #0
 8011024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011028:	682f      	ldr	r7, [r5, #0]
 801102a:	602b      	str	r3, [r5, #0]
 801102c:	d032      	beq.n	8011094 <__sflush_r+0x98>
 801102e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	075a      	lsls	r2, r3, #29
 8011034:	d505      	bpl.n	8011042 <__sflush_r+0x46>
 8011036:	6863      	ldr	r3, [r4, #4]
 8011038:	1ac0      	subs	r0, r0, r3
 801103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801103c:	b10b      	cbz	r3, 8011042 <__sflush_r+0x46>
 801103e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011040:	1ac0      	subs	r0, r0, r3
 8011042:	2300      	movs	r3, #0
 8011044:	4602      	mov	r2, r0
 8011046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011048:	6a21      	ldr	r1, [r4, #32]
 801104a:	4628      	mov	r0, r5
 801104c:	47b0      	blx	r6
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	89a3      	ldrh	r3, [r4, #12]
 8011052:	d106      	bne.n	8011062 <__sflush_r+0x66>
 8011054:	6829      	ldr	r1, [r5, #0]
 8011056:	291d      	cmp	r1, #29
 8011058:	d82c      	bhi.n	80110b4 <__sflush_r+0xb8>
 801105a:	4a2a      	ldr	r2, [pc, #168]	; (8011104 <__sflush_r+0x108>)
 801105c:	40ca      	lsrs	r2, r1
 801105e:	07d6      	lsls	r6, r2, #31
 8011060:	d528      	bpl.n	80110b4 <__sflush_r+0xb8>
 8011062:	2200      	movs	r2, #0
 8011064:	6062      	str	r2, [r4, #4]
 8011066:	04d9      	lsls	r1, r3, #19
 8011068:	6922      	ldr	r2, [r4, #16]
 801106a:	6022      	str	r2, [r4, #0]
 801106c:	d504      	bpl.n	8011078 <__sflush_r+0x7c>
 801106e:	1c42      	adds	r2, r0, #1
 8011070:	d101      	bne.n	8011076 <__sflush_r+0x7a>
 8011072:	682b      	ldr	r3, [r5, #0]
 8011074:	b903      	cbnz	r3, 8011078 <__sflush_r+0x7c>
 8011076:	6560      	str	r0, [r4, #84]	; 0x54
 8011078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801107a:	602f      	str	r7, [r5, #0]
 801107c:	2900      	cmp	r1, #0
 801107e:	d0ca      	beq.n	8011016 <__sflush_r+0x1a>
 8011080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011084:	4299      	cmp	r1, r3
 8011086:	d002      	beq.n	801108e <__sflush_r+0x92>
 8011088:	4628      	mov	r0, r5
 801108a:	f7ff fae1 	bl	8010650 <_free_r>
 801108e:	2000      	movs	r0, #0
 8011090:	6360      	str	r0, [r4, #52]	; 0x34
 8011092:	e7c1      	b.n	8011018 <__sflush_r+0x1c>
 8011094:	6a21      	ldr	r1, [r4, #32]
 8011096:	2301      	movs	r3, #1
 8011098:	4628      	mov	r0, r5
 801109a:	47b0      	blx	r6
 801109c:	1c41      	adds	r1, r0, #1
 801109e:	d1c7      	bne.n	8011030 <__sflush_r+0x34>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d0c4      	beq.n	8011030 <__sflush_r+0x34>
 80110a6:	2b1d      	cmp	r3, #29
 80110a8:	d001      	beq.n	80110ae <__sflush_r+0xb2>
 80110aa:	2b16      	cmp	r3, #22
 80110ac:	d101      	bne.n	80110b2 <__sflush_r+0xb6>
 80110ae:	602f      	str	r7, [r5, #0]
 80110b0:	e7b1      	b.n	8011016 <__sflush_r+0x1a>
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	e7ad      	b.n	8011018 <__sflush_r+0x1c>
 80110bc:	690f      	ldr	r7, [r1, #16]
 80110be:	2f00      	cmp	r7, #0
 80110c0:	d0a9      	beq.n	8011016 <__sflush_r+0x1a>
 80110c2:	0793      	lsls	r3, r2, #30
 80110c4:	680e      	ldr	r6, [r1, #0]
 80110c6:	bf08      	it	eq
 80110c8:	694b      	ldreq	r3, [r1, #20]
 80110ca:	600f      	str	r7, [r1, #0]
 80110cc:	bf18      	it	ne
 80110ce:	2300      	movne	r3, #0
 80110d0:	eba6 0807 	sub.w	r8, r6, r7
 80110d4:	608b      	str	r3, [r1, #8]
 80110d6:	f1b8 0f00 	cmp.w	r8, #0
 80110da:	dd9c      	ble.n	8011016 <__sflush_r+0x1a>
 80110dc:	6a21      	ldr	r1, [r4, #32]
 80110de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110e0:	4643      	mov	r3, r8
 80110e2:	463a      	mov	r2, r7
 80110e4:	4628      	mov	r0, r5
 80110e6:	47b0      	blx	r6
 80110e8:	2800      	cmp	r0, #0
 80110ea:	dc06      	bgt.n	80110fa <__sflush_r+0xfe>
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110f2:	81a3      	strh	r3, [r4, #12]
 80110f4:	f04f 30ff 	mov.w	r0, #4294967295
 80110f8:	e78e      	b.n	8011018 <__sflush_r+0x1c>
 80110fa:	4407      	add	r7, r0
 80110fc:	eba8 0800 	sub.w	r8, r8, r0
 8011100:	e7e9      	b.n	80110d6 <__sflush_r+0xda>
 8011102:	bf00      	nop
 8011104:	20400001 	.word	0x20400001

08011108 <_fflush_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	690b      	ldr	r3, [r1, #16]
 801110c:	4605      	mov	r5, r0
 801110e:	460c      	mov	r4, r1
 8011110:	b913      	cbnz	r3, 8011118 <_fflush_r+0x10>
 8011112:	2500      	movs	r5, #0
 8011114:	4628      	mov	r0, r5
 8011116:	bd38      	pop	{r3, r4, r5, pc}
 8011118:	b118      	cbz	r0, 8011122 <_fflush_r+0x1a>
 801111a:	6983      	ldr	r3, [r0, #24]
 801111c:	b90b      	cbnz	r3, 8011122 <_fflush_r+0x1a>
 801111e:	f7ff f9dd 	bl	80104dc <__sinit>
 8011122:	4b14      	ldr	r3, [pc, #80]	; (8011174 <_fflush_r+0x6c>)
 8011124:	429c      	cmp	r4, r3
 8011126:	d11b      	bne.n	8011160 <_fflush_r+0x58>
 8011128:	686c      	ldr	r4, [r5, #4]
 801112a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0ef      	beq.n	8011112 <_fflush_r+0xa>
 8011132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011134:	07d0      	lsls	r0, r2, #31
 8011136:	d404      	bmi.n	8011142 <_fflush_r+0x3a>
 8011138:	0599      	lsls	r1, r3, #22
 801113a:	d402      	bmi.n	8011142 <_fflush_r+0x3a>
 801113c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801113e:	f7ff fa7d 	bl	801063c <__retarget_lock_acquire_recursive>
 8011142:	4628      	mov	r0, r5
 8011144:	4621      	mov	r1, r4
 8011146:	f7ff ff59 	bl	8010ffc <__sflush_r>
 801114a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801114c:	07da      	lsls	r2, r3, #31
 801114e:	4605      	mov	r5, r0
 8011150:	d4e0      	bmi.n	8011114 <_fflush_r+0xc>
 8011152:	89a3      	ldrh	r3, [r4, #12]
 8011154:	059b      	lsls	r3, r3, #22
 8011156:	d4dd      	bmi.n	8011114 <_fflush_r+0xc>
 8011158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801115a:	f7ff fa70 	bl	801063e <__retarget_lock_release_recursive>
 801115e:	e7d9      	b.n	8011114 <_fflush_r+0xc>
 8011160:	4b05      	ldr	r3, [pc, #20]	; (8011178 <_fflush_r+0x70>)
 8011162:	429c      	cmp	r4, r3
 8011164:	d101      	bne.n	801116a <_fflush_r+0x62>
 8011166:	68ac      	ldr	r4, [r5, #8]
 8011168:	e7df      	b.n	801112a <_fflush_r+0x22>
 801116a:	4b04      	ldr	r3, [pc, #16]	; (801117c <_fflush_r+0x74>)
 801116c:	429c      	cmp	r4, r3
 801116e:	bf08      	it	eq
 8011170:	68ec      	ldreq	r4, [r5, #12]
 8011172:	e7da      	b.n	801112a <_fflush_r+0x22>
 8011174:	08013f48 	.word	0x08013f48
 8011178:	08013f68 	.word	0x08013f68
 801117c:	08013f28 	.word	0x08013f28

08011180 <_lseek_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d07      	ldr	r5, [pc, #28]	; (80111a0 <_lseek_r+0x20>)
 8011184:	4604      	mov	r4, r0
 8011186:	4608      	mov	r0, r1
 8011188:	4611      	mov	r1, r2
 801118a:	2200      	movs	r2, #0
 801118c:	602a      	str	r2, [r5, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	f7f0 f8ce 	bl	8001330 <_lseek>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_lseek_r+0x1e>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_lseek_r+0x1e>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	20005b70 	.word	0x20005b70

080111a4 <__swhatbuf_r>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	460e      	mov	r6, r1
 80111a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111ac:	2900      	cmp	r1, #0
 80111ae:	b096      	sub	sp, #88	; 0x58
 80111b0:	4614      	mov	r4, r2
 80111b2:	461d      	mov	r5, r3
 80111b4:	da07      	bge.n	80111c6 <__swhatbuf_r+0x22>
 80111b6:	2300      	movs	r3, #0
 80111b8:	602b      	str	r3, [r5, #0]
 80111ba:	89b3      	ldrh	r3, [r6, #12]
 80111bc:	061a      	lsls	r2, r3, #24
 80111be:	d410      	bmi.n	80111e2 <__swhatbuf_r+0x3e>
 80111c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111c4:	e00e      	b.n	80111e4 <__swhatbuf_r+0x40>
 80111c6:	466a      	mov	r2, sp
 80111c8:	f000 f8b2 	bl	8011330 <_fstat_r>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	dbf2      	blt.n	80111b6 <__swhatbuf_r+0x12>
 80111d0:	9a01      	ldr	r2, [sp, #4]
 80111d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80111da:	425a      	negs	r2, r3
 80111dc:	415a      	adcs	r2, r3
 80111de:	602a      	str	r2, [r5, #0]
 80111e0:	e7ee      	b.n	80111c0 <__swhatbuf_r+0x1c>
 80111e2:	2340      	movs	r3, #64	; 0x40
 80111e4:	2000      	movs	r0, #0
 80111e6:	6023      	str	r3, [r4, #0]
 80111e8:	b016      	add	sp, #88	; 0x58
 80111ea:	bd70      	pop	{r4, r5, r6, pc}

080111ec <__smakebuf_r>:
 80111ec:	898b      	ldrh	r3, [r1, #12]
 80111ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111f0:	079d      	lsls	r5, r3, #30
 80111f2:	4606      	mov	r6, r0
 80111f4:	460c      	mov	r4, r1
 80111f6:	d507      	bpl.n	8011208 <__smakebuf_r+0x1c>
 80111f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	6123      	str	r3, [r4, #16]
 8011200:	2301      	movs	r3, #1
 8011202:	6163      	str	r3, [r4, #20]
 8011204:	b002      	add	sp, #8
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	ab01      	add	r3, sp, #4
 801120a:	466a      	mov	r2, sp
 801120c:	f7ff ffca 	bl	80111a4 <__swhatbuf_r>
 8011210:	9900      	ldr	r1, [sp, #0]
 8011212:	4605      	mov	r5, r0
 8011214:	4630      	mov	r0, r6
 8011216:	f7ff fa6b 	bl	80106f0 <_malloc_r>
 801121a:	b948      	cbnz	r0, 8011230 <__smakebuf_r+0x44>
 801121c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011220:	059a      	lsls	r2, r3, #22
 8011222:	d4ef      	bmi.n	8011204 <__smakebuf_r+0x18>
 8011224:	f023 0303 	bic.w	r3, r3, #3
 8011228:	f043 0302 	orr.w	r3, r3, #2
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	e7e3      	b.n	80111f8 <__smakebuf_r+0xc>
 8011230:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <__smakebuf_r+0x7c>)
 8011232:	62b3      	str	r3, [r6, #40]	; 0x28
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	6020      	str	r0, [r4, #0]
 8011238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801123c:	81a3      	strh	r3, [r4, #12]
 801123e:	9b00      	ldr	r3, [sp, #0]
 8011240:	6163      	str	r3, [r4, #20]
 8011242:	9b01      	ldr	r3, [sp, #4]
 8011244:	6120      	str	r0, [r4, #16]
 8011246:	b15b      	cbz	r3, 8011260 <__smakebuf_r+0x74>
 8011248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801124c:	4630      	mov	r0, r6
 801124e:	f000 f881 	bl	8011354 <_isatty_r>
 8011252:	b128      	cbz	r0, 8011260 <__smakebuf_r+0x74>
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	f023 0303 	bic.w	r3, r3, #3
 801125a:	f043 0301 	orr.w	r3, r3, #1
 801125e:	81a3      	strh	r3, [r4, #12]
 8011260:	89a0      	ldrh	r0, [r4, #12]
 8011262:	4305      	orrs	r5, r0
 8011264:	81a5      	strh	r5, [r4, #12]
 8011266:	e7cd      	b.n	8011204 <__smakebuf_r+0x18>
 8011268:	08010475 	.word	0x08010475

0801126c <__malloc_lock>:
 801126c:	4801      	ldr	r0, [pc, #4]	; (8011274 <__malloc_lock+0x8>)
 801126e:	f7ff b9e5 	b.w	801063c <__retarget_lock_acquire_recursive>
 8011272:	bf00      	nop
 8011274:	20005b78 	.word	0x20005b78

08011278 <__malloc_unlock>:
 8011278:	4801      	ldr	r0, [pc, #4]	; (8011280 <__malloc_unlock+0x8>)
 801127a:	f7ff b9e0 	b.w	801063e <__retarget_lock_release_recursive>
 801127e:	bf00      	nop
 8011280:	20005b78 	.word	0x20005b78

08011284 <_read_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4d07      	ldr	r5, [pc, #28]	; (80112a4 <_read_r+0x20>)
 8011288:	4604      	mov	r4, r0
 801128a:	4608      	mov	r0, r1
 801128c:	4611      	mov	r1, r2
 801128e:	2200      	movs	r2, #0
 8011290:	602a      	str	r2, [r5, #0]
 8011292:	461a      	mov	r2, r3
 8011294:	f7ef ffec 	bl	8001270 <_read>
 8011298:	1c43      	adds	r3, r0, #1
 801129a:	d102      	bne.n	80112a2 <_read_r+0x1e>
 801129c:	682b      	ldr	r3, [r5, #0]
 801129e:	b103      	cbz	r3, 80112a2 <_read_r+0x1e>
 80112a0:	6023      	str	r3, [r4, #0]
 80112a2:	bd38      	pop	{r3, r4, r5, pc}
 80112a4:	20005b70 	.word	0x20005b70

080112a8 <_raise_r>:
 80112a8:	291f      	cmp	r1, #31
 80112aa:	b538      	push	{r3, r4, r5, lr}
 80112ac:	4604      	mov	r4, r0
 80112ae:	460d      	mov	r5, r1
 80112b0:	d904      	bls.n	80112bc <_raise_r+0x14>
 80112b2:	2316      	movs	r3, #22
 80112b4:	6003      	str	r3, [r0, #0]
 80112b6:	f04f 30ff 	mov.w	r0, #4294967295
 80112ba:	bd38      	pop	{r3, r4, r5, pc}
 80112bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112be:	b112      	cbz	r2, 80112c6 <_raise_r+0x1e>
 80112c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112c4:	b94b      	cbnz	r3, 80112da <_raise_r+0x32>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f000 f830 	bl	801132c <_getpid_r>
 80112cc:	462a      	mov	r2, r5
 80112ce:	4601      	mov	r1, r0
 80112d0:	4620      	mov	r0, r4
 80112d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d6:	f000 b817 	b.w	8011308 <_kill_r>
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d00a      	beq.n	80112f4 <_raise_r+0x4c>
 80112de:	1c59      	adds	r1, r3, #1
 80112e0:	d103      	bne.n	80112ea <_raise_r+0x42>
 80112e2:	2316      	movs	r3, #22
 80112e4:	6003      	str	r3, [r0, #0]
 80112e6:	2001      	movs	r0, #1
 80112e8:	e7e7      	b.n	80112ba <_raise_r+0x12>
 80112ea:	2400      	movs	r4, #0
 80112ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112f0:	4628      	mov	r0, r5
 80112f2:	4798      	blx	r3
 80112f4:	2000      	movs	r0, #0
 80112f6:	e7e0      	b.n	80112ba <_raise_r+0x12>

080112f8 <raise>:
 80112f8:	4b02      	ldr	r3, [pc, #8]	; (8011304 <raise+0xc>)
 80112fa:	4601      	mov	r1, r0
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	f7ff bfd3 	b.w	80112a8 <_raise_r>
 8011302:	bf00      	nop
 8011304:	20000014 	.word	0x20000014

08011308 <_kill_r>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4d07      	ldr	r5, [pc, #28]	; (8011328 <_kill_r+0x20>)
 801130c:	2300      	movs	r3, #0
 801130e:	4604      	mov	r4, r0
 8011310:	4608      	mov	r0, r1
 8011312:	4611      	mov	r1, r2
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	f7ef ff8f 	bl	8001238 <_kill>
 801131a:	1c43      	adds	r3, r0, #1
 801131c:	d102      	bne.n	8011324 <_kill_r+0x1c>
 801131e:	682b      	ldr	r3, [r5, #0]
 8011320:	b103      	cbz	r3, 8011324 <_kill_r+0x1c>
 8011322:	6023      	str	r3, [r4, #0]
 8011324:	bd38      	pop	{r3, r4, r5, pc}
 8011326:	bf00      	nop
 8011328:	20005b70 	.word	0x20005b70

0801132c <_getpid_r>:
 801132c:	f7ef bf7c 	b.w	8001228 <_getpid>

08011330 <_fstat_r>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	4d07      	ldr	r5, [pc, #28]	; (8011350 <_fstat_r+0x20>)
 8011334:	2300      	movs	r3, #0
 8011336:	4604      	mov	r4, r0
 8011338:	4608      	mov	r0, r1
 801133a:	4611      	mov	r1, r2
 801133c:	602b      	str	r3, [r5, #0]
 801133e:	f7ef ffdc 	bl	80012fa <_fstat>
 8011342:	1c43      	adds	r3, r0, #1
 8011344:	d102      	bne.n	801134c <_fstat_r+0x1c>
 8011346:	682b      	ldr	r3, [r5, #0]
 8011348:	b103      	cbz	r3, 801134c <_fstat_r+0x1c>
 801134a:	6023      	str	r3, [r4, #0]
 801134c:	bd38      	pop	{r3, r4, r5, pc}
 801134e:	bf00      	nop
 8011350:	20005b70 	.word	0x20005b70

08011354 <_isatty_r>:
 8011354:	b538      	push	{r3, r4, r5, lr}
 8011356:	4d06      	ldr	r5, [pc, #24]	; (8011370 <_isatty_r+0x1c>)
 8011358:	2300      	movs	r3, #0
 801135a:	4604      	mov	r4, r0
 801135c:	4608      	mov	r0, r1
 801135e:	602b      	str	r3, [r5, #0]
 8011360:	f7ef ffdb 	bl	800131a <_isatty>
 8011364:	1c43      	adds	r3, r0, #1
 8011366:	d102      	bne.n	801136e <_isatty_r+0x1a>
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	b103      	cbz	r3, 801136e <_isatty_r+0x1a>
 801136c:	6023      	str	r3, [r4, #0]
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	20005b70 	.word	0x20005b70

08011374 <_init>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	bf00      	nop
 8011378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801137a:	bc08      	pop	{r3}
 801137c:	469e      	mov	lr, r3
 801137e:	4770      	bx	lr

08011380 <_fini>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	bf00      	nop
 8011384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011386:	bc08      	pop	{r3}
 8011388:	469e      	mov	lr, r3
 801138a:	4770      	bx	lr
